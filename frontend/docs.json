{
  "libs": {
    "classes": [],
    "functions": [
      {
        "annotations": [],
        "comment": " This returns standard library version\n (Note: this is hardcoded)",
        "name": "version",
        "parameters": [],
        "return_type": {
          "type": "str"
        }
      }
    ],
    "global_consts": [],
    "imports": [],
    "macros": []
  },
  "libs.argparse": {
    "classes": [
      {
        "annotations": [
          {
            "argument": "struct argparse*",
            "name": "@nativedefine"
          }
        ],
        "comment": " Arg parse state object",
        "members": [],
        "name": "ArgParse"
      },
      {
        "annotations": [
          {
            "argument": "struct yk__arg_remainder*",
            "name": "@nativedefine"
          }
        ],
        "comment": " Remaining arguments after parsing given arguments",
        "members": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "argc"
          },
          {
            "datatype": {
              "arguments": [
                {
                  "type": "str"
                }
              ],
              "type": "Array"
            },
            "name": "remainder"
          }
        ],
        "name": "ArgParseRemainder"
      },
      {
        "annotations": [
          {
            "argument": "struct yk__argparse_wrapper*",
            "name": "@nativedefine"
          }
        ],
        "comment": " Argument parser wrapper",
        "members": [
          {
            "datatype": {
              "type": "ArgParse"
            },
            "name": "state"
          }
        ],
        "name": "ArgParseWrapper"
      },
      {
        "annotations": [
          {
            "argument": "struct argparse_option",
            "name": "@nativedefine"
          },
          {
            "name": "@onstack"
          }
        ],
        "comment": " An argparse option\n These objects are deleted when del_argparse() is called\n However, Array[Option] is not",
        "members": [],
        "name": "Option"
      }
    ],
    "functions": [
      {
        "annotations": [
          {
            "argument": "yk__delargparse",
            "name": "@native"
          }
        ],
        "comment": " Delete arg parser",
        "name": "del_argparse",
        "parameters": [
          {
            "datatype": {
              "type": "ArgParseWrapper"
            },
            "name": "object"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "yk__del_argparse_remainder",
            "name": "@native"
          }
        ],
        "comment": " Delete given argparse remainder object",
        "name": "del_remainder",
        "parameters": [
          {
            "datatype": {
              "type": "ArgParseRemainder"
            },
            "name": "a"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [],
        "comment": " Initialize a new argument parser\n Note: options array last element must be opt_end()",
        "name": "new",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "type": "Option"
                }
              ],
              "type": "Array"
            },
            "name": "options"
          },
          {
            "datatype": {
              "arguments": [
                {
                  "type": "str"
                }
              ],
              "type": "Array"
            },
            "name": "usages"
          }
        ],
        "return_type": {
          "type": "ArgParseWrapper"
        }
      },
      {
        "annotations": [
          {
            "argument": "yk__newargparse",
            "name": "@native"
          }
        ],
        "comment": " Initialize a new argument parser (with flags)\n Note: options array last element must be opt_end()",
        "name": "new_ex",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "type": "Option"
                }
              ],
              "type": "Array"
            },
            "name": "options"
          },
          {
            "datatype": {
              "arguments": [
                {
                  "type": "str"
                }
              ],
              "type": "Array"
            },
            "name": "usages"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "flag"
          }
        ],
        "return_type": {
          "type": "ArgParseWrapper"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " create a boolean option",
        "name": "opt_boolean",
        "parameters": [
          {
            "datatype": {
              "type": "str"
            },
            "name": "short"
          },
          {
            "datatype": {
              "type": "str"
            },
            "name": "large"
          },
          {
            "datatype": {
              "arguments": [
                {
                  "type": "int"
                }
              ],
              "type": "Ptr"
            },
            "name": "result"
          },
          {
            "datatype": {
              "type": "str"
            },
            "name": "help"
          }
        ],
        "return_type": {
          "type": "Option"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " End of options",
        "name": "opt_end",
        "parameters": [],
        "return_type": {
          "type": "Option"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " create a float option",
        "name": "opt_float",
        "parameters": [
          {
            "datatype": {
              "type": "str"
            },
            "name": "short"
          },
          {
            "datatype": {
              "type": "str"
            },
            "name": "large"
          },
          {
            "datatype": {
              "arguments": [
                {
                  "type": "f32"
                }
              ],
              "type": "Ptr"
            },
            "name": "result"
          },
          {
            "datatype": {
              "type": "str"
            },
            "name": "help"
          }
        ],
        "return_type": {
          "type": "Option"
        }
      },
      {
        "annotations": [
          {
            "argument": "(struct argparse_option) OPT_GROUP(nn__name)",
            "name": "@nativemacro"
          }
        ],
        "comment": " Create a command group here",
        "name": "opt_group",
        "parameters": [
          {
            "datatype": {
              "type": "str"
            },
            "name": "name"
          }
        ],
        "return_type": {
          "type": "Option"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Help option",
        "name": "opt_help",
        "parameters": [],
        "return_type": {
          "type": "Option"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " create an integer option",
        "name": "opt_integer",
        "parameters": [
          {
            "datatype": {
              "type": "str"
            },
            "name": "short"
          },
          {
            "datatype": {
              "type": "str"
            },
            "name": "large"
          },
          {
            "datatype": {
              "arguments": [
                {
                  "type": "int"
                }
              ],
              "type": "Ptr"
            },
            "name": "result"
          },
          {
            "datatype": {
              "type": "str"
            },
            "name": "help"
          }
        ],
        "return_type": {
          "type": "Option"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " create a boolean option",
        "name": "opt_string",
        "parameters": [
          {
            "datatype": {
              "type": "str"
            },
            "name": "short"
          },
          {
            "datatype": {
              "type": "str"
            },
            "name": "large"
          },
          {
            "datatype": {
              "arguments": [
                {
                  "type": "CStr"
                }
              ],
              "type": "Ptr"
            },
            "name": "result"
          },
          {
            "datatype": {
              "type": "str"
            },
            "name": "help"
          }
        ],
        "return_type": {
          "type": "Option"
        }
      },
      {
        "annotations": [
          {
            "argument": "yk__argparse_parse",
            "name": "@native"
          }
        ],
        "comment": " Parse given arguments with given argparser object\n Any remaining values are returned\n You need to delete the remainder with del_argparse_remainder()",
        "name": "parse",
        "parameters": [
          {
            "datatype": {
              "type": "ArgParse"
            },
            "name": "argp"
          },
          {
            "datatype": {
              "arguments": [
                {
                  "type": "str"
                }
              ],
              "type": "Array"
            },
            "name": "arguments"
          }
        ],
        "return_type": {
          "type": "ArgParseRemainder"
        }
      },
      {
        "annotations": [
          {
            "argument": "argparse_describe",
            "name": "@native"
          }
        ],
        "comment": " Set description for help message",
        "name": "set_description",
        "parameters": [
          {
            "datatype": {
              "type": "ArgParse"
            },
            "name": "argp"
          },
          {
            "datatype": {
              "type": "str"
            },
            "name": "description"
          },
          {
            "datatype": {
              "type": "str"
            },
            "name": "epilog"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "argparse_usage",
            "name": "@native"
          }
        ],
        "comment": " Disaplay usage",
        "name": "usage",
        "parameters": [
          {
            "datatype": {
              "type": "ArgParse"
            },
            "name": "argp"
          }
        ],
        "return_type": {
          "type": "None"
        }
      }
    ],
    "global_consts": [
      {
        "comment": " Default behaviour of argparse",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ARGPARSE_DEFAULT"
      },
      {
        "comment": " Ignore unknown arguments",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ARGPARSE_IGNORE_UNKNOWN_ARGS"
      },
      {
        "comment": " Do both stopping at unknown options and ignoring unknown arguments",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ARGPARSE_STOP_AT_NON_AND_IGNORE_UNKNWON"
      },
      {
        "comment": " Stop at non option",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ARGPARSE_STOP_AT_NON_OPTION"
      }
    ],
    "imports": [
      {
        "alias": "c",
        "path": [
          "libs",
          "c"
        ]
      }
    ],
    "macros": []
  },
  "libs.c": {
    "classes": [
      {
        "annotations": [
          {
            "argument": "bool",
            "name": "@nativedefine"
          }
        ],
        "comment": "",
        "members": [],
        "name": "CBool"
      },
      {
        "annotations": [
          {
            "argument": "char",
            "name": "@nativedefine"
          }
        ],
        "comment": "",
        "members": [],
        "name": "CChar"
      },
      {
        "annotations": [
          {
            "argument": "double",
            "name": "@nativedefine"
          }
        ],
        "comment": "",
        "members": [],
        "name": "CDouble"
      },
      {
        "annotations": [
          {
            "argument": "float",
            "name": "@nativedefine"
          }
        ],
        "comment": "",
        "members": [],
        "name": "CFloat"
      },
      {
        "annotations": [
          {
            "argument": "int",
            "name": "@nativedefine"
          }
        ],
        "comment": "",
        "members": [],
        "name": "CInt"
      },
      {
        "annotations": [
          {
            "argument": "long",
            "name": "@nativedefine"
          }
        ],
        "comment": "",
        "members": [],
        "name": "CLong"
      },
      {
        "annotations": [
          {
            "argument": "long long",
            "name": "@nativedefine"
          }
        ],
        "comment": "",
        "members": [],
        "name": "CLongLong"
      },
      {
        "annotations": [
          {
            "argument": "signed char",
            "name": "@nativedefine"
          }
        ],
        "comment": "",
        "members": [],
        "name": "CSChar"
      },
      {
        "annotations": [
          {
            "argument": "short",
            "name": "@nativedefine"
          }
        ],
        "comment": "",
        "members": [],
        "name": "CShort"
      },
      {
        "annotations": [
          {
            "argument": "char*",
            "name": "@nativedefine"
          }
        ],
        "comment": " A char* string",
        "members": [],
        "name": "CStr"
      },
      {
        "annotations": [
          {
            "argument": "unsigned char",
            "name": "@nativedefine"
          }
        ],
        "comment": "",
        "members": [],
        "name": "CUChar"
      },
      {
        "annotations": [
          {
            "argument": "unsigned int",
            "name": "@nativedefine"
          }
        ],
        "comment": "",
        "members": [],
        "name": "CUInt"
      },
      {
        "annotations": [
          {
            "argument": "unsigned long",
            "name": "@nativedefine"
          }
        ],
        "comment": "",
        "members": [],
        "name": "CULong"
      },
      {
        "annotations": [
          {
            "argument": "unsigned long long",
            "name": "@nativedefine"
          }
        ],
        "comment": "",
        "members": [],
        "name": "CULongLong"
      },
      {
        "annotations": [
          {
            "argument": "unsigned short",
            "name": "@nativedefine"
          }
        ],
        "comment": "",
        "members": [],
        "name": "CUShort"
      },
      {
        "annotations": [
          {
            "argument": "size_t",
            "name": "@nativedefine"
          }
        ],
        "comment": " size_t in C code",
        "members": [],
        "name": "Size"
      },
      {
        "annotations": [
          {
            "argument": "void*",
            "name": "@nativedefine"
          }
        ],
        "comment": " Any pointer type\n void* in C",
        "members": [],
        "name": "VoidPtr"
      }
    ],
    "functions": [
      {
        "annotations": [
          {
            "argument": "acos",
            "name": "@nativedefine"
          }
        ],
        "comment": "",
        "name": "acos",
        "parameters": [
          {
            "datatype": {
              "type": "CDouble"
            },
            "name": "x"
          }
        ],
        "return_type": {
          "type": "CDouble"
        }
      },
      {
        "annotations": [
          {
            "argument": "asin",
            "name": "@nativedefine"
          }
        ],
        "comment": "",
        "name": "asin",
        "parameters": [
          {
            "datatype": {
              "type": "CDouble"
            },
            "name": "x"
          }
        ],
        "return_type": {
          "type": "CDouble"
        }
      },
      {
        "annotations": [
          {
            "argument": "atan",
            "name": "@nativedefine"
          }
        ],
        "comment": "",
        "name": "atan",
        "parameters": [
          {
            "datatype": {
              "type": "CDouble"
            },
            "name": "x"
          }
        ],
        "return_type": {
          "type": "CDouble"
        }
      },
      {
        "annotations": [
          {
            "argument": "atan2",
            "name": "@nativedefine"
          }
        ],
        "comment": "",
        "name": "atan2",
        "parameters": [
          {
            "datatype": {
              "type": "CDouble"
            },
            "name": "x"
          },
          {
            "datatype": {
              "type": "CDouble"
            },
            "name": "y"
          }
        ],
        "return_type": {
          "type": "CDouble"
        }
      },
      {
        "annotations": [
          {
            "argument": "calloc",
            "name": "@nativedefine"
          }
        ],
        "comment": "",
        "name": "calloc",
        "parameters": [
          {
            "datatype": {
              "type": "Size"
            },
            "name": "n"
          },
          {
            "datatype": {
              "type": "Size"
            },
            "name": "size"
          }
        ],
        "return_type": {
          "type": "VoidPtr"
        }
      },
      {
        "annotations": [
          {
            "argument": "ceil",
            "name": "@nativedefine"
          }
        ],
        "comment": "",
        "name": "ceil",
        "parameters": [
          {
            "datatype": {
              "type": "CDouble"
            },
            "name": "x"
          }
        ],
        "return_type": {
          "type": "CDouble"
        }
      },
      {
        "annotations": [
          {
            "argument": "cos",
            "name": "@nativedefine"
          }
        ],
        "comment": "",
        "name": "cos",
        "parameters": [
          {
            "datatype": {
              "type": "CDouble"
            },
            "name": "x"
          }
        ],
        "return_type": {
          "type": "CDouble"
        }
      },
      {
        "annotations": [
          {
            "argument": "cosh",
            "name": "@nativedefine"
          }
        ],
        "comment": "",
        "name": "cosh",
        "parameters": [
          {
            "datatype": {
              "type": "CDouble"
            },
            "name": "x"
          }
        ],
        "return_type": {
          "type": "CDouble"
        }
      },
      {
        "annotations": [
          {
            "argument": "strlen",
            "name": "@nativedefine"
          }
        ],
        "comment": "",
        "name": "cstrlen",
        "parameters": [
          {
            "datatype": {
              "type": "CStr"
            },
            "name": "s"
          }
        ],
        "return_type": {
          "type": "Size"
        }
      },
      {
        "annotations": [
          {
            "argument": "fabs",
            "name": "@nativedefine"
          }
        ],
        "comment": "",
        "name": "fabs",
        "parameters": [
          {
            "datatype": {
              "type": "CDouble"
            },
            "name": "x"
          }
        ],
        "return_type": {
          "type": "CDouble"
        }
      },
      {
        "annotations": [
          {
            "argument": "floor",
            "name": "@nativedefine"
          }
        ],
        "comment": "",
        "name": "floor",
        "parameters": [
          {
            "datatype": {
              "type": "CDouble"
            },
            "name": "x"
          }
        ],
        "return_type": {
          "type": "CDouble"
        }
      },
      {
        "annotations": [
          {
            "argument": "pow",
            "name": "@nativedefine"
          }
        ],
        "comment": "",
        "name": "fmod",
        "parameters": [
          {
            "datatype": {
              "type": "CDouble"
            },
            "name": "x"
          },
          {
            "datatype": {
              "type": "CDouble"
            },
            "name": "y"
          }
        ],
        "return_type": {
          "type": "CDouble"
        }
      },
      {
        "annotations": [
          {
            "argument": "free",
            "name": "@nativedefine"
          }
        ],
        "comment": "",
        "name": "free",
        "parameters": [
          {
            "datatype": {
              "type": "VoidPtr"
            },
            "name": "ptr"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Can we run system commands?",
        "name": "has_command_processor",
        "parameters": [],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [
          {
            "argument": "((size_t)nn__i)",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "itosize",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "i"
          }
        ],
        "return_type": {
          "type": "Size"
        }
      },
      {
        "annotations": [
          {
            "argument": "log",
            "name": "@nativedefine"
          }
        ],
        "comment": "",
        "name": "log",
        "parameters": [
          {
            "datatype": {
              "type": "CDouble"
            },
            "name": "x"
          }
        ],
        "return_type": {
          "type": "CDouble"
        }
      },
      {
        "annotations": [
          {
            "argument": "log10",
            "name": "@nativedefine"
          }
        ],
        "comment": "",
        "name": "log10",
        "parameters": [
          {
            "datatype": {
              "type": "CDouble"
            },
            "name": "x"
          }
        ],
        "return_type": {
          "type": "CDouble"
        }
      },
      {
        "annotations": [
          {
            "argument": "log2",
            "name": "@nativedefine"
          }
        ],
        "comment": "",
        "name": "log2",
        "parameters": [
          {
            "datatype": {
              "type": "CDouble"
            },
            "name": "x"
          }
        ],
        "return_type": {
          "type": "CDouble"
        }
      },
      {
        "annotations": [
          {
            "argument": "malloc",
            "name": "@nativedefine"
          }
        ],
        "comment": "",
        "name": "malloc",
        "parameters": [
          {
            "datatype": {
              "type": "Size"
            },
            "name": "size"
          }
        ],
        "return_type": {
          "type": "VoidPtr"
        }
      },
      {
        "annotations": [
          {
            "argument": "memcmp",
            "name": "@nativedefine"
          }
        ],
        "comment": "",
        "name": "memcmp",
        "parameters": [
          {
            "datatype": {
              "type": "VoidPtr"
            },
            "name": "str1"
          },
          {
            "datatype": {
              "type": "VoidPtr"
            },
            "name": "str2"
          },
          {
            "datatype": {
              "type": "Size"
            },
            "name": "size"
          }
        ],
        "return_type": {
          "type": "CInt"
        }
      },
      {
        "annotations": [
          {
            "argument": "memcpy",
            "name": "@nativedefine"
          }
        ],
        "comment": "",
        "name": "memcpy",
        "parameters": [
          {
            "datatype": {
              "type": "VoidPtr"
            },
            "name": "dest"
          },
          {
            "datatype": {
              "type": "VoidPtr"
            },
            "name": "src"
          },
          {
            "datatype": {
              "type": "Size"
            },
            "name": "size"
          }
        ],
        "return_type": {
          "type": "VoidPtr"
        }
      },
      {
        "annotations": [
          {
            "argument": "memmove",
            "name": "@nativedefine"
          }
        ],
        "comment": "",
        "name": "memmove",
        "parameters": [
          {
            "datatype": {
              "type": "VoidPtr"
            },
            "name": "dest"
          },
          {
            "datatype": {
              "type": "VoidPtr"
            },
            "name": "src"
          },
          {
            "datatype": {
              "type": "Size"
            },
            "name": "size"
          }
        ],
        "return_type": {
          "type": "VoidPtr"
        }
      },
      {
        "annotations": [
          {
            "argument": "memset",
            "name": "@nativedefine"
          }
        ],
        "comment": "",
        "name": "memset",
        "parameters": [
          {
            "datatype": {
              "type": "VoidPtr"
            },
            "name": "dest"
          },
          {
            "datatype": {
              "type": "CInt"
            },
            "name": "character"
          },
          {
            "datatype": {
              "type": "Size"
            },
            "name": "size"
          }
        ],
        "return_type": {
          "type": "VoidPtr"
        }
      },
      {
        "annotations": [
          {
            "argument": "pow",
            "name": "@nativedefine"
          }
        ],
        "comment": "",
        "name": "pow",
        "parameters": [
          {
            "datatype": {
              "type": "CDouble"
            },
            "name": "x"
          },
          {
            "datatype": {
              "type": "CDouble"
            },
            "name": "y"
          }
        ],
        "return_type": {
          "type": "CDouble"
        }
      },
      {
        "annotations": [
          {
            "argument": "realloc",
            "name": "@nativedefine"
          }
        ],
        "comment": "",
        "name": "realloc",
        "parameters": [
          {
            "datatype": {
              "type": "VoidPtr"
            },
            "name": "ptr"
          },
          {
            "datatype": {
              "type": "Size"
            },
            "name": "size"
          }
        ],
        "return_type": {
          "type": "VoidPtr"
        }
      },
      {
        "annotations": [
          {
            "argument": "sin",
            "name": "@nativedefine"
          }
        ],
        "comment": "",
        "name": "sin",
        "parameters": [
          {
            "datatype": {
              "type": "CDouble"
            },
            "name": "x"
          }
        ],
        "return_type": {
          "type": "CDouble"
        }
      },
      {
        "annotations": [
          {
            "argument": "sinh",
            "name": "@nativedefine"
          }
        ],
        "comment": "",
        "name": "sinh",
        "parameters": [
          {
            "datatype": {
              "type": "CDouble"
            },
            "name": "x"
          }
        ],
        "return_type": {
          "type": "CDouble"
        }
      },
      {
        "annotations": [
          {
            "argument": "sqrt",
            "name": "@nativedefine"
          }
        ],
        "comment": "",
        "name": "sqrt",
        "parameters": [
          {
            "datatype": {
              "type": "CDouble"
            },
            "name": "x"
          }
        ],
        "return_type": {
          "type": "CDouble"
        }
      },
      {
        "annotations": [
          {
            "argument": "system",
            "name": "@nativedefine"
          }
        ],
        "comment": " Run a system command without caring what it will do\n Wait for exit",
        "name": "system",
        "parameters": [
          {
            "datatype": {
              "type": "CStr"
            },
            "name": "program"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "tan",
            "name": "@nativedefine"
          }
        ],
        "comment": "",
        "name": "tan",
        "parameters": [
          {
            "datatype": {
              "type": "CDouble"
            },
            "name": "x"
          }
        ],
        "return_type": {
          "type": "CDouble"
        }
      },
      {
        "annotations": [
          {
            "argument": "tanh",
            "name": "@nativedefine"
          }
        ],
        "comment": "",
        "name": "tanh",
        "parameters": [
          {
            "datatype": {
              "type": "CDouble"
            },
            "name": "x"
          }
        ],
        "return_type": {
          "type": "CDouble"
        }
      }
    ],
    "global_consts": [],
    "imports": [],
    "macros": [
      {
        "comment": " c.char!{\"a\"} --> create a char --> inlinec(\"Const[Char]\", \"'a'\")",
        "name": "char!"
      },
      {
        "comment": " c.const_str!{\"Hi\"} --> create a const char * const --> inlinec(\"Const[Ptr[Const[Char]]]\", \"\\\"Hi\\\"\")",
        "name": "const_str!"
      },
      {
        "comment": " c.cstr!{\"Hi\"} --> create a c.CStr",
        "name": "cstr!"
      }
    ]
  },
  "libs.console": {
    "classes": [],
    "functions": [
      {
        "annotations": [],
        "comment": " Print text in console, in blue color",
        "name": "blue",
        "parameters": [
          {
            "datatype": {
              "type": "sr"
            },
            "name": "x"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "yk__clear",
            "name": "@nativedefine"
          }
        ],
        "comment": " Clear console",
        "name": "clear",
        "parameters": [],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [],
        "comment": " Print in given color and then rewind",
        "name": "color_print",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "color"
          },
          {
            "datatype": {
              "type": "sr"
            },
            "name": "x"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [],
        "comment": " Print text in console, in cyan color",
        "name": "cyan",
        "parameters": [
          {
            "datatype": {
              "type": "sr"
            },
            "name": "x"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Get a single character / key press\n   Can be used as a pause",
        "name": "getch",
        "parameters": [],
        "return_type": {
          "type": "int"
        }
      },
      {
        "annotations": [],
        "comment": " Print text in console, in green color",
        "name": "green",
        "parameters": [
          {
            "datatype": {
              "type": "sr"
            },
            "name": "x"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [],
        "comment": " Print text in console, in purple color",
        "name": "purple",
        "parameters": [
          {
            "datatype": {
              "type": "sr"
            },
            "name": "x"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [],
        "comment": " Print text in console, in red color",
        "name": "red",
        "parameters": [
          {
            "datatype": {
              "type": "sr"
            },
            "name": "x"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Set given color",
        "name": "set_color",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "c"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [],
        "comment": " Print text in console, in white color",
        "name": "white",
        "parameters": [
          {
            "datatype": {
              "type": "sr"
            },
            "name": "x"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [],
        "comment": " Print text in console, in yellow color",
        "name": "yellow",
        "parameters": [
          {
            "datatype": {
              "type": "sr"
            },
            "name": "x"
          }
        ],
        "return_type": {
          "type": "None"
        }
      }
    ],
    "global_consts": [
      {
        "comment": " Apply blue foreground color",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "BLUE"
      },
      {
        "comment": " Apply cyan foreground color",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "CYAN"
      },
      {
        "comment": " Apply green foreground color",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "GREEN"
      },
      {
        "comment": " Apply purple foreground color",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "PURPLE"
      },
      {
        "comment": " Apply red foreground color",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "RED"
      },
      {
        "comment": " Use rewind with set_color to stop applying any color",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "REWIND"
      },
      {
        "comment": " Apply white foreground color",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "WHITE"
      },
      {
        "comment": " Apply yellow foreground color",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "YELLOW"
      }
    ],
    "imports": [],
    "macros": []
  },
  "libs.fileformats.ini": {
    "classes": [
      {
        "annotations": [
          {
            "argument": "ini_t*",
            "name": "@nativedefine"
          }
        ],
        "comment": " INI Object",
        "members": [],
        "name": "Ini"
      }
    ],
    "functions": [
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Delete INI object",
        "name": "del_ini",
        "parameters": [
          {
            "datatype": {
              "type": "Ini"
            },
            "name": "object"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Parse INI file from given string data",
        "name": "from_str",
        "parameters": [
          {
            "datatype": {
              "type": "sr"
            },
            "name": "ini_data"
          }
        ],
        "return_type": {
          "type": "Ini"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Get a property in given section\n Empty string is returned if we cannot find the section",
        "name": "get",
        "parameters": [
          {
            "datatype": {
              "type": "Ini"
            },
            "name": "object"
          },
          {
            "datatype": {
              "type": "sr"
            },
            "name": "section"
          },
          {
            "datatype": {
              "type": "sr"
            },
            "name": "property"
          }
        ],
        "return_type": {
          "type": "str"
        }
      }
    ],
    "global_consts": [],
    "imports": [],
    "macros": []
  },
  "libs.fileformats.toml": {
    "classes": [
      {
        "annotations": [
          {
            "argument": "toml_table_t*",
            "name": "@nativedefine"
          }
        ],
        "comment": " TOML Table object\n This is like a dictionary",
        "members": [],
        "name": "Table"
      },
      {
        "annotations": [
          {
            "argument": "toml_array_t*",
            "name": "@nativedefine"
          }
        ],
        "comment": " Array of any type",
        "members": [],
        "name": "TomlArray"
      }
    ],
    "functions": [
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Get length of array",
        "name": "array_len",
        "parameters": [
          {
            "datatype": {
              "type": "TomlArray"
            },
            "name": "x"
          }
        ],
        "return_type": {
          "type": "int"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Get bool from array at location or false",
        "name": "bool_at",
        "parameters": [
          {
            "datatype": {
              "type": "TomlArray"
            },
            "name": "x"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "pos"
          }
        ],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Get bool from array at location or given default",
        "name": "bool_at_default",
        "parameters": [
          {
            "datatype": {
              "type": "TomlArray"
            },
            "name": "x"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "pos"
          },
          {
            "datatype": {
              "type": "bool"
            },
            "name": "default"
          }
        ],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Delete a table. Note that you do not need to delete child tables",
        "name": "del_table",
        "parameters": [
          {
            "datatype": {
              "type": "Table"
            },
            "name": "x"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Parse to a TOML Table from given string",
        "name": "from_str",
        "parameters": [
          {
            "datatype": {
              "type": "sr"
            },
            "name": "x"
          }
        ],
        "return_type": {
          "type": "Table"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Get any array from table object",
        "name": "get_array",
        "parameters": [
          {
            "datatype": {
              "type": "Table"
            },
            "name": "x"
          },
          {
            "datatype": {
              "type": "sr"
            },
            "name": "name"
          }
        ],
        "return_type": {
          "type": "TomlArray"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Get a bool from table or false if fails",
        "name": "get_bool",
        "parameters": [
          {
            "datatype": {
              "type": "Table"
            },
            "name": "x"
          },
          {
            "datatype": {
              "type": "sr"
            },
            "name": "name"
          }
        ],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Get a bool from table or given default",
        "name": "get_bool_default",
        "parameters": [
          {
            "datatype": {
              "type": "Table"
            },
            "name": "x"
          },
          {
            "datatype": {
              "type": "sr"
            },
            "name": "name"
          },
          {
            "datatype": {
              "type": "bool"
            },
            "name": "default"
          }
        ],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Get an int from table or 0 if fails",
        "name": "get_int",
        "parameters": [
          {
            "datatype": {
              "type": "Table"
            },
            "name": "x"
          },
          {
            "datatype": {
              "type": "sr"
            },
            "name": "name"
          }
        ],
        "return_type": {
          "type": "int"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Get an int from table or given default",
        "name": "get_int_default",
        "parameters": [
          {
            "datatype": {
              "type": "Table"
            },
            "name": "x"
          },
          {
            "datatype": {
              "type": "sr"
            },
            "name": "name"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "default"
          }
        ],
        "return_type": {
          "type": "int"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Get a string from table or empty if fails",
        "name": "get_string",
        "parameters": [
          {
            "datatype": {
              "type": "Table"
            },
            "name": "x"
          },
          {
            "datatype": {
              "type": "sr"
            },
            "name": "name"
          }
        ],
        "return_type": {
          "type": "str"
        }
      },
      {
        "annotations": [],
        "comment": " Get an array as native string array",
        "name": "get_string_array",
        "parameters": [
          {
            "datatype": {
              "type": "Table"
            },
            "name": "x"
          },
          {
            "datatype": {
              "type": "sr"
            },
            "name": "name"
          }
        ],
        "return_type": {
          "arguments": [
            {
              "type": "str"
            }
          ],
          "type": "Array"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Get a string from table or given default",
        "name": "get_string_default",
        "parameters": [
          {
            "datatype": {
              "type": "Table"
            },
            "name": "x"
          },
          {
            "datatype": {
              "type": "sr"
            },
            "name": "name"
          },
          {
            "datatype": {
              "type": "sr"
            },
            "name": "default"
          }
        ],
        "return_type": {
          "type": "str"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Get a Table from given name",
        "name": "get_table",
        "parameters": [
          {
            "datatype": {
              "type": "Table"
            },
            "name": "x"
          },
          {
            "datatype": {
              "type": "sr"
            },
            "name": "name"
          }
        ],
        "return_type": {
          "type": "Table"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Get int from array at location or 0",
        "name": "int_at",
        "parameters": [
          {
            "datatype": {
              "type": "TomlArray"
            },
            "name": "x"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "pos"
          }
        ],
        "return_type": {
          "type": "int"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Get int from array at locaiton or given default",
        "name": "int_at_default",
        "parameters": [
          {
            "datatype": {
              "type": "TomlArray"
            },
            "name": "x"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "pos"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "default"
          }
        ],
        "return_type": {
          "type": "int"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Get string from array at location or empty",
        "name": "string_at",
        "parameters": [
          {
            "datatype": {
              "type": "TomlArray"
            },
            "name": "x"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "pos"
          }
        ],
        "return_type": {
          "type": "str"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Get string from array at location or given default",
        "name": "string_at_default",
        "parameters": [
          {
            "datatype": {
              "type": "TomlArray"
            },
            "name": "x"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "pos"
          },
          {
            "datatype": {
              "type": "sr"
            },
            "name": "default"
          }
        ],
        "return_type": {
          "type": "str"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Is this a valid array?",
        "name": "valid_array",
        "parameters": [
          {
            "datatype": {
              "type": "TomlArray"
            },
            "name": "x"
          }
        ],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Is this a valid table?",
        "name": "valid_table",
        "parameters": [
          {
            "datatype": {
              "type": "Table"
            },
            "name": "x"
          }
        ],
        "return_type": {
          "type": "bool"
        }
      }
    ],
    "global_consts": [],
    "imports": [],
    "macros": []
  },
  "libs.io": {
    "classes": [
      {
        "annotations": [
          {
            "argument": "FILE",
            "name": "@nativedefine"
          }
        ],
        "comment": "",
        "members": [],
        "name": "File"
      },
      {
        "annotations": [
          {
            "argument": "fpos_t",
            "name": "@nativedefine"
          }
        ],
        "comment": "",
        "members": [],
        "name": "FilePos"
      }
    ],
    "functions": [
      {
        "annotations": [
          {
            "argument": "yk__io_clearerr",
            "name": "@nativedefine"
          }
        ],
        "comment": " Clear eof and error",
        "name": "clear_error",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "type": "File"
                }
              ],
              "type": "Ptr"
            },
            "name": "stream"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "yk__io_close",
            "name": "@nativedefine"
          }
        ],
        "comment": "",
        "name": "close",
        "parameters": [
          {
            "datatype": {
              "type": "CInt"
            },
            "name": "file"
          }
        ],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [
          {
            "argument": "yk__io_fclose",
            "name": "@nativedefine"
          }
        ],
        "comment": " Close a file using given FILE*",
        "name": "fclose",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "type": "File"
                }
              ],
              "type": "Ptr"
            },
            "name": "stream"
          }
        ],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [
          {
            "argument": "yk__io_fflush",
            "name": "@nativedefine"
          }
        ],
        "comment": "",
        "name": "fflush",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "type": "File"
                }
              ],
              "type": "Ptr"
            },
            "name": "stream"
          }
        ],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [],
        "comment": "",
        "name": "fflush_all",
        "parameters": [],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [
          {
            "argument": "yk__io_fopen",
            "name": "@nativedefine"
          }
        ],
        "comment": " Open a file",
        "name": "fopen",
        "parameters": [
          {
            "datatype": {
              "type": "str"
            },
            "name": "fname"
          },
          {
            "datatype": {
              "type": "str"
            },
            "name": "mode"
          }
        ],
        "return_type": {
          "arguments": [
            {
              "type": "File"
            }
          ],
          "type": "Ptr"
        }
      },
      {
        "annotations": [
          {
            "argument": "yk__io_fread",
            "name": "@nativedefine"
          }
        ],
        "comment": "",
        "name": "fread",
        "parameters": [
          {
            "datatype": {
              "type": "AnyPtr"
            },
            "name": "buffer"
          },
          {
            "datatype": {
              "type": "Size"
            },
            "name": "size"
          },
          {
            "datatype": {
              "type": "Size"
            },
            "name": "count"
          },
          {
            "datatype": {
              "arguments": [
                {
                  "type": "File"
                }
              ],
              "type": "Ptr"
            },
            "name": "stream"
          }
        ],
        "return_type": {
          "type": "Size"
        }
      },
      {
        "annotations": [
          {
            "argument": "(yk__io_fseek(nn__stream, nn__offset, SEEK_SET))",
            "name": "@nativemacro"
          }
        ],
        "comment": " Seek from begining",
        "name": "fseek_begin",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "type": "File"
                }
              ],
              "type": "Ptr"
            },
            "name": "stream"
          },
          {
            "datatype": {
              "type": "i64"
            },
            "name": "offset"
          }
        ],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [
          {
            "argument": "(yk__io_fseek(nn__stream, nn__offset, SEEK_END))",
            "name": "@nativemacro"
          }
        ],
        "comment": " Seek from end",
        "name": "fseek_end",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "type": "File"
                }
              ],
              "type": "Ptr"
            },
            "name": "stream"
          },
          {
            "datatype": {
              "type": "i64"
            },
            "name": "offset"
          }
        ],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [
          {
            "argument": "(yk__io_fseek(nn__stream, nn__offset, SEEK_CUR))",
            "name": "@nativemacro"
          }
        ],
        "comment": " Seem from current location",
        "name": "fseek_relative",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "type": "File"
                }
              ],
              "type": "Ptr"
            },
            "name": "stream"
          },
          {
            "datatype": {
              "type": "i64"
            },
            "name": "offset"
          }
        ],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [
          {
            "argument": "yk__io_ftell",
            "name": "@nativedefine"
          }
        ],
        "comment": "",
        "name": "ftell",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "type": "File"
                }
              ],
              "type": "Ptr"
            },
            "name": "stream"
          }
        ],
        "return_type": {
          "type": "i64"
        }
      },
      {
        "annotations": [
          {
            "argument": "yk__io_fwrite",
            "name": "@nativedefine"
          }
        ],
        "comment": "",
        "name": "fwrite",
        "parameters": [
          {
            "datatype": {
              "type": "AnyPtr"
            },
            "name": "buffer"
          },
          {
            "datatype": {
              "type": "Size"
            },
            "name": "size"
          },
          {
            "datatype": {
              "type": "Size"
            },
            "name": "count"
          },
          {
            "datatype": {
              "arguments": [
                {
                  "type": "File"
                }
              ],
              "type": "Ptr"
            },
            "name": "stream"
          }
        ],
        "return_type": {
          "type": "Size"
        }
      },
      {
        "annotations": [
          {
            "argument": "yk__io_ferror",
            "name": "@nativedefine"
          }
        ],
        "comment": " Has error?",
        "name": "has_error",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "type": "File"
                }
              ],
              "type": "Ptr"
            },
            "name": "stream"
          }
        ],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [
          {
            "argument": "yk__io_feof",
            "name": "@nativedefine"
          }
        ],
        "comment": " Is end of file?",
        "name": "is_eof",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "type": "File"
                }
              ],
              "type": "Ptr"
            },
            "name": "stream"
          }
        ],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [
          {
            "argument": "mlock",
            "name": "@nativedefine"
          }
        ],
        "comment": "",
        "name": "mlock",
        "parameters": [
          {
            "datatype": {
              "type": "AnyPtr"
            },
            "name": "address"
          },
          {
            "datatype": {
              "type": "Size"
            },
            "name": "length"
          }
        ],
        "return_type": {
          "type": "int"
        }
      },
      {
        "annotations": [
          {
            "argument": "mmap",
            "name": "@nativedefine"
          }
        ],
        "comment": "",
        "name": "mmap",
        "parameters": [
          {
            "datatype": {
              "type": "AnyPtr"
            },
            "name": "address"
          },
          {
            "datatype": {
              "type": "Size"
            },
            "name": "length"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "protection"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "flags"
          },
          {
            "datatype": {
              "type": "CInt"
            },
            "name": "file_descriptor"
          },
          {
            "datatype": {
              "type": "i64"
            },
            "name": "offset"
          }
        ],
        "return_type": {
          "type": "AnyPtr"
        }
      },
      {
        "annotations": [
          {
            "argument": "mprotect",
            "name": "@nativedefine"
          }
        ],
        "comment": "",
        "name": "mprotect",
        "parameters": [
          {
            "datatype": {
              "type": "AnyPtr"
            },
            "name": "address"
          },
          {
            "datatype": {
              "type": "Size"
            },
            "name": "length"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "protection"
          }
        ],
        "return_type": {
          "type": "int"
        }
      },
      {
        "annotations": [
          {
            "argument": "msync",
            "name": "@nativedefine"
          }
        ],
        "comment": "",
        "name": "msync",
        "parameters": [
          {
            "datatype": {
              "type": "AnyPtr"
            },
            "name": "address"
          },
          {
            "datatype": {
              "type": "Size"
            },
            "name": "length"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "flags"
          }
        ],
        "return_type": {
          "type": "int"
        }
      },
      {
        "annotations": [
          {
            "argument": "munlock",
            "name": "@nativedefine"
          }
        ],
        "comment": "",
        "name": "munlock",
        "parameters": [
          {
            "datatype": {
              "type": "AnyPtr"
            },
            "name": "address"
          },
          {
            "datatype": {
              "type": "Size"
            },
            "name": "length"
          }
        ],
        "return_type": {
          "type": "int"
        }
      },
      {
        "annotations": [
          {
            "argument": "munmap",
            "name": "@nativedefine"
          }
        ],
        "comment": "",
        "name": "munmap",
        "parameters": [
          {
            "datatype": {
              "type": "AnyPtr"
            },
            "name": "address"
          },
          {
            "datatype": {
              "type": "Size"
            },
            "name": "length"
          }
        ],
        "return_type": {
          "type": "int"
        }
      },
      {
        "annotations": [
          {
            "argument": "yk__io_open",
            "name": "@nativedefine"
          }
        ],
        "comment": "",
        "name": "open",
        "parameters": [
          {
            "datatype": {
              "type": "str"
            },
            "name": "path"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "mode"
          }
        ],
        "return_type": {
          "type": "CInt"
        }
      },
      {
        "annotations": [
          {
            "argument": "yk__io_readfile",
            "name": "@native"
          }
        ],
        "comment": " Read a file to as string, on error returns empty",
        "name": "readfile",
        "parameters": [
          {
            "datatype": {
              "type": "str"
            },
            "name": "fname"
          }
        ],
        "return_type": {
          "type": "str"
        }
      },
      {
        "annotations": [
          {
            "argument": "yk__io_rewind",
            "name": "@nativedefine"
          }
        ],
        "comment": " Set the position as begining of file",
        "name": "rewind",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "type": "File"
                }
              ],
              "type": "Ptr"
            },
            "name": "stream"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "stderr",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "stderr",
        "parameters": [],
        "return_type": {
          "arguments": [
            {
              "type": "File"
            }
          ],
          "type": "Ptr"
        }
      },
      {
        "annotations": [
          {
            "argument": "stdin",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "stdin",
        "parameters": [],
        "return_type": {
          "arguments": [
            {
              "type": "File"
            }
          ],
          "type": "Ptr"
        }
      },
      {
        "annotations": [
          {
            "argument": "stdout",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "stdout",
        "parameters": [],
        "return_type": {
          "arguments": [
            {
              "type": "File"
            }
          ],
          "type": "Ptr"
        }
      },
      {
        "annotations": [
          {
            "argument": "(nn__stream != NULL)",
            "name": "@nativemacro"
          }
        ],
        "comment": " Did we succesfully opened a file?",
        "name": "valid",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "type": "File"
                }
              ],
              "type": "Ptr"
            },
            "name": "stream"
          }
        ],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [
          {
            "argument": "yk__io_writefile",
            "name": "@native"
          }
        ],
        "comment": " Write a file",
        "name": "writefile",
        "parameters": [
          {
            "datatype": {
              "type": "str"
            },
            "name": "fname"
          },
          {
            "datatype": {
              "type": "str"
            },
            "name": "data"
          }
        ],
        "return_type": {
          "type": "bool"
        }
      }
    ],
    "global_consts": [
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "MAP_ANON"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "MAP_ANONYMOUS"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "MAP_FAILED"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "MAP_FILE"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "MAP_FIXED"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "MAP_PRIVATE"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "MAP_SHARED"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "MAP_TYPE"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "MS_ASYNC"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "MS_INVALIDATE"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "MS_SYNC"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "O_APPEND"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "O_ASYNC"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "O_CLOEXEC"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "O_CREAT"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "O_EXCL"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "O_NONBLOCK"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "O_RDONLY"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "O_RDWR"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "O_TMPFILE"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "O_WRONLY"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "PROT_EXEC"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "PROT_NONE"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "PROT_READ"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "PROT_WRITE"
      }
    ],
    "imports": [
      {
        "alias": "c",
        "path": [
          "libs",
          "c"
        ]
      }
    ],
    "macros": []
  },
  "libs.numbers": {
    "classes": [],
    "functions": [
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " c.CDouble to f64 (double precision)",
        "name": "cdbl2d",
        "parameters": [
          {
            "datatype": {
              "type": "CDouble"
            },
            "name": "a"
          }
        ],
        "return_type": {
          "type": "f64"
        }
      },
      {
        "annotations": [
          {
            "argument": "atoi",
            "name": "@nativedefine"
          }
        ],
        "comment": " Convert a c-string to an integer",
        "name": "cstr2i",
        "parameters": [
          {
            "datatype": {
              "type": "CStr"
            },
            "name": "a"
          }
        ],
        "return_type": {
          "type": "int"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " f64 (double precision) to c.CDouble",
        "name": "d2cdbl",
        "parameters": [
          {
            "datatype": {
              "type": "f64"
            },
            "name": "a"
          }
        ],
        "return_type": {
          "type": "CDouble"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " f64 (double precision) to float/f32 (single precision)\n Warning: precision might be lost/truncated",
        "name": "d2f",
        "parameters": [
          {
            "datatype": {
              "type": "f64"
            },
            "name": "a"
          }
        ],
        "return_type": {
          "type": "float"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " f64 (double precision) to int/i32\n Warning: value is truncated",
        "name": "d2i",
        "parameters": [
          {
            "datatype": {
              "type": "f64"
            },
            "name": "a"
          }
        ],
        "return_type": {
          "type": "int"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "d2uu",
        "parameters": [
          {
            "datatype": {
              "type": "f64"
            },
            "name": "a"
          }
        ],
        "return_type": {
          "type": "u64"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " float/f32 (single precision) to f64 (double precision)",
        "name": "f2d",
        "parameters": [
          {
            "datatype": {
              "type": "float"
            },
            "name": "a"
          }
        ],
        "return_type": {
          "type": "f64"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " f32 (single precision) to int/i32\n Warning: value is truncated",
        "name": "f2i",
        "parameters": [
          {
            "datatype": {
              "type": "float"
            },
            "name": "a"
          }
        ],
        "return_type": {
          "type": "int"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "f2uu",
        "parameters": [
          {
            "datatype": {
              "type": "float"
            },
            "name": "a"
          }
        ],
        "return_type": {
          "type": "u64"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "from_be16",
        "parameters": [
          {
            "datatype": {
              "type": "u16"
            },
            "name": "a"
          }
        ],
        "return_type": {
          "type": "u16"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "from_be32",
        "parameters": [
          {
            "datatype": {
              "type": "u32"
            },
            "name": "a"
          }
        ],
        "return_type": {
          "type": "u32"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "from_be64",
        "parameters": [
          {
            "datatype": {
              "type": "u64"
            },
            "name": "a"
          }
        ],
        "return_type": {
          "type": "u64"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "from_le16",
        "parameters": [
          {
            "datatype": {
              "type": "u16"
            },
            "name": "a"
          }
        ],
        "return_type": {
          "type": "u16"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "from_le32",
        "parameters": [
          {
            "datatype": {
              "type": "u32"
            },
            "name": "a"
          }
        ],
        "return_type": {
          "type": "u32"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "from_le64",
        "parameters": [
          {
            "datatype": {
              "type": "u64"
            },
            "name": "a"
          }
        ],
        "return_type": {
          "type": "u64"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " int/i32 to f64 (double precision)",
        "name": "i2d",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "a"
          }
        ],
        "return_type": {
          "type": "f64"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " int/i32 to f32 (single precision)",
        "name": "i2f",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "a"
          }
        ],
        "return_type": {
          "type": "float"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "i2s",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "a"
          }
        ],
        "return_type": {
          "type": "str"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "i2u",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "a"
          }
        ],
        "return_type": {
          "type": "u32"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "i2uu",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "a"
          }
        ],
        "return_type": {
          "type": "u64"
        }
      },
      {
        "annotations": [],
        "comment": " Convert a str to integer",
        "name": "s2i",
        "parameters": [
          {
            "datatype": {
              "type": "str"
            },
            "name": "s"
          }
        ],
        "return_type": {
          "type": "int"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "swap_16",
        "parameters": [
          {
            "datatype": {
              "type": "u16"
            },
            "name": "a"
          }
        ],
        "return_type": {
          "type": "u16"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "swap_32",
        "parameters": [
          {
            "datatype": {
              "type": "u32"
            },
            "name": "a"
          }
        ],
        "return_type": {
          "type": "u32"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "swap_64",
        "parameters": [
          {
            "datatype": {
              "type": "u64"
            },
            "name": "a"
          }
        ],
        "return_type": {
          "type": "u64"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "to_be16",
        "parameters": [
          {
            "datatype": {
              "type": "u16"
            },
            "name": "a"
          }
        ],
        "return_type": {
          "type": "u16"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "to_be32",
        "parameters": [
          {
            "datatype": {
              "type": "u32"
            },
            "name": "a"
          }
        ],
        "return_type": {
          "type": "u32"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "to_be64",
        "parameters": [
          {
            "datatype": {
              "type": "u64"
            },
            "name": "a"
          }
        ],
        "return_type": {
          "type": "u64"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "to_le16",
        "parameters": [
          {
            "datatype": {
              "type": "u16"
            },
            "name": "a"
          }
        ],
        "return_type": {
          "type": "u16"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "to_le32",
        "parameters": [
          {
            "datatype": {
              "type": "u32"
            },
            "name": "a"
          }
        ],
        "return_type": {
          "type": "u32"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "to_le64",
        "parameters": [
          {
            "datatype": {
              "type": "u64"
            },
            "name": "a"
          }
        ],
        "return_type": {
          "type": "u64"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "u2i",
        "parameters": [
          {
            "datatype": {
              "type": "u32"
            },
            "name": "a"
          }
        ],
        "return_type": {
          "type": "int"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "uu2d",
        "parameters": [
          {
            "datatype": {
              "type": "u64"
            },
            "name": "a"
          }
        ],
        "return_type": {
          "type": "f64"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "uu2f",
        "parameters": [
          {
            "datatype": {
              "type": "u64"
            },
            "name": "a"
          }
        ],
        "return_type": {
          "type": "float"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "uu2i",
        "parameters": [
          {
            "datatype": {
              "type": "u64"
            },
            "name": "a"
          }
        ],
        "return_type": {
          "type": "int"
        }
      }
    ],
    "global_consts": [],
    "imports": [
      {
        "alias": "c",
        "path": [
          "libs",
          "c"
        ]
      }
    ],
    "macros": []
  },
  "libs.os": {
    "classes": [
      {
        "annotations": [
          {
            "argument": "struct yk__arguments*",
            "name": "@nativedefine"
          }
        ],
        "comment": " UTF-8 converted arguments and argument count\n Do not delete, Do not modify",
        "members": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "argc"
          },
          {
            "datatype": {
              "arguments": [
                {
                  "type": "str"
                }
              ],
              "type": "Array"
            },
            "name": "argv"
          }
        ],
        "name": "Arguments"
      },
      {
        "annotations": [
          {
            "argument": "struct yk__process_result*",
            "name": "@nativedefine"
          }
        ],
        "comment": " Results of run() execution\n   Must be deleted",
        "members": [
          {
            "datatype": {
              "type": "bool"
            },
            "name": "ok"
          },
          {
            "datatype": {
              "type": "str"
            },
            "name": "output"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "return_code"
          }
        ],
        "name": "ProcessResult"
      }
    ],
    "functions": [
      {
        "annotations": [
          {
            "argument": "yk__change_current_dir_path",
            "name": "@nativedefine"
          }
        ],
        "comment": " Change current working directory",
        "name": "chdir",
        "parameters": [
          {
            "datatype": {
              "type": "str"
            },
            "name": "path"
          }
        ],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Get current working directory, or empty string (if failed) on return",
        "name": "cwd",
        "parameters": [],
        "return_type": {
          "type": "str"
        }
      },
      {
        "annotations": [
          {
            "argument": "yk__free_process_result",
            "name": "@native"
          }
        ],
        "comment": " Delete process result object",
        "name": "del_process_result",
        "parameters": [
          {
            "datatype": {
              "type": "ProcessResult"
            },
            "name": "pr"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Get exe file path, or empty string (if failed) on return",
        "name": "exe",
        "parameters": [],
        "return_type": {
          "type": "str"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Get exe directory path, or empty string (if failed) on return",
        "name": "exe_path",
        "parameters": [],
        "return_type": {
          "type": "str"
        }
      },
      {
        "annotations": [
          {
            "argument": "yk__get_args",
            "name": "@nativedefine"
          }
        ],
        "comment": " Get arguments",
        "name": "get_args",
        "parameters": [],
        "return_type": {
          "type": "Arguments"
        }
      },
      {
        "annotations": [
          {
            "argument": "yk__getenv",
            "name": "@native"
          }
        ],
        "comment": " Get environment variable, empty if not found or error",
        "name": "getenv",
        "parameters": [
          {
            "datatype": {
              "type": "str"
            },
            "name": "name"
          }
        ],
        "return_type": {
          "type": "str"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Are we running MacOS?",
        "name": "is_macos",
        "parameters": [],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Are we running Windows?",
        "name": "is_windows",
        "parameters": [],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [
          {
            "argument": "yk__run",
            "name": "@native"
          }
        ],
        "comment": " Run give [process, arg1, arg2] command line",
        "name": "run",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "type": "str"
                }
              ],
              "type": "Array"
            },
            "name": "args"
          }
        ],
        "return_type": {
          "type": "ProcessResult"
        }
      },
      {
        "annotations": [],
        "comment": " Try to find full path to binary in $PATH, no need .exe for windows\n If we cannot find in $PATH, This will fallback to current path and exe path as well\n\n Example find zig compiler path:\n\n os.which(\"zig\")",
        "name": "which",
        "parameters": [
          {
            "datatype": {
              "type": "str"
            },
            "name": "binary"
          }
        ],
        "return_type": {
          "type": "str"
        }
      }
    ],
    "global_consts": [],
    "imports": [
      {
        "alias": "strings",
        "path": [
          "libs",
          "strings"
        ]
      },
      {
        "alias": "sarr",
        "path": [
          "libs",
          "strings",
          "array"
        ]
      },
      {
        "alias": "ospath",
        "path": [
          "libs",
          "os",
          "path"
        ]
      }
    ],
    "macros": []
  },
  "libs.os.cpu": {
    "classes": [
      {
        "annotations": [
          {
            "argument": "struct yk__cpu_info",
            "name": "@nativedefine"
          },
          {
            "name": "@onstack"
          }
        ],
        "comment": " Extracted CPU information",
        "members": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "n_processors"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "n_processors_max"
          },
          {
            "datatype": {
              "type": "bool"
            },
            "name": "is_guess"
          }
        ],
        "name": "Cpu"
      }
    ],
    "functions": [
      {
        "annotations": [
          {
            "argument": "yk__get_cpu_count",
            "name": "@native"
          }
        ],
        "comment": " Extract CPU information",
        "name": "info",
        "parameters": [],
        "return_type": {
          "type": "Cpu"
        }
      }
    ],
    "global_consts": [],
    "imports": [],
    "macros": []
  },
  "libs.os.path": {
    "classes": [],
    "functions": [
      {
        "annotations": [],
        "comment": " Get just the filename of given path",
        "name": "basename",
        "parameters": [
          {
            "datatype": {
              "type": "str"
            },
            "name": "p"
          }
        ],
        "return_type": {
          "type": "str"
        }
      },
      {
        "annotations": [],
        "comment": " Get dir name of given path",
        "name": "dirname",
        "parameters": [
          {
            "datatype": {
              "type": "str"
            },
            "name": "p"
          }
        ],
        "return_type": {
          "type": "str"
        }
      },
      {
        "annotations": [],
        "comment": " Does the given string end with slash?",
        "name": "end_with_dot",
        "parameters": [
          {
            "datatype": {
              "type": "sr"
            },
            "name": "a"
          }
        ],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [],
        "comment": " Does the given string end with slash?",
        "name": "end_with_slash",
        "parameters": [
          {
            "datatype": {
              "type": "sr"
            },
            "name": "a"
          }
        ],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [
          {
            "argument": "yk__executable",
            "name": "@nativedefine"
          }
        ],
        "comment": " Is an executable?",
        "name": "executable",
        "parameters": [
          {
            "datatype": {
              "type": "str"
            },
            "name": "p"
          }
        ],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [
          {
            "argument": "yk__exists",
            "name": "@nativedefine"
          }
        ],
        "comment": " Does the file exist?",
        "name": "exists",
        "parameters": [
          {
            "datatype": {
              "type": "str"
            },
            "name": "p"
          }
        ],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Are we using forward slash or not?\n Same as using libs.os.is_windows()",
        "name": "forward_slash",
        "parameters": [],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [],
        "comment": " Do a path join",
        "name": "join",
        "parameters": [
          {
            "datatype": {
              "type": "sr"
            },
            "name": "a"
          },
          {
            "datatype": {
              "type": "sr"
            },
            "name": "b"
          }
        ],
        "return_type": {
          "type": "str"
        }
      },
      {
        "annotations": [
          {
            "argument": "yk__mkdir",
            "name": "@nativedefine"
          }
        ],
        "comment": " Create given folder. (Linux uses 0755 permissions)\n Returns True if successful",
        "name": "mkdir",
        "parameters": [
          {
            "datatype": {
              "type": "str"
            },
            "name": "p"
          }
        ],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [
          {
            "argument": "yk__readable",
            "name": "@nativedefine"
          }
        ],
        "comment": " Is a readable?",
        "name": "readable",
        "parameters": [
          {
            "datatype": {
              "type": "str"
            },
            "name": "p"
          }
        ],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [],
        "comment": " Remove extension",
        "name": "remove_extension",
        "parameters": [
          {
            "datatype": {
              "type": "str"
            },
            "name": "p"
          }
        ],
        "return_type": {
          "type": "str"
        }
      },
      {
        "annotations": [
          {
            "argument": "yk__writable",
            "name": "@nativedefine"
          }
        ],
        "comment": " Is a writable?",
        "name": "writable",
        "parameters": [
          {
            "datatype": {
              "type": "str"
            },
            "name": "p"
          }
        ],
        "return_type": {
          "type": "bool"
        }
      }
    ],
    "global_consts": [],
    "imports": [
      {
        "alias": "strings",
        "path": [
          "libs",
          "strings"
        ]
      },
      {
        "alias": "c",
        "path": [
          "libs",
          "c"
        ]
      }
    ],
    "macros": []
  },
  "libs.perlin": {
    "classes": [],
    "functions": [
      {
        "annotations": [
          {
            "argument": "yk__perlin1d",
            "name": "@nativedefine"
          }
        ],
        "comment": " Get perlin noise in 1d (Calls 3d noise with hardcoded y, z values)",
        "name": "noise1d",
        "parameters": [
          {
            "datatype": {
              "type": "f64"
            },
            "name": "x"
          }
        ],
        "return_type": {
          "type": "f64"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "noise1df",
        "parameters": [
          {
            "datatype": {
              "type": "float"
            },
            "name": "x"
          }
        ],
        "return_type": {
          "type": "float"
        }
      },
      {
        "annotations": [
          {
            "argument": "yk__perlin2d",
            "name": "@nativedefine"
          }
        ],
        "comment": " Get perlin noise in 2d",
        "name": "noise2d",
        "parameters": [
          {
            "datatype": {
              "type": "f64"
            },
            "name": "x"
          },
          {
            "datatype": {
              "type": "f64"
            },
            "name": "y"
          }
        ],
        "return_type": {
          "type": "f64"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Get perlin noise in 2d",
        "name": "noise2df",
        "parameters": [
          {
            "datatype": {
              "type": "float"
            },
            "name": "x"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "y"
          }
        ],
        "return_type": {
          "type": "float"
        }
      },
      {
        "annotations": [
          {
            "argument": "yk__perlin3d",
            "name": "@nativedefine"
          }
        ],
        "comment": " Get perlin noise in 3d",
        "name": "noise3d",
        "parameters": [
          {
            "datatype": {
              "type": "f64"
            },
            "name": "x"
          },
          {
            "datatype": {
              "type": "f64"
            },
            "name": "y"
          },
          {
            "datatype": {
              "type": "f64"
            },
            "name": "z"
          }
        ],
        "return_type": {
          "type": "f64"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Get perlin noise in 3d",
        "name": "noise3df",
        "parameters": [
          {
            "datatype": {
              "type": "float"
            },
            "name": "x"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "y"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "z"
          }
        ],
        "return_type": {
          "type": "float"
        }
      }
    ],
    "global_consts": [],
    "imports": [],
    "macros": []
  },
  "libs.random": {
    "classes": [],
    "functions": [
      {
        "annotations": [
          {
            "argument": "yk__init_random",
            "name": "@nativedefine"
          }
        ],
        "comment": " Set a seed to random number generator using time (crypto unsafe)",
        "name": "init_random",
        "parameters": [],
        "return_type": {
          "type": "u64"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Get a random value between 0 - 1 (crypto unsafe)",
        "name": "random",
        "parameters": [],
        "return_type": {
          "type": "f64"
        }
      },
      {
        "annotations": [],
        "comment": " Get a random value between a and b (crypto unsafe)",
        "name": "random_between",
        "parameters": [
          {
            "datatype": {
              "type": "f64"
            },
            "name": "a"
          },
          {
            "datatype": {
              "type": "f64"
            },
            "name": "b"
          }
        ],
        "return_type": {
          "type": "f64"
        }
      },
      {
        "annotations": [],
        "comment": " Get a random value between a and b (crypto unsafe)",
        "name": "random_betweenf",
        "parameters": [
          {
            "datatype": {
              "type": "float"
            },
            "name": "a"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "b"
          }
        ],
        "return_type": {
          "type": "float"
        }
      },
      {
        "annotations": [
          {
            "argument": "yk__random_u64",
            "name": "@nativedefine"
          }
        ],
        "comment": " Random unsigned 64bit\n Uses rand() (crypto unsafe)",
        "name": "random_u64",
        "parameters": [],
        "return_type": {
          "type": "u64"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Get a random value between 0 - 1 (crypto unsafe)",
        "name": "randomf",
        "parameters": [],
        "return_type": {
          "type": "float"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Set a seed to random number generator (crypto unsafe)",
        "name": "set_seed",
        "parameters": [
          {
            "datatype": {
              "type": "u64"
            },
            "name": "seed"
          }
        ],
        "return_type": {
          "type": "None"
        }
      }
    ],
    "global_consts": [],
    "imports": [],
    "macros": []
  },
  "libs.strings": {
    "classes": [],
    "functions": [
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Does the string needle contain in string haystack?",
        "name": "contains",
        "parameters": [
          {
            "datatype": {
              "type": "str"
            },
            "name": "haystack"
          },
          {
            "datatype": {
              "type": "str"
            },
            "name": "needle"
          }
        ],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Cut a string from given position",
        "name": "cut_from",
        "parameters": [
          {
            "datatype": {
              "type": "str"
            },
            "name": "a"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "position"
          }
        ],
        "return_type": {
          "type": "str"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Delete a native c-string created from other other functions (calls free)",
        "name": "del_cstr",
        "parameters": [
          {
            "datatype": {
              "type": "CStr"
            },
            "name": "a"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Delete a normal string that was cast as a c-str with to_cstr\n You only need to use this if CStr was cast from standard str",
        "name": "del_str",
        "parameters": [
          {
            "datatype": {
              "type": "CStr"
            },
            "name": "a"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [],
        "comment": " Does string a ends with string b",
        "name": "endswith",
        "parameters": [
          {
            "datatype": {
              "type": "str"
            },
            "name": "a"
          },
          {
            "datatype": {
              "type": "str"
            },
            "name": "b"
          }
        ],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Find first occurance of given character",
        "name": "find_char",
        "parameters": [
          {
            "datatype": {
              "type": "str"
            },
            "name": "value"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "ch"
          }
        ],
        "return_type": {
          "type": "int"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Create a string from CStr",
        "name": "from_cstr",
        "parameters": [
          {
            "datatype": {
              "type": "CStr"
            },
            "name": "a"
          }
        ],
        "return_type": {
          "type": "str"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Create a string from CStr with a given length",
        "name": "from_cstrlen",
        "parameters": [
          {
            "datatype": {
              "type": "CStr"
            },
            "name": "a"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "length"
          }
        ],
        "return_type": {
          "type": "str"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Create a new string from CStr from given after location for given length",
        "name": "from_cstrlen_after",
        "parameters": [
          {
            "datatype": {
              "type": "CStr"
            },
            "name": "a"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "length"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "after"
          }
        ],
        "return_type": {
          "type": "str"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Get a single byte from given string and position\n Warning: Does not do a length check\n Warning: This copies the string to just get a single byte",
        "name": "get",
        "parameters": [
          {
            "datatype": {
              "type": "str"
            },
            "name": "s"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "pos"
          }
        ],
        "return_type": {
          "type": "int"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Get a single byte from given CStr\n Warning: Does not do a length check",
        "name": "get_cstr",
        "parameters": [
          {
            "datatype": {
              "type": "CStr"
            },
            "name": "s"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "pos"
          }
        ],
        "return_type": {
          "type": "int"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Is this string empty?",
        "name": "isempty",
        "parameters": [
          {
            "datatype": {
              "type": "str"
            },
            "name": "s"
          }
        ],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Is an empty CStr?",
        "name": "isempty_cstr",
        "parameters": [
          {
            "datatype": {
              "type": "CStr"
            },
            "name": "s"
          }
        ],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [],
        "comment": " Pad string to left to ensure string length is large or equal to count",
        "name": "lpad",
        "parameters": [
          {
            "datatype": {
              "type": "str"
            },
            "name": "a"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "count"
          }
        ],
        "return_type": {
          "type": "str"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Cut a string from given position for number characters\n Returns empty() if input is invalid",
        "name": "mid",
        "parameters": [
          {
            "datatype": {
              "type": "str"
            },
            "name": "a"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "position"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "number"
          }
        ],
        "return_type": {
          "type": "str"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": "",
        "name": "null_cstr",
        "parameters": [],
        "return_type": {
          "type": "CStr"
        }
      },
      {
        "annotations": [],
        "comment": " Get first byte of string",
        "name": "ord",
        "parameters": [
          {
            "datatype": {
              "type": "str"
            },
            "name": "s"
          }
        ],
        "return_type": {
          "type": "int"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Get first byte of CStr",
        "name": "ord_cstr",
        "parameters": [
          {
            "datatype": {
              "type": "CStr"
            },
            "name": "s"
          }
        ],
        "return_type": {
          "type": "int"
        }
      },
      {
        "annotations": [],
        "comment": " Pad string to right to ensure string length is large or equal to count",
        "name": "rpad",
        "parameters": [
          {
            "datatype": {
              "type": "str"
            },
            "name": "a"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "count"
          }
        ],
        "return_type": {
          "type": "str"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Set a byte to given CStr position\n Warning: Does not do a length check",
        "name": "set_cstr",
        "parameters": [
          {
            "datatype": {
              "type": "CStr"
            },
            "name": "s"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "pos"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "v"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Get a spaces only string of given count",
        "name": "spaces",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "count"
          }
        ],
        "return_type": {
          "type": "str"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Split a string to a string array",
        "name": "split",
        "parameters": [
          {
            "datatype": {
              "type": "str"
            },
            "name": "value"
          },
          {
            "datatype": {
              "type": "str"
            },
            "name": "sep"
          }
        ],
        "return_type": {
          "arguments": [
            {
              "type": "str"
            }
          ],
          "type": "Array"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Does the given string a starts with b",
        "name": "startswith",
        "parameters": [
          {
            "datatype": {
              "type": "str"
            },
            "name": "a"
          },
          {
            "datatype": {
              "type": "str"
            },
            "name": "b"
          }
        ],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Yaksha copies managed strings that you pass in so must free this",
        "name": "to_cstr",
        "parameters": [
          {
            "datatype": {
              "type": "str"
            },
            "name": "a"
          }
        ],
        "return_type": {
          "type": "CStr"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Is a valid CStr",
        "name": "valid_cstr",
        "parameters": [
          {
            "datatype": {
              "type": "CStr"
            },
            "name": "s"
          }
        ],
        "return_type": {
          "type": "bool"
        }
      }
    ],
    "global_consts": [],
    "imports": [
      {
        "alias": "c",
        "path": [
          "libs",
          "c"
        ]
      }
    ],
    "macros": []
  },
  "libs.strings.array": {
    "classes": [],
    "functions": [
      {
        "annotations": [
          {
            "argument": "yk__delsdsarray",
            "name": "@nativedefine"
          }
        ],
        "comment": " Delete a string array by deleting individual string objects and array itself",
        "name": "del_str_array",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "type": "str"
                }
              ],
              "type": "Array"
            },
            "name": "sa"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "yk__sdsarraydup",
            "name": "@nativedefine"
          }
        ],
        "comment": " Duplicate given array to a new array\n Both new array and string copies are created",
        "name": "dup",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "type": "str"
                }
              ],
              "type": "Array"
            },
            "name": "sa"
          }
        ],
        "return_type": {
          "arguments": [
            {
              "type": "str"
            }
          ],
          "type": "Array"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Copy all strings from b to a and return a\n Warning! You must assign this back to a (as 'a' might be reallocated to a new address)",
        "name": "extend",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "type": "str"
                }
              ],
              "type": "Array"
            },
            "name": "a"
          },
          {
            "datatype": {
              "arguments": [
                {
                  "type": "str"
                }
              ],
              "type": "Array"
            },
            "name": "b"
          }
        ],
        "return_type": {
          "arguments": [
            {
              "type": "str"
            }
          ],
          "type": "Array"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Join given string array with given separator and return a single string",
        "name": "join",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "type": "str"
                }
              ],
              "type": "Array"
            },
            "name": "values"
          },
          {
            "datatype": {
              "type": "str"
            },
            "name": "sep"
          }
        ],
        "return_type": {
          "type": "str"
        }
      },
      {
        "annotations": [
          {
            "argument": "yk__newsdsarray",
            "name": "@nativedefine"
          },
          {
            "argument": "",
            "name": "@varargs"
          }
        ],
        "comment": " Create new string array\n Example:\n\n import libs.strings.array as sarr\n my_array: Array[str] = sarr.new(4, \"A\", \"B\", \"C\", \"D\")",
        "name": "new",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "count"
          },
          {
            "datatype": {
              "type": "str"
            },
            "name": "s"
          }
        ],
        "return_type": {
          "arguments": [
            {
              "type": "str"
            }
          ],
          "type": "Array"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Mutate all strings in this array by prefixing with prefix_str",
        "name": "prefix",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "type": "str"
                }
              ],
              "type": "Array"
            },
            "name": "sa"
          },
          {
            "datatype": {
              "type": "str"
            },
            "name": "prefix_str"
          }
        ],
        "return_type": {
          "arguments": [
            {
              "type": "str"
            }
          ],
          "type": "Array"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Mutate all strings in this array by suffixing with suffix_str",
        "name": "suffix",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "type": "str"
                }
              ],
              "type": "Array"
            },
            "name": "sa"
          },
          {
            "datatype": {
              "type": "str"
            },
            "name": "suffix_str"
          }
        ],
        "return_type": {
          "arguments": [
            {
              "type": "str"
            }
          ],
          "type": "Array"
        }
      }
    ],
    "global_consts": [],
    "imports": [],
    "macros": []
  },
  "libs.strings.buffer": {
    "classes": [
      {
        "annotations": [
          {
            "argument": "yk__sds*",
            "name": "@nativedefine"
          }
        ],
        "comment": " String buffer object",
        "members": [],
        "name": "StringBuffer"
      }
    ],
    "functions": [
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Append a string to string buffer",
        "name": "append",
        "parameters": [
          {
            "datatype": {
              "type": "StringBuffer"
            },
            "name": "buf"
          },
          {
            "datatype": {
              "type": "sr"
            },
            "name": "v"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Delete string buffer object",
        "name": "del_buf",
        "parameters": [
          {
            "datatype": {
              "type": "StringBuffer"
            },
            "name": "buf"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Join given values in array with provided seperator and append this to string",
        "name": "join",
        "parameters": [
          {
            "datatype": {
              "type": "StringBuffer"
            },
            "name": "buf"
          },
          {
            "datatype": {
              "arguments": [
                {
                  "type": "str"
                }
              ],
              "type": "Array"
            },
            "name": "values"
          },
          {
            "datatype": {
              "type": "sr"
            },
            "name": "sep"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [],
        "comment": " Join given values in array with provided seperator and append this to string buffer",
        "name": "join_sr",
        "parameters": [
          {
            "datatype": {
              "type": "StringBuffer"
            },
            "name": "buf"
          },
          {
            "datatype": {
              "arguments": [
                {
                  "type": "sr"
                }
              ],
              "type": "Array"
            },
            "name": "values"
          },
          {
            "datatype": {
              "type": "sr"
            },
            "name": "sep"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Create a new empty string buffer",
        "name": "new",
        "parameters": [],
        "return_type": {
          "type": "StringBuffer"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Create a string buffer with capacity s",
        "name": "new_size",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "s"
          }
        ],
        "return_type": {
          "type": "StringBuffer"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Prepend a string to string buffer",
        "name": "prepend",
        "parameters": [
          {
            "datatype": {
              "type": "StringBuffer"
            },
            "name": "buf"
          },
          {
            "datatype": {
              "type": "sr"
            },
            "name": "v"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Get a string reference out of string buffer",
        "name": "to_sr",
        "parameters": [
          {
            "datatype": {
              "type": "StringBuffer"
            },
            "name": "buf"
          }
        ],
        "return_type": {
          "type": "sr"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Get a new string copy out of string buffer",
        "name": "to_str",
        "parameters": [
          {
            "datatype": {
              "type": "StringBuffer"
            },
            "name": "buf"
          }
        ],
        "return_type": {
          "type": "str"
        }
      }
    ],
    "global_consts": [],
    "imports": [],
    "macros": []
  },
  "libs.strings.refs": {
    "classes": [],
    "functions": [
      {
        "annotations": [
          {
            "argument": "yk__bstr_get_reference",
            "name": "@nativedefine"
          }
        ],
        "comment": " Get internal string reference from sr",
        "name": "unwrap",
        "parameters": [
          {
            "datatype": {
              "type": "sr"
            },
            "name": "a"
          }
        ],
        "return_type": {
          "arguments": [
            {
              "type": "CStr"
            }
          ],
          "type": "Const"
        }
      },
      {
        "annotations": [],
        "comment": " Wrap a str/literal/sr (if a sr is passed in reference is not wrapped again) as sr\n This takes advantage of the auto-casting",
        "name": "wrap",
        "parameters": [
          {
            "datatype": {
              "type": "sr"
            },
            "name": "s"
          }
        ],
        "return_type": {
          "type": "sr"
        }
      },
      {
        "annotations": [
          {
            "argument": "yk__bstr_c",
            "name": "@nativedefine"
          }
        ],
        "comment": " Wrap a c.CStr as a sr",
        "name": "wrap_cstr",
        "parameters": [
          {
            "datatype": {
              "type": "CStr"
            },
            "name": "s"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "length"
          }
        ],
        "return_type": {
          "type": "sr"
        }
      },
      {
        "annotations": [],
        "comment": "",
        "name": "wrap_cstr_z",
        "parameters": [
          {
            "datatype": {
              "type": "CStr"
            },
            "name": "s"
          }
        ],
        "return_type": {
          "type": "sr"
        }
      }
    ],
    "global_consts": [],
    "imports": [
      {
        "alias": "c",
        "path": [
          "libs",
          "c"
        ]
      }
    ],
    "macros": []
  },
  "libs.strings.utf8": {
    "classes": [
      {
        "annotations": [
          {
            "argument": "struct utf8proc_iter_state*",
            "name": "@nativedefine"
          }
        ],
        "comment": " Iterator state for UTF-8 iteration\n See the codepoint for current character",
        "members": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "step_size"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "codepoint"
          }
        ],
        "name": "Utf8IterateState"
      }
    ],
    "functions": [
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Delete the iterator object after done",
        "name": "del_iter",
        "parameters": [
          {
            "datatype": {
              "type": "Utf8IterateState"
            },
            "name": "s"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Go to next character\n Returns false if nothing to read or we ran out of length of string",
        "name": "iterate",
        "parameters": [
          {
            "datatype": {
              "type": "Utf8IterateState"
            },
            "name": "s"
          }
        ],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Create a new iterator from given string",
        "name": "new_iter",
        "parameters": [
          {
            "datatype": {
              "type": "sr"
            },
            "name": "s"
          }
        ],
        "return_type": {
          "type": "Utf8IterateState"
        }
      }
    ],
    "global_consts": [],
    "imports": [],
    "macros": []
  },
  "libs.thread": {
    "classes": [
      {
        "annotations": [
          {
            "argument": "thrd_t",
            "name": "@nativedefine"
          },
          {
            "name": "@onstack"
          }
        ],
        "comment": " Thread Object",
        "members": [],
        "name": "Thread"
      }
    ],
    "functions": [
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Create a thread with None data. Otherwise same as create_with_data()",
        "name": "create",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "type": "Thread"
                }
              ],
              "type": "Ptr"
            },
            "name": "thr"
          },
          {
            "datatype": {
              "arguments": [
                {
                  "arguments": [
                    {
                      "type": "AnyPtr"
                    }
                  ],
                  "type": "In"
                },
                {
                  "arguments": [
                    {
                      "type": "int"
                    }
                  ],
                  "type": "Out"
                }
              ],
              "type": "Function"
            },
            "name": "func"
          }
        ],
        "return_type": {
          "type": "int"
        }
      },
      {
        "annotations": [
          {
            "argument": "thrd_create",
            "name": "@native"
          }
        ],
        "comment": " Create a new thread with given reference to Thread and a function that takes AnyPtr and return int",
        "name": "create_with_data",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "type": "Thread"
                }
              ],
              "type": "Ptr"
            },
            "name": "thr"
          },
          {
            "datatype": {
              "arguments": [
                {
                  "arguments": [
                    {
                      "type": "AnyPtr"
                    }
                  ],
                  "type": "In"
                },
                {
                  "arguments": [
                    {
                      "type": "int"
                    }
                  ],
                  "type": "Out"
                }
              ],
              "type": "Function"
            },
            "name": "func"
          },
          {
            "datatype": {
              "type": "AnyPtr"
            },
            "name": "data"
          }
        ],
        "return_type": {
          "type": "int"
        }
      },
      {
        "annotations": [
          {
            "argument": "thrd_current",
            "name": "@native"
          }
        ],
        "comment": " Get current thread object",
        "name": "current",
        "parameters": [],
        "return_type": {
          "type": "Thread"
        }
      },
      {
        "annotations": [
          {
            "argument": "thrd_detach",
            "name": "@native"
          }
        ],
        "comment": "",
        "name": "detach",
        "parameters": [
          {
            "datatype": {
              "type": "Thread"
            },
            "name": "thr"
          }
        ],
        "return_type": {
          "type": "int"
        }
      },
      {
        "annotations": [
          {
            "argument": "thrd_equal",
            "name": "@native"
          }
        ],
        "comment": " Are these two equal?",
        "name": "equal",
        "parameters": [
          {
            "datatype": {
              "type": "Thread"
            },
            "name": "thr1"
          },
          {
            "datatype": {
              "type": "Thread"
            },
            "name": "thr2"
          }
        ],
        "return_type": {
          "type": "int"
        }
      },
      {
        "annotations": [
          {
            "argument": "thrd_exit",
            "name": "@native"
          }
        ],
        "comment": " Exit current thread giving result value",
        "name": "exit",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "res"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": "",
        "name": "join",
        "parameters": [
          {
            "datatype": {
              "type": "Thread"
            },
            "name": "thr"
          }
        ],
        "return_type": {
          "type": "int"
        }
      },
      {
        "annotations": [
          {
            "argument": "thrd_join",
            "name": "@native"
          }
        ],
        "comment": "",
        "name": "join_with_result",
        "parameters": [
          {
            "datatype": {
              "type": "Thread"
            },
            "name": "thr"
          },
          {
            "datatype": {
              "arguments": [
                {
                  "type": "int"
                }
              ],
              "type": "Ptr"
            },
            "name": "res"
          }
        ],
        "return_type": {
          "type": "int"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Sleep for given seconds\n SLEEP_SUCCES is returned if successful",
        "name": "sleep",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "seconds"
          }
        ],
        "return_type": {
          "type": "int"
        }
      },
      {
        "annotations": [
          {
            "argument": "thrd_sleep",
            "name": "@native"
          }
        ],
        "comment": " remainder - this parameter will hold the remaining time until time_point upon return\n SLEEP_SUCCES is returned if successful",
        "name": "sleep_ex",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "type": "TimeSpec"
                }
              ],
              "type": "Ptr"
            },
            "name": "duration"
          },
          {
            "datatype": {
              "arguments": [
                {
                  "type": "TimeSpec"
                }
              ],
              "type": "Ptr"
            },
            "name": "remainder"
          }
        ],
        "return_type": {
          "type": "int"
        }
      },
      {
        "annotations": [
          {
            "argument": "thrd_yield",
            "name": "@native"
          }
        ],
        "comment": "",
        "name": "yield",
        "parameters": [],
        "return_type": {
          "type": "None"
        }
      }
    ],
    "global_consts": [
      {
        "comment": " The requested operation failed because a tesource requested by a test and return function is already in use",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "BUSY"
      },
      {
        "comment": " The requested operation failed",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ERROR"
      },
      {
        "comment": " The requested operation failed because it was unable to allocate memory",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "NOMEM"
      },
      {
        "comment": " Sleep is successful",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "SLEEP_SUCCES"
      },
      {
        "comment": " The requested operation succeeded",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "SUCCESS"
      },
      {
        "comment": " The time specified in the call was reached without acquiring the requested resource",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "TIMEOUT"
      }
    ],
    "imports": [
      {
        "alias": "timespec",
        "path": [
          "libs",
          "timespec"
        ]
      }
    ],
    "macros": []
  },
  "libs.thread.condition": {
    "classes": [
      {
        "annotations": [
          {
            "argument": "cnd_t",
            "name": "@nativedefine"
          },
          {
            "name": "@onstack"
          }
        ],
        "comment": " Condition Object",
        "members": [],
        "name": "Condition"
      }
    ],
    "functions": [
      {
        "annotations": [
          {
            "argument": "cnd_broadcast",
            "name": "@native"
          }
        ],
        "comment": "",
        "name": "broadcast",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "type": "Condition"
                }
              ],
              "type": "Ptr"
            },
            "name": "cnd"
          }
        ],
        "return_type": {
          "type": "int"
        }
      },
      {
        "annotations": [
          {
            "argument": "cnd_destroy",
            "name": "@native"
          }
        ],
        "comment": "",
        "name": "destroy",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "type": "Condition"
                }
              ],
              "type": "Ptr"
            },
            "name": "cnd"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "cnd_init",
            "name": "@native"
          }
        ],
        "comment": "",
        "name": "init",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "type": "Condition"
                }
              ],
              "type": "Ptr"
            },
            "name": "cnd"
          }
        ],
        "return_type": {
          "type": "int"
        }
      },
      {
        "annotations": [
          {
            "argument": "cnd_signal",
            "name": "@native"
          }
        ],
        "comment": "",
        "name": "signal",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "type": "Condition"
                }
              ],
              "type": "Ptr"
            },
            "name": "cnd"
          }
        ],
        "return_type": {
          "type": "int"
        }
      },
      {
        "annotations": [
          {
            "argument": "cnd_timedwait",
            "name": "@native"
          }
        ],
        "comment": "",
        "name": "timed_wait",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "type": "Condition"
                }
              ],
              "type": "Ptr"
            },
            "name": "cnd"
          },
          {
            "datatype": {
              "arguments": [
                {
                  "type": "Mutex"
                }
              ],
              "type": "Ptr"
            },
            "name": "mtx"
          },
          {
            "datatype": {
              "arguments": [
                {
                  "type": "TimeSpec"
                }
              ],
              "type": "Ptr"
            },
            "name": "ts"
          }
        ],
        "return_type": {
          "type": "int"
        }
      },
      {
        "annotations": [
          {
            "argument": "cnd_wait",
            "name": "@native"
          }
        ],
        "comment": "",
        "name": "wait",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "type": "Condition"
                }
              ],
              "type": "Ptr"
            },
            "name": "cnd"
          },
          {
            "datatype": {
              "arguments": [
                {
                  "type": "Mutex"
                }
              ],
              "type": "Ptr"
            },
            "name": "mtx"
          }
        ],
        "return_type": {
          "type": "int"
        }
      }
    ],
    "global_consts": [],
    "imports": [
      {
        "alias": "mutex",
        "path": [
          "libs",
          "thread",
          "mutex"
        ]
      },
      {
        "alias": "timespec",
        "path": [
          "libs",
          "timespec"
        ]
      }
    ],
    "macros": []
  },
  "libs.thread.mutex": {
    "classes": [
      {
        "annotations": [
          {
            "argument": "mtx_t",
            "name": "@nativedefine"
          },
          {
            "name": "@onstack"
          }
        ],
        "comment": " Mutex Object",
        "members": [],
        "name": "Mutex"
      }
    ],
    "functions": [
      {
        "annotations": [
          {
            "argument": "mtx_destroy",
            "name": "@native"
          }
        ],
        "comment": "",
        "name": "destroy",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "type": "Mutex"
                }
              ],
              "type": "Ptr"
            },
            "name": "mtx"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "mtx_init",
            "name": "@native"
          }
        ],
        "comment": "",
        "name": "init",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "type": "Mutex"
                }
              ],
              "type": "Ptr"
            },
            "name": "mtx"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "type"
          }
        ],
        "return_type": {
          "type": "int"
        }
      },
      {
        "annotations": [
          {
            "argument": "mtx_lock",
            "name": "@native"
          }
        ],
        "comment": "",
        "name": "lock",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "type": "Mutex"
                }
              ],
              "type": "Ptr"
            },
            "name": "mtx"
          }
        ],
        "return_type": {
          "type": "int"
        }
      },
      {
        "annotations": [
          {
            "argument": "mtx_trylock",
            "name": "@native"
          }
        ],
        "comment": "",
        "name": "trylock",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "type": "Mutex"
                }
              ],
              "type": "Ptr"
            },
            "name": "mtx"
          }
        ],
        "return_type": {
          "type": "int"
        }
      },
      {
        "annotations": [
          {
            "argument": "mtx_unlock",
            "name": "@native"
          }
        ],
        "comment": "",
        "name": "unlock",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "type": "Mutex"
                }
              ],
              "type": "Ptr"
            },
            "name": "mtx"
          }
        ],
        "return_type": {
          "type": "int"
        }
      }
    ],
    "global_consts": [
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "PLAIN"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "RECURSIVE"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "TIMED"
      }
    ],
    "imports": [],
    "macros": []
  },
  "libs.thread.pool": {
    "classes": [
      {
        "annotations": [],
        "comment": " Thread pool object",
        "members": [
          {
            "datatype": {
              "type": "Mutex"
            },
            "name": "lock"
          },
          {
            "datatype": {
              "type": "Condition"
            },
            "name": "notify"
          },
          {
            "datatype": {
              "arguments": [
                {
                  "type": "Thread"
                }
              ],
              "type": "Array"
            },
            "name": "threads"
          },
          {
            "datatype": {
              "arguments": [
                {
                  "arguments": [
                    {
                      "arguments": [
                        {
                          "arguments": [
                            {
                              "type": "AnyPtr"
                            }
                          ],
                          "type": "In"
                        },
                        {
                          "type": "Out"
                        }
                      ],
                      "type": "Function"
                    },
                    {
                      "type": "AnyPtr"
                    }
                  ],
                  "type": "Tuple"
                }
              ],
              "type": "Array"
            },
            "name": "queue"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "thread_count"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "queue_size"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "head"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "tail"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "count"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "shutdown"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "started"
          }
        ],
        "name": "ThreadPool"
      }
    ],
    "functions": [
      {
        "annotations": [],
        "comment": " Add given task to the thread pool to be executed\n returns SUCCESS if successful",
        "name": "add",
        "parameters": [
          {
            "datatype": {
              "type": "ThreadPool"
            },
            "name": "tpool"
          },
          {
            "datatype": {
              "arguments": [
                {
                  "arguments": [
                    {
                      "type": "AnyPtr"
                    }
                  ],
                  "type": "In"
                },
                {
                  "type": "Out"
                }
              ],
              "type": "Function"
            },
            "name": "func"
          },
          {
            "datatype": {
              "type": "AnyPtr"
            },
            "name": "arg"
          }
        ],
        "return_type": {
          "type": "int"
        }
      },
      {
        "annotations": [],
        "comment": " Create a new thread pool with given thread count and queue size\n On success ThreadPool is returned else, it should be equal to None",
        "name": "create",
        "parameters": [
          {
            "datatype": {
              "type": "u8"
            },
            "name": "thread_count"
          },
          {
            "datatype": {
              "type": "u32"
            },
            "name": "queue_size"
          }
        ],
        "return_type": {
          "type": "ThreadPool"
        }
      },
      {
        "annotations": [],
        "comment": " Attempt to destroy thread pool, if SUCCESS is returned pool is deallocated as well",
        "name": "destroy",
        "parameters": [
          {
            "datatype": {
              "type": "ThreadPool"
            },
            "name": "tpool"
          },
          {
            "datatype": {
              "type": "bool"
            },
            "name": "graceful"
          }
        ],
        "return_type": {
          "type": "int"
        }
      },
      {
        "annotations": [],
        "comment": " Clean up thread pool data",
        "name": "internal_del_pool",
        "parameters": [
          {
            "datatype": {
              "type": "ThreadPool"
            },
            "name": "tpool"
          }
        ],
        "return_type": {
          "type": "int"
        }
      },
      {
        "annotations": [],
        "comment": " Perform work as a thread in the managed thread pool",
        "name": "internal_tpool_work",
        "parameters": [
          {
            "datatype": {
              "type": "AnyPtr"
            },
            "name": "tpool_obj"
          }
        ],
        "return_type": {
          "type": "int"
        }
      }
    ],
    "global_consts": [
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ERROR_INVALID"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ERROR_LOCK_FAILURE"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ERROR_QUEUE_FULL"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ERROR_SHUTDOWN"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ERROR_THREAD_FAILURE"
      },
      {
        "comment": " We are waiting for tasks to be completed",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "GRACEFUL_SHUTDOWN"
      },
      {
        "comment": " Default (shutdown all threads forcefully) and close the pool",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "IMMEDIATE_SHUTDOWN"
      },
      {
        "comment": " Maximum queue size for thread pool",
        "datatype": {
          "arguments": [
            {
              "type": "u32"
            }
          ],
          "type": "Const"
        },
        "name": "MAX_QUEUE_SIZE"
      },
      {
        "comment": " Maximum threads we can create is 64",
        "datatype": {
          "arguments": [
            {
              "type": "u8"
            }
          ],
          "type": "Const"
        },
        "name": "MAX_THREAD_SIZE"
      },
      {
        "comment": " Not going to shutdown",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "NO_SHUTDOWN"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "SUCCESS"
      }
    ],
    "imports": [
      {
        "alias": "thread",
        "path": [
          "libs",
          "thread"
        ]
      },
      {
        "alias": "condition",
        "path": [
          "libs",
          "thread",
          "condition"
        ]
      },
      {
        "alias": "mutex",
        "path": [
          "libs",
          "thread",
          "mutex"
        ]
      }
    ],
    "macros": []
  },
  "libs.thread.tss": {
    "classes": [
      {
        "annotations": [
          {
            "argument": "tss_t",
            "name": "@nativedefine"
          },
          {
            "name": "@onstack"
          }
        ],
        "comment": " Key to access/create thread specific storage\n Declare a variable and use with getref() when calling create()",
        "members": [],
        "name": "Key"
      }
    ],
    "functions": [
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Create with no auto deletion",
        "name": "create",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "type": "Key"
                }
              ],
              "type": "Ptr"
            },
            "name": "key"
          }
        ],
        "return_type": {
          "type": "int"
        }
      },
      {
        "annotations": [
          {
            "argument": "tss_create",
            "name": "@native"
          }
        ],
        "comment": " Create TSS with a custom deleter function",
        "name": "create_with_deleter",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "type": "Key"
                }
              ],
              "type": "Ptr"
            },
            "name": "key"
          },
          {
            "datatype": {
              "arguments": [
                {
                  "arguments": [
                    {
                      "type": "AnyPtr"
                    }
                  ],
                  "type": "In"
                },
                {
                  "type": "Out"
                }
              ],
              "type": "Function"
            },
            "name": "deleter"
          }
        ],
        "return_type": {
          "type": "int"
        }
      },
      {
        "annotations": [
          {
            "argument": "tss_delete",
            "name": "@native"
          }
        ],
        "comment": "",
        "name": "del_data",
        "parameters": [
          {
            "datatype": {
              "type": "Key"
            },
            "name": "key"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "tss_get",
            "name": "@native"
          }
        ],
        "comment": "",
        "name": "get",
        "parameters": [
          {
            "datatype": {
              "type": "Key"
            },
            "name": "key"
          }
        ],
        "return_type": {
          "type": "AnyPtr"
        }
      },
      {
        "annotations": [
          {
            "argument": "tss_set",
            "name": "@native"
          }
        ],
        "comment": "",
        "name": "set",
        "parameters": [
          {
            "datatype": {
              "type": "Key"
            },
            "name": "key"
          },
          {
            "datatype": {
              "type": "AnyPtr"
            },
            "name": "data"
          }
        ],
        "return_type": {
          "type": "int"
        }
      }
    ],
    "global_consts": [],
    "imports": [],
    "macros": []
  },
  "libs.timespec": {
    "classes": [
      {
        "annotations": [
          {
            "argument": "struct timespec",
            "name": "@nativedefine"
          },
          {
            "name": "@onstack"
          }
        ],
        "comment": "",
        "members": [],
        "name": "TimeSpec"
      }
    ],
    "functions": [
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": "",
        "name": "add_nanoseconds",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "type": "TimeSpec"
                }
              ],
              "type": "Ptr"
            },
            "name": "a"
          },
          {
            "datatype": {
              "type": "i64"
            },
            "name": "n"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": "",
        "name": "add_seconds",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "type": "TimeSpec"
                }
              ],
              "type": "Ptr"
            },
            "name": "a"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "n"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": "",
        "name": "compare_ex",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "type": "TimeSpec"
                }
              ],
              "type": "Ptr"
            },
            "name": "a"
          },
          {
            "datatype": {
              "arguments": [
                {
                  "type": "TimeSpec"
                }
              ],
              "type": "Ptr"
            },
            "name": "b"
          }
        ],
        "return_type": {
          "type": "i64"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": "",
        "name": "create",
        "parameters": [],
        "return_type": {
          "type": "TimeSpec"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": "",
        "name": "create_ex",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "seconds"
          }
        ],
        "return_type": {
          "type": "TimeSpec"
        }
      },
      {
        "annotations": [],
        "comment": " is a == b",
        "name": "equal",
        "parameters": [
          {
            "datatype": {
              "type": "TimeSpec"
            },
            "name": "a"
          },
          {
            "datatype": {
              "type": "TimeSpec"
            },
            "name": "b"
          }
        ],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": "",
        "name": "get_nanoseconds",
        "parameters": [
          {
            "datatype": {
              "type": "TimeSpec"
            },
            "name": "t"
          }
        ],
        "return_type": {
          "type": "i64"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": "",
        "name": "get_seconds",
        "parameters": [
          {
            "datatype": {
              "type": "TimeSpec"
            },
            "name": "t"
          }
        ],
        "return_type": {
          "type": "int"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Load UTC now into given pointer\n If successful True is returned",
        "name": "get_utc_now",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "type": "TimeSpec"
                }
              ],
              "type": "Ptr"
            },
            "name": "t"
          }
        ],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [],
        "comment": " is a > b ?",
        "name": "greater",
        "parameters": [
          {
            "datatype": {
              "type": "TimeSpec"
            },
            "name": "a"
          },
          {
            "datatype": {
              "type": "TimeSpec"
            },
            "name": "b"
          }
        ],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [],
        "comment": "",
        "name": "in_future",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "seconds"
          }
        ],
        "return_type": {
          "type": "TimeSpec"
        }
      },
      {
        "annotations": [],
        "comment": "",
        "name": "in_future_ex",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "seconds"
          },
          {
            "datatype": {
              "type": "i64"
            },
            "name": "nanoseconds"
          }
        ],
        "return_type": {
          "type": "TimeSpec"
        }
      },
      {
        "annotations": [],
        "comment": " is a < b ?",
        "name": "lessser",
        "parameters": [
          {
            "datatype": {
              "type": "TimeSpec"
            },
            "name": "a"
          },
          {
            "datatype": {
              "type": "TimeSpec"
            },
            "name": "b"
          }
        ],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [],
        "comment": "",
        "name": "now",
        "parameters": [],
        "return_type": {
          "type": "TimeSpec"
        }
      }
    ],
    "global_consts": [],
    "imports": [],
    "macros": []
  },
  "libs.unittest": {
    "classes": [],
    "functions": [],
    "global_consts": [],
    "imports": [],
    "macros": [
      {
        "comment": " unittest.assert_false!{x} - assert that this is false",
        "name": "assert_false!"
      },
      {
        "comment": " unittest.assert_true!{x} - assert that this is true",
        "name": "assert_true!"
      },
      {
        "comment": " see unittest.test_case example above",
        "name": "end_test_case!"
      },
      {
        "comment": " unittest.run_all!{} - put this at the end to run all unit tests you created",
        "name": "run_all!"
      },
      {
        "comment": " unittest.test_case!{\"name\"}: - start a test case definition\n\n # --- Ensure you use below imports as is ---\n\n import libs.unittest as u\n import libs.console as console\n\n u.test_case!{\"assumptions\"}:\n     u.assert_true!{\"char is 1 byte\" (1 == inlinec(\"int\", \"sizeof(char)\"))}\n     x = 1\n     u.assert_true!{\"int is 4 byte\" (4 == inlinec(\"int\", \"sizeof(yy__x)\"))}\n     u.end_test_case!{}\n\n u.run_all!{}",
        "name": "test_case!"
      }
    ]
  },
  "raylib": {
    "classes": [
      {
        "annotations": [
          {
            "argument": "AudioStream",
            "name": "@nativedefine"
          }
        ],
        "comment": " AudioStream, custom audio stream",
        "members": [],
        "name": "AudioStream"
      },
      {
        "annotations": [
          {
            "argument": "BoneInfo",
            "name": "@nativedefine"
          }
        ],
        "comment": " Bone, skeletal animation bone",
        "members": [],
        "name": "BoneInfo"
      },
      {
        "annotations": [
          {
            "argument": "BoundingBox",
            "name": "@nativedefine"
          },
          {
            "name": "@onstack"
          }
        ],
        "comment": " BoundingBox",
        "members": [
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "min"
          },
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "max"
          }
        ],
        "name": "BoundingBox"
      },
      {
        "annotations": [
          {
            "argument": "char[32]",
            "name": "@nativedefine"
          }
        ],
        "comment": "",
        "members": [],
        "name": "CChar32"
      },
      {
        "annotations": [
          {
            "argument": "float[2]",
            "name": "@nativedefine"
          }
        ],
        "comment": "",
        "members": [],
        "name": "CFloat2"
      },
      {
        "annotations": [
          {
            "argument": "float[4]",
            "name": "@nativedefine"
          }
        ],
        "comment": "",
        "members": [],
        "name": "CFloat4"
      },
      {
        "annotations": [
          {
            "argument": "Camera",
            "name": "@nativedefine"
          },
          {
            "name": "@onstack"
          }
        ],
        "comment": " Camera type fallback, defaults to Camera3D",
        "members": [
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "position"
          },
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "target"
          },
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "up"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "fovy"
          },
          {
            "datatype": {
              "type": "CInt"
            },
            "name": "projection"
          }
        ],
        "name": "Camera"
      },
      {
        "annotations": [
          {
            "argument": "Camera2D",
            "name": "@nativedefine"
          },
          {
            "name": "@onstack"
          }
        ],
        "comment": " Camera2D, defines position/orientation in 2d space",
        "members": [
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "offset"
          },
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "target"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "rotation"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "zoom"
          }
        ],
        "name": "Camera2D"
      },
      {
        "annotations": [
          {
            "argument": "Camera3D",
            "name": "@nativedefine"
          },
          {
            "name": "@onstack"
          }
        ],
        "comment": " Camera, defines position/orientation in 3d space",
        "members": [
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "position"
          },
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "target"
          },
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "up"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "fovy"
          },
          {
            "datatype": {
              "type": "CInt"
            },
            "name": "projection"
          }
        ],
        "name": "Camera3D"
      },
      {
        "annotations": [
          {
            "argument": "Color",
            "name": "@nativedefine"
          },
          {
            "name": "@onstack"
          }
        ],
        "comment": " Color, 4 components, R8G8B8A8 (32bit)",
        "members": [
          {
            "datatype": {
              "type": "CUChar"
            },
            "name": "r"
          },
          {
            "datatype": {
              "type": "CUChar"
            },
            "name": "g"
          },
          {
            "datatype": {
              "type": "CUChar"
            },
            "name": "b"
          },
          {
            "datatype": {
              "type": "CUChar"
            },
            "name": "a"
          }
        ],
        "name": "Color"
      },
      {
        "annotations": [
          {
            "argument": "Matrix[2]",
            "name": "@nativedefine"
          }
        ],
        "comment": "",
        "members": [],
        "name": "DTMatrix2"
      },
      {
        "annotations": [
          {
            "argument": "FilePathList",
            "name": "@nativedefine"
          }
        ],
        "comment": " File path list",
        "members": [],
        "name": "FilePathList"
      },
      {
        "annotations": [
          {
            "argument": "Font",
            "name": "@nativedefine"
          },
          {
            "name": "@onstack"
          }
        ],
        "comment": " Font, font texture and GlyphInfo array data",
        "members": [
          {
            "datatype": {
              "type": "CInt"
            },
            "name": "baseSize"
          },
          {
            "datatype": {
              "type": "CInt"
            },
            "name": "glyphCount"
          },
          {
            "datatype": {
              "type": "CInt"
            },
            "name": "glyphPadding"
          },
          {
            "datatype": {
              "type": "Texture2D"
            },
            "name": "texture"
          },
          {
            "datatype": {
              "arguments": [
                {
                  "type": "Rectangle"
                }
              ],
              "type": "Ptr"
            },
            "name": "recs"
          },
          {
            "datatype": {
              "arguments": [
                {
                  "type": "GlyphInfo"
                }
              ],
              "type": "Ptr"
            },
            "name": "glyphs"
          }
        ],
        "name": "Font"
      },
      {
        "annotations": [
          {
            "argument": "GlyphInfo",
            "name": "@nativedefine"
          },
          {
            "name": "@onstack"
          }
        ],
        "comment": " GlyphInfo, font characters glyphs info",
        "members": [
          {
            "datatype": {
              "type": "CInt"
            },
            "name": "value"
          },
          {
            "datatype": {
              "type": "CInt"
            },
            "name": "offsetX"
          },
          {
            "datatype": {
              "type": "CInt"
            },
            "name": "offsetY"
          },
          {
            "datatype": {
              "type": "CInt"
            },
            "name": "advanceX"
          },
          {
            "datatype": {
              "type": "Image"
            },
            "name": "image"
          }
        ],
        "name": "GlyphInfo"
      },
      {
        "annotations": [
          {
            "argument": "Image",
            "name": "@nativedefine"
          },
          {
            "name": "@onstack"
          }
        ],
        "comment": " Image, pixel data stored in CPU memory (RAM)",
        "members": [
          {
            "datatype": {
              "type": "AnyPtr"
            },
            "name": "data"
          },
          {
            "datatype": {
              "type": "CInt"
            },
            "name": "width"
          },
          {
            "datatype": {
              "type": "CInt"
            },
            "name": "height"
          },
          {
            "datatype": {
              "type": "CInt"
            },
            "name": "mipmaps"
          },
          {
            "datatype": {
              "type": "CInt"
            },
            "name": "format"
          }
        ],
        "name": "Image"
      },
      {
        "annotations": [
          {
            "argument": "Material",
            "name": "@nativedefine"
          }
        ],
        "comment": " Material, includes shader and maps",
        "members": [],
        "name": "Material"
      },
      {
        "annotations": [
          {
            "argument": "MaterialMap",
            "name": "@nativedefine"
          },
          {
            "name": "@onstack"
          }
        ],
        "comment": " MaterialMap",
        "members": [
          {
            "datatype": {
              "type": "Texture2D"
            },
            "name": "texture"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "color"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "value"
          }
        ],
        "name": "MaterialMap"
      },
      {
        "annotations": [
          {
            "argument": "Matrix",
            "name": "@nativedefine"
          },
          {
            "name": "@onstack"
          }
        ],
        "comment": " Matrix, 4x4 components, column major, OpenGL style, right-handed",
        "members": [
          {
            "datatype": {
              "type": "float"
            },
            "name": "m0"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "m4"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "m8"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "m12"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "m1"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "m5"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "m9"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "m13"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "m2"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "m6"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "m10"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "m14"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "m3"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "m7"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "m11"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "m15"
          }
        ],
        "name": "Matrix"
      },
      {
        "annotations": [
          {
            "argument": "Mesh",
            "name": "@nativedefine"
          }
        ],
        "comment": " Mesh, vertex data and vao/vbo",
        "members": [],
        "name": "Mesh"
      },
      {
        "annotations": [
          {
            "argument": "Model",
            "name": "@nativedefine"
          }
        ],
        "comment": " Model, meshes, materials and animation data",
        "members": [],
        "name": "Model"
      },
      {
        "annotations": [
          {
            "argument": "ModelAnimation",
            "name": "@nativedefine"
          }
        ],
        "comment": " ModelAnimation",
        "members": [],
        "name": "ModelAnimation"
      },
      {
        "annotations": [
          {
            "argument": "Music",
            "name": "@nativedefine"
          },
          {
            "name": "@onstack"
          }
        ],
        "comment": " Music, audio stream, anything longer than ~10 seconds should be streamed",
        "members": [
          {
            "datatype": {
              "type": "AudioStream"
            },
            "name": "stream"
          },
          {
            "datatype": {
              "type": "CUInt"
            },
            "name": "frameCount"
          },
          {
            "datatype": {
              "type": "bool"
            },
            "name": "looping"
          },
          {
            "datatype": {
              "type": "CInt"
            },
            "name": "ctxType"
          },
          {
            "datatype": {
              "type": "AnyPtr"
            },
            "name": "ctxData"
          }
        ],
        "name": "Music"
      },
      {
        "annotations": [
          {
            "argument": "NPatchInfo",
            "name": "@nativedefine"
          },
          {
            "name": "@onstack"
          }
        ],
        "comment": " NPatchInfo, n-patch layout info",
        "members": [
          {
            "datatype": {
              "type": "Rectangle"
            },
            "name": "source"
          },
          {
            "datatype": {
              "type": "CInt"
            },
            "name": "left"
          },
          {
            "datatype": {
              "type": "CInt"
            },
            "name": "top"
          },
          {
            "datatype": {
              "type": "CInt"
            },
            "name": "right"
          },
          {
            "datatype": {
              "type": "CInt"
            },
            "name": "bottom"
          },
          {
            "datatype": {
              "type": "CInt"
            },
            "name": "layout"
          }
        ],
        "name": "NPatchInfo"
      },
      {
        "annotations": [
          {
            "argument": "Quaternion",
            "name": "@nativedefine"
          },
          {
            "name": "@onstack"
          }
        ],
        "comment": " Quaternion, 4 components (Vector4 alias)",
        "members": [
          {
            "datatype": {
              "type": "float"
            },
            "name": "x"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "y"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "z"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "w"
          }
        ],
        "name": "Quaternion"
      },
      {
        "annotations": [
          {
            "argument": "rAudioBuffer *",
            "name": "@nativedefine"
          }
        ],
        "comment": "",
        "members": [],
        "name": "RAudioBufferPtr"
      },
      {
        "annotations": [
          {
            "argument": "rAudioProcessor *",
            "name": "@nativedefine"
          }
        ],
        "comment": "",
        "members": [],
        "name": "RAudioProcessorPtr"
      },
      {
        "annotations": [
          {
            "argument": "Ray",
            "name": "@nativedefine"
          },
          {
            "name": "@onstack"
          }
        ],
        "comment": " Ray, ray for raycasting",
        "members": [
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "position"
          },
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "direction"
          }
        ],
        "name": "Ray"
      },
      {
        "annotations": [
          {
            "argument": "RayCollision",
            "name": "@nativedefine"
          },
          {
            "name": "@onstack"
          }
        ],
        "comment": " RayCollision, ray hit information",
        "members": [
          {
            "datatype": {
              "type": "bool"
            },
            "name": "hit"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "distance"
          },
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "point"
          },
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "normal"
          }
        ],
        "name": "RayCollision"
      },
      {
        "annotations": [
          {
            "argument": "Rectangle",
            "name": "@nativedefine"
          },
          {
            "name": "@onstack"
          }
        ],
        "comment": " Rectangle, 4 components",
        "members": [
          {
            "datatype": {
              "type": "float"
            },
            "name": "x"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "y"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "width"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "height"
          }
        ],
        "name": "Rectangle"
      },
      {
        "annotations": [
          {
            "argument": "RenderTexture",
            "name": "@nativedefine"
          },
          {
            "name": "@onstack"
          }
        ],
        "comment": " RenderTexture, fbo for texture rendering",
        "members": [
          {
            "datatype": {
              "type": "CUInt"
            },
            "name": "id"
          },
          {
            "datatype": {
              "type": "Texture"
            },
            "name": "texture"
          },
          {
            "datatype": {
              "type": "Texture"
            },
            "name": "depth"
          }
        ],
        "name": "RenderTexture"
      },
      {
        "annotations": [
          {
            "argument": "RenderTexture2D",
            "name": "@nativedefine"
          },
          {
            "name": "@onstack"
          }
        ],
        "comment": " RenderTexture2D, same as RenderTexture",
        "members": [
          {
            "datatype": {
              "type": "CUInt"
            },
            "name": "id"
          },
          {
            "datatype": {
              "type": "Texture"
            },
            "name": "p_texture"
          },
          {
            "datatype": {
              "type": "Texture"
            },
            "name": "depth"
          }
        ],
        "name": "RenderTexture2D"
      },
      {
        "annotations": [
          {
            "argument": "Shader",
            "name": "@nativedefine"
          }
        ],
        "comment": " Shader",
        "members": [],
        "name": "Shader"
      },
      {
        "annotations": [
          {
            "argument": "Sound",
            "name": "@nativedefine"
          },
          {
            "name": "@onstack"
          }
        ],
        "comment": " Sound",
        "members": [
          {
            "datatype": {
              "type": "AudioStream"
            },
            "name": "stream"
          },
          {
            "datatype": {
              "type": "CUInt"
            },
            "name": "frameCount"
          }
        ],
        "name": "Sound"
      },
      {
        "annotations": [
          {
            "argument": "Texture",
            "name": "@nativedefine"
          },
          {
            "name": "@onstack"
          }
        ],
        "comment": " Texture, tex data stored in GPU memory (VRAM)",
        "members": [
          {
            "datatype": {
              "type": "CUInt"
            },
            "name": "id"
          },
          {
            "datatype": {
              "type": "CInt"
            },
            "name": "width"
          },
          {
            "datatype": {
              "type": "CInt"
            },
            "name": "height"
          },
          {
            "datatype": {
              "type": "CInt"
            },
            "name": "mipmaps"
          },
          {
            "datatype": {
              "type": "CInt"
            },
            "name": "format"
          }
        ],
        "name": "Texture"
      },
      {
        "annotations": [
          {
            "argument": "Texture2D",
            "name": "@nativedefine"
          },
          {
            "name": "@onstack"
          }
        ],
        "comment": " Texture2D, same as Texture",
        "members": [
          {
            "datatype": {
              "type": "CUInt"
            },
            "name": "id"
          },
          {
            "datatype": {
              "type": "CInt"
            },
            "name": "width"
          },
          {
            "datatype": {
              "type": "CInt"
            },
            "name": "height"
          },
          {
            "datatype": {
              "type": "CInt"
            },
            "name": "mipmaps"
          },
          {
            "datatype": {
              "type": "CInt"
            },
            "name": "format"
          }
        ],
        "name": "Texture2D"
      },
      {
        "annotations": [
          {
            "argument": "TextureCubemap",
            "name": "@nativedefine"
          },
          {
            "name": "@onstack"
          }
        ],
        "comment": " TextureCubemap, same as Texture",
        "members": [
          {
            "datatype": {
              "type": "CUInt"
            },
            "name": "id"
          },
          {
            "datatype": {
              "type": "CInt"
            },
            "name": "width"
          },
          {
            "datatype": {
              "type": "CInt"
            },
            "name": "height"
          },
          {
            "datatype": {
              "type": "CInt"
            },
            "name": "mipmaps"
          },
          {
            "datatype": {
              "type": "CInt"
            },
            "name": "format"
          }
        ],
        "name": "TextureCubemap"
      },
      {
        "annotations": [
          {
            "argument": "Transform",
            "name": "@nativedefine"
          },
          {
            "name": "@onstack"
          }
        ],
        "comment": " Transform, vertex transformation data",
        "members": [
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "translation"
          },
          {
            "datatype": {
              "type": "Quaternion"
            },
            "name": "rotation"
          },
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "scale"
          }
        ],
        "name": "Transform"
      },
      {
        "annotations": [
          {
            "argument": "Vector2",
            "name": "@nativedefine"
          },
          {
            "name": "@onstack"
          }
        ],
        "comment": " Vector2, 2 components",
        "members": [
          {
            "datatype": {
              "type": "float"
            },
            "name": "x"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "y"
          }
        ],
        "name": "Vector2"
      },
      {
        "annotations": [
          {
            "argument": "Vector3",
            "name": "@nativedefine"
          },
          {
            "name": "@onstack"
          }
        ],
        "comment": " Vector3, 3 components",
        "members": [
          {
            "datatype": {
              "type": "float"
            },
            "name": "x"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "y"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "z"
          }
        ],
        "name": "Vector3"
      },
      {
        "annotations": [
          {
            "argument": "Vector4",
            "name": "@nativedefine"
          },
          {
            "name": "@onstack"
          }
        ],
        "comment": " Vector4, 4 components",
        "members": [
          {
            "datatype": {
              "type": "float"
            },
            "name": "x"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "y"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "z"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "w"
          }
        ],
        "name": "Vector4"
      },
      {
        "annotations": [
          {
            "argument": "VrDeviceInfo",
            "name": "@nativedefine"
          }
        ],
        "comment": " VrDeviceInfo, Head-Mounted-Display device parameters",
        "members": [],
        "name": "VrDeviceInfo"
      },
      {
        "annotations": [
          {
            "argument": "VrStereoConfig",
            "name": "@nativedefine"
          }
        ],
        "comment": " VrStereoConfig, VR stereo rendering configuration for simulator",
        "members": [],
        "name": "VrStereoConfig"
      },
      {
        "annotations": [
          {
            "argument": "Wave",
            "name": "@nativedefine"
          },
          {
            "name": "@onstack"
          }
        ],
        "comment": " Wave, audio wave data",
        "members": [
          {
            "datatype": {
              "type": "CUInt"
            },
            "name": "frameCount"
          },
          {
            "datatype": {
              "type": "CUInt"
            },
            "name": "sampleRate"
          },
          {
            "datatype": {
              "type": "CUInt"
            },
            "name": "sampleSize"
          },
          {
            "datatype": {
              "type": "CUInt"
            },
            "name": "channels"
          },
          {
            "datatype": {
              "type": "AnyPtr"
            },
            "name": "data"
          }
        ],
        "name": "Wave"
      }
    ],
    "functions": [
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Begin blending mode (alpha, additive, multiplied, subtract, custom)",
        "name": "begin_blend_mode",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "mode"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Setup canvas (framebuffer) to start drawing",
        "name": "begin_drawing",
        "parameters": [],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Begin 2D mode with custom camera (2D)",
        "name": "begin_mode_2d",
        "parameters": [
          {
            "datatype": {
              "type": "Camera2D"
            },
            "name": "p_camera"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Begin 3D mode with custom camera (3D)",
        "name": "begin_mode_3d",
        "parameters": [
          {
            "datatype": {
              "type": "Camera3D"
            },
            "name": "p_camera"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Begin scissor mode (define screen area for following drawing)",
        "name": "begin_scissor_mode",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "x"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "y"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "width"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "height"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Begin custom shader drawing",
        "name": "begin_shader_mode",
        "parameters": [
          {
            "datatype": {
              "type": "Shader"
            },
            "name": "shader"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Begin drawing to render texture",
        "name": "begin_texture_mode",
        "parameters": [
          {
            "datatype": {
              "type": "RenderTexture2D"
            },
            "name": "target"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Begin stereo rendering (requires VR simulator)",
        "name": "begin_vr_stereo_mode",
        "parameters": [
          {
            "datatype": {
              "type": "VrStereoConfig"
            },
            "name": "config"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Factory function for: BoundingBox",
        "name": "bounding_box",
        "parameters": [
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "min"
          },
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "max"
          }
        ],
        "return_type": {
          "type": "BoundingBox"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Factory function for: Camera",
        "name": "camera",
        "parameters": [
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "position"
          },
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "target"
          },
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "up"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "fovy"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "projection"
          }
        ],
        "return_type": {
          "type": "Camera"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Factory function for: Camera2D",
        "name": "camera_2d",
        "parameters": [
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "offset"
          },
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "target"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "rotation"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "zoom"
          }
        ],
        "return_type": {
          "type": "Camera2D"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Factory function for: Camera3D",
        "name": "camera_3d",
        "parameters": [
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "position"
          },
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "target"
          },
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "up"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "fovy"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "projection"
          }
        ],
        "return_type": {
          "type": "Camera3D"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Change working directory, return true on success",
        "name": "change_directory",
        "parameters": [
          {
            "datatype": {
              "type": "str"
            },
            "name": "dir"
          }
        ],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Check collision between box and sphere",
        "name": "check_collision_box_sphere",
        "parameters": [
          {
            "datatype": {
              "type": "BoundingBox"
            },
            "name": "box"
          },
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "center"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "radius"
          }
        ],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Check collision between two bounding boxes",
        "name": "check_collision_boxes",
        "parameters": [
          {
            "datatype": {
              "type": "BoundingBox"
            },
            "name": "box1"
          },
          {
            "datatype": {
              "type": "BoundingBox"
            },
            "name": "box2"
          }
        ],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Check collision between circle and rectangle",
        "name": "check_collision_circle_rec",
        "parameters": [
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "center"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "radius"
          },
          {
            "datatype": {
              "type": "Rectangle"
            },
            "name": "rec"
          }
        ],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Check collision between two circles",
        "name": "check_collision_circles",
        "parameters": [
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "center1"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "radius1"
          },
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "center2"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "radius2"
          }
        ],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Check the collision between two lines defined by two points each, returns collision point by reference",
        "name": "check_collision_lines",
        "parameters": [
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "start_pos1"
          },
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "end_pos1"
          },
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "start_pos2"
          },
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "end_pos2"
          },
          {
            "datatype": {
              "arguments": [
                {
                  "type": "Vector2"
                }
              ],
              "type": "Ptr"
            },
            "name": "collision_point"
          }
        ],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Check if point is inside circle",
        "name": "check_collision_point_circle",
        "parameters": [
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "point"
          },
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "center"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "radius"
          }
        ],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Check if point belongs to line created between two points [p1] and [p2] with defined margin in pixels [threshold]",
        "name": "check_collision_point_line",
        "parameters": [
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "point"
          },
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "p1"
          },
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "p2"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "threshold"
          }
        ],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Check if point is within a polygon described by array of vertices",
        "name": "check_collision_point_poly",
        "parameters": [
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "point"
          },
          {
            "datatype": {
              "arguments": [
                {
                  "type": "Vector2"
                }
              ],
              "type": "Ptr"
            },
            "name": "points"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "point_count"
          }
        ],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Check if point is inside rectangle",
        "name": "check_collision_point_rec",
        "parameters": [
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "point"
          },
          {
            "datatype": {
              "type": "Rectangle"
            },
            "name": "rec"
          }
        ],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Check if point is inside a triangle",
        "name": "check_collision_point_triangle",
        "parameters": [
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "point"
          },
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "p1"
          },
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "p2"
          },
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "p3"
          }
        ],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Check collision between two rectangles",
        "name": "check_collision_recs",
        "parameters": [
          {
            "datatype": {
              "type": "Rectangle"
            },
            "name": "rec1"
          },
          {
            "datatype": {
              "type": "Rectangle"
            },
            "name": "rec2"
          }
        ],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Check collision between two spheres",
        "name": "check_collision_spheres",
        "parameters": [
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "center1"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "radius1"
          },
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "center2"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "radius2"
          }
        ],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Set background color (framebuffer clear color)",
        "name": "clear_background",
        "parameters": [
          {
            "datatype": {
              "type": "Color"
            },
            "name": "p_color"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Clear window configuration state flags",
        "name": "clear_window_state",
        "parameters": [
          {
            "datatype": {
              "type": "u32"
            },
            "name": "flags"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Close the audio device and context",
        "name": "close_audio_device",
        "parameters": [],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Close window and unload OpenGL context",
        "name": "close_window",
        "parameters": [],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Encode one codepoint into UTF-8 byte array (array length returned as parameter)",
        "name": "codepoint_to_utf8",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "codepoint"
          },
          {
            "datatype": {
              "arguments": [
                {
                  "type": "CInt"
                }
              ],
              "type": "Ptr"
            },
            "name": "utf8_size"
          }
        ],
        "return_type": {
          "arguments": [
            {
              "arguments": [
                {
                  "type": "CChar"
                }
              ],
              "type": "Const"
            }
          ],
          "type": "Ptr"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Factory function for: Color",
        "name": "color",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "r"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "g"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "b"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "a"
          }
        ],
        "return_type": {
          "type": "Color"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Get color with alpha applied, alpha goes from 0.0f to 1.0f",
        "name": "color_alpha",
        "parameters": [
          {
            "datatype": {
              "type": "Color"
            },
            "name": "p_color"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "alpha"
          }
        ],
        "return_type": {
          "type": "Color"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Get src alpha-blended into dst color with tint",
        "name": "color_alpha_blend",
        "parameters": [
          {
            "datatype": {
              "type": "Color"
            },
            "name": "dst"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "src"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "tint"
          }
        ],
        "return_type": {
          "type": "Color"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Get color with brightness correction, brightness factor goes from -1.0f to 1.0f",
        "name": "color_brightness",
        "parameters": [
          {
            "datatype": {
              "type": "Color"
            },
            "name": "p_color"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "factor"
          }
        ],
        "return_type": {
          "type": "Color"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Get color with contrast correction, contrast values between -1.0f and 1.0f",
        "name": "color_contrast",
        "parameters": [
          {
            "datatype": {
              "type": "Color"
            },
            "name": "p_color"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "contrast"
          }
        ],
        "return_type": {
          "type": "Color"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Get a Color from HSV values, hue [0..360], saturation/value [0..1]",
        "name": "color_from_hsv",
        "parameters": [
          {
            "datatype": {
              "type": "float"
            },
            "name": "hue"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "saturation"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "value"
          }
        ],
        "return_type": {
          "type": "Color"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Get Color from normalized values [0..1]",
        "name": "color_from_normalized",
        "parameters": [
          {
            "datatype": {
              "type": "Vector4"
            },
            "name": "normalized"
          }
        ],
        "return_type": {
          "type": "Color"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Get Color normalized as float [0..1]",
        "name": "color_normalize",
        "parameters": [
          {
            "datatype": {
              "type": "Color"
            },
            "name": "p_color"
          }
        ],
        "return_type": {
          "type": "Vector4"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Get color multiplied with another color",
        "name": "color_tint",
        "parameters": [
          {
            "datatype": {
              "type": "Color"
            },
            "name": "p_color"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "tint"
          }
        ],
        "return_type": {
          "type": "Color"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Get HSV values for a Color, hue [0..360], saturation/value [0..1]",
        "name": "color_to_hsv",
        "parameters": [
          {
            "datatype": {
              "type": "Color"
            },
            "name": "p_color"
          }
        ],
        "return_type": {
          "type": "Vector3"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Get hexadecimal value for a Color",
        "name": "color_to_int",
        "parameters": [
          {
            "datatype": {
              "type": "Color"
            },
            "name": "p_color"
          }
        ],
        "return_type": {
          "type": "int"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Compress data (DEFLATE algorithm), memory must be MemFree()",
        "name": "compress_data",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "arguments": [
                    {
                      "type": "CUChar"
                    }
                  ],
                  "type": "Const"
                }
              ],
              "type": "Ptr"
            },
            "name": "data"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "data_size"
          },
          {
            "datatype": {
              "arguments": [
                {
                  "type": "CInt"
                }
              ],
              "type": "Ptr"
            },
            "name": "comp_data_size"
          }
        ],
        "return_type": {
          "arguments": [
            {
              "type": "CUChar"
            }
          ],
          "type": "Ptr"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Decode Base64 string data, memory must be MemFree()",
        "name": "decode_data_base64",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "arguments": [
                    {
                      "type": "CUChar"
                    }
                  ],
                  "type": "Const"
                }
              ],
              "type": "Ptr"
            },
            "name": "data"
          },
          {
            "datatype": {
              "arguments": [
                {
                  "type": "CInt"
                }
              ],
              "type": "Ptr"
            },
            "name": "output_size"
          }
        ],
        "return_type": {
          "arguments": [
            {
              "type": "CUChar"
            }
          ],
          "type": "Ptr"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Decompress data (DEFLATE algorithm), memory must be MemFree()",
        "name": "decompress_data",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "arguments": [
                    {
                      "type": "CUChar"
                    }
                  ],
                  "type": "Const"
                }
              ],
              "type": "Ptr"
            },
            "name": "comp_data"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "comp_data_size"
          },
          {
            "datatype": {
              "arguments": [
                {
                  "type": "CInt"
                }
              ],
              "type": "Ptr"
            },
            "name": "data_size"
          }
        ],
        "return_type": {
          "arguments": [
            {
              "type": "CUChar"
            }
          ],
          "type": "Ptr"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Check if a directory path exists",
        "name": "directory_exists",
        "parameters": [
          {
            "datatype": {
              "type": "str"
            },
            "name": "dir_path"
          }
        ],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Disables cursor (lock cursor)",
        "name": "disable_cursor",
        "parameters": [],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Disable waiting for events on EndDrawing(), automatic events polling",
        "name": "disable_event_waiting",
        "parameters": [],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Draw a billboard texture",
        "name": "draw_billboard",
        "parameters": [
          {
            "datatype": {
              "type": "Camera"
            },
            "name": "p_camera"
          },
          {
            "datatype": {
              "type": "Texture2D"
            },
            "name": "p_texture"
          },
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "position"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "size"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "tint"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Draw a billboard texture defined by source and rotation",
        "name": "draw_billboard_pro",
        "parameters": [
          {
            "datatype": {
              "type": "Camera"
            },
            "name": "p_camera"
          },
          {
            "datatype": {
              "type": "Texture2D"
            },
            "name": "p_texture"
          },
          {
            "datatype": {
              "type": "Rectangle"
            },
            "name": "source"
          },
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "position"
          },
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "up"
          },
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "size"
          },
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "origin"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "rotation"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "tint"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Draw a billboard texture defined by source",
        "name": "draw_billboard_rec",
        "parameters": [
          {
            "datatype": {
              "type": "Camera"
            },
            "name": "p_camera"
          },
          {
            "datatype": {
              "type": "Texture2D"
            },
            "name": "p_texture"
          },
          {
            "datatype": {
              "type": "Rectangle"
            },
            "name": "source"
          },
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "position"
          },
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "size"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "tint"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Draw bounding box (wires)",
        "name": "draw_bounding_box",
        "parameters": [
          {
            "datatype": {
              "type": "BoundingBox"
            },
            "name": "box"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "p_color"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Draw a capsule with the center of its sphere caps at startPos and endPos",
        "name": "draw_capsule",
        "parameters": [
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "start_pos"
          },
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "end_pos"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "radius"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "slices"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "rings"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "p_color"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Draw capsule wireframe with the center of its sphere caps at startPos and endPos",
        "name": "draw_capsule_wires",
        "parameters": [
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "start_pos"
          },
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "end_pos"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "radius"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "slices"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "rings"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "p_color"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Draw a color-filled circle",
        "name": "draw_circle",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "center_x"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "center_y"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "radius"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "p_color"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Draw a circle in 3D world space",
        "name": "draw_circle_3d",
        "parameters": [
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "center"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "radius"
          },
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "rotation_axis"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "rotation_angle"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "p_color"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Draw a gradient-filled circle",
        "name": "draw_circle_gradient",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "center_x"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "center_y"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "radius"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "color1"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "color2"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Draw circle outline",
        "name": "draw_circle_lines",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "center_x"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "center_y"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "radius"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "p_color"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Draw a piece of a circle",
        "name": "draw_circle_sector",
        "parameters": [
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "center"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "radius"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "start_angle"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "end_angle"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "segments"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "p_color"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Draw circle sector outline",
        "name": "draw_circle_sector_lines",
        "parameters": [
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "center"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "radius"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "start_angle"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "end_angle"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "segments"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "p_color"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Draw a color-filled circle (Vector version)",
        "name": "draw_circle_v",
        "parameters": [
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "center"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "radius"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "p_color"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Draw cube",
        "name": "draw_cube",
        "parameters": [
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "position"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "width"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "height"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "length"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "p_color"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Draw cube (Vector version)",
        "name": "draw_cube_v",
        "parameters": [
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "position"
          },
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "size"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "p_color"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Draw cube wires",
        "name": "draw_cube_wires",
        "parameters": [
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "position"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "width"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "height"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "length"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "p_color"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Draw cube wires (Vector version)",
        "name": "draw_cube_wires_v",
        "parameters": [
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "position"
          },
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "size"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "p_color"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Draw a cylinder/cone",
        "name": "draw_cylinder",
        "parameters": [
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "position"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "radius_top"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "radius_bottom"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "height"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "slices"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "p_color"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Draw a cylinder with base at startPos and top at endPos",
        "name": "draw_cylinder_ex",
        "parameters": [
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "start_pos"
          },
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "end_pos"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "start_radius"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "end_radius"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "sides"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "p_color"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Draw a cylinder/cone wires",
        "name": "draw_cylinder_wires",
        "parameters": [
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "position"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "radius_top"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "radius_bottom"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "height"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "slices"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "p_color"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Draw a cylinder wires with base at startPos and top at endPos",
        "name": "draw_cylinder_wires_ex",
        "parameters": [
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "start_pos"
          },
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "end_pos"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "start_radius"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "end_radius"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "sides"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "p_color"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Draw ellipse",
        "name": "draw_ellipse",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "center_x"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "center_y"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "radius_h"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "radius_v"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "p_color"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Draw ellipse outline",
        "name": "draw_ellipse_lines",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "center_x"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "center_y"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "radius_h"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "radius_v"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "p_color"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Draw current FPS",
        "name": "draw_fps",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "pos_x"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "pos_y"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Draw a grid (centered at (0, 0, 0))",
        "name": "draw_grid",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "slices"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "spacing"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Draw a line",
        "name": "draw_line",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "start_pos_x"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "start_pos_y"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "end_pos_x"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "end_pos_y"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "p_color"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Draw a line in 3D world space",
        "name": "draw_line_3d",
        "parameters": [
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "start_pos"
          },
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "end_pos"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "p_color"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Draw a line using cubic-bezier curves in-out",
        "name": "draw_line_bezier",
        "parameters": [
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "start_pos"
          },
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "end_pos"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "thick"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "p_color"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Draw line using cubic bezier curves with 2 control points",
        "name": "draw_line_bezier_cubic",
        "parameters": [
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "start_pos"
          },
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "end_pos"
          },
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "start_control_pos"
          },
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "end_control_pos"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "thick"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "p_color"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Draw line using quadratic bezier curves with a control point",
        "name": "draw_line_bezier_quad",
        "parameters": [
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "start_pos"
          },
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "end_pos"
          },
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "control_pos"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "thick"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "p_color"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Draw a line defining thickness",
        "name": "draw_line_ex",
        "parameters": [
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "start_pos"
          },
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "end_pos"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "thick"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "p_color"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Draw lines sequence",
        "name": "draw_line_strip",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "type": "Vector2"
                }
              ],
              "type": "Ptr"
            },
            "name": "points"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "point_count"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "p_color"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Draw a line (Vector version)",
        "name": "draw_line_v",
        "parameters": [
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "start_pos"
          },
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "end_pos"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "p_color"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Draw a 3d mesh with material and transform",
        "name": "draw_mesh",
        "parameters": [
          {
            "datatype": {
              "type": "Mesh"
            },
            "name": "mesh"
          },
          {
            "datatype": {
              "type": "Material"
            },
            "name": "material"
          },
          {
            "datatype": {
              "type": "Matrix"
            },
            "name": "p_transform"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Draw multiple mesh instances with material and different transforms",
        "name": "draw_mesh_instanced",
        "parameters": [
          {
            "datatype": {
              "type": "Mesh"
            },
            "name": "mesh"
          },
          {
            "datatype": {
              "type": "Material"
            },
            "name": "material"
          },
          {
            "datatype": {
              "arguments": [
                {
                  "arguments": [
                    {
                      "type": "Matrix"
                    }
                  ],
                  "type": "Const"
                }
              ],
              "type": "Ptr"
            },
            "name": "transforms"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "instances"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Draw a model (with texture if set)",
        "name": "draw_model",
        "parameters": [
          {
            "datatype": {
              "type": "Model"
            },
            "name": "model"
          },
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "position"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "scale"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "tint"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Draw a model with extended parameters",
        "name": "draw_model_ex",
        "parameters": [
          {
            "datatype": {
              "type": "Model"
            },
            "name": "model"
          },
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "position"
          },
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "rotation_axis"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "rotation_angle"
          },
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "scale"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "tint"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Draw a model wires (with texture if set)",
        "name": "draw_model_wires",
        "parameters": [
          {
            "datatype": {
              "type": "Model"
            },
            "name": "model"
          },
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "position"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "scale"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "tint"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Draw a model wires (with texture if set) with extended parameters",
        "name": "draw_model_wires_ex",
        "parameters": [
          {
            "datatype": {
              "type": "Model"
            },
            "name": "model"
          },
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "position"
          },
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "rotation_axis"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "rotation_angle"
          },
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "scale"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "tint"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Draw a pixel",
        "name": "draw_pixel",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "pos_x"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "pos_y"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "p_color"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Draw a pixel (Vector version)",
        "name": "draw_pixel_v",
        "parameters": [
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "position"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "p_color"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Draw a plane XZ",
        "name": "draw_plane",
        "parameters": [
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "center_pos"
          },
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "size"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "p_color"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Draw a point in 3D space, actually a small line",
        "name": "draw_point_3d",
        "parameters": [
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "position"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "p_color"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Draw a regular polygon (Vector version)",
        "name": "draw_poly",
        "parameters": [
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "center"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "sides"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "radius"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "rotation"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "p_color"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Draw a polygon outline of n sides",
        "name": "draw_poly_lines",
        "parameters": [
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "center"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "sides"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "radius"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "rotation"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "p_color"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Draw a polygon outline of n sides with extended parameters",
        "name": "draw_poly_lines_ex",
        "parameters": [
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "center"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "sides"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "radius"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "rotation"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "line_thick"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "p_color"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Draw a ray line",
        "name": "draw_ray",
        "parameters": [
          {
            "datatype": {
              "type": "Ray"
            },
            "name": "p_ray"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "p_color"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Draw a color-filled rectangle",
        "name": "draw_rectangle",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "pos_x"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "pos_y"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "width"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "height"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "p_color"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Draw a gradient-filled rectangle with custom vertex colors",
        "name": "draw_rectangle_gradient_ex",
        "parameters": [
          {
            "datatype": {
              "type": "Rectangle"
            },
            "name": "rec"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "col1"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "col2"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "col3"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "col4"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Draw a horizontal-gradient-filled rectangle",
        "name": "draw_rectangle_gradient_h",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "pos_x"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "pos_y"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "width"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "height"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "color1"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "color2"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Draw a vertical-gradient-filled rectangle",
        "name": "draw_rectangle_gradient_v",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "pos_x"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "pos_y"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "width"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "height"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "color1"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "color2"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Draw rectangle outline",
        "name": "draw_rectangle_lines",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "pos_x"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "pos_y"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "width"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "height"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "p_color"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Draw rectangle outline with extended parameters",
        "name": "draw_rectangle_lines_ex",
        "parameters": [
          {
            "datatype": {
              "type": "Rectangle"
            },
            "name": "rec"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "line_thick"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "p_color"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Draw a color-filled rectangle with pro parameters",
        "name": "draw_rectangle_pro",
        "parameters": [
          {
            "datatype": {
              "type": "Rectangle"
            },
            "name": "rec"
          },
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "origin"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "rotation"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "p_color"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Draw a color-filled rectangle",
        "name": "draw_rectangle_rec",
        "parameters": [
          {
            "datatype": {
              "type": "Rectangle"
            },
            "name": "rec"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "p_color"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Draw rectangle with rounded edges",
        "name": "draw_rectangle_rounded",
        "parameters": [
          {
            "datatype": {
              "type": "Rectangle"
            },
            "name": "rec"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "roundness"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "segments"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "p_color"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Draw rectangle with rounded edges outline",
        "name": "draw_rectangle_rounded_lines",
        "parameters": [
          {
            "datatype": {
              "type": "Rectangle"
            },
            "name": "rec"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "roundness"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "segments"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "line_thick"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "p_color"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Draw a color-filled rectangle (Vector version)",
        "name": "draw_rectangle_v",
        "parameters": [
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "position"
          },
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "size"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "p_color"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Draw ring",
        "name": "draw_ring",
        "parameters": [
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "center"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "inner_radius"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "outer_radius"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "start_angle"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "end_angle"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "segments"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "p_color"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Draw ring outline",
        "name": "draw_ring_lines",
        "parameters": [
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "center"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "inner_radius"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "outer_radius"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "start_angle"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "end_angle"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "segments"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "p_color"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Draw sphere",
        "name": "draw_sphere",
        "parameters": [
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "center_pos"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "radius"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "p_color"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Draw sphere with extended parameters",
        "name": "draw_sphere_ex",
        "parameters": [
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "center_pos"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "radius"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "rings"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "slices"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "p_color"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Draw sphere wires",
        "name": "draw_sphere_wires",
        "parameters": [
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "center_pos"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "radius"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "rings"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "slices"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "p_color"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Draw text (using default font)",
        "name": "draw_text",
        "parameters": [
          {
            "datatype": {
              "type": "str"
            },
            "name": "text"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "pos_x"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "pos_y"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "font_size"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "p_color"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Draw one character (codepoint)",
        "name": "draw_text_codepoint",
        "parameters": [
          {
            "datatype": {
              "type": "Font"
            },
            "name": "p_font"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "codepoint"
          },
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "position"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "font_size"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "tint"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Draw multiple character (codepoint)",
        "name": "draw_text_codepoints",
        "parameters": [
          {
            "datatype": {
              "type": "Font"
            },
            "name": "p_font"
          },
          {
            "datatype": {
              "arguments": [
                {
                  "arguments": [
                    {
                      "type": "CInt"
                    }
                  ],
                  "type": "Const"
                }
              ],
              "type": "Ptr"
            },
            "name": "codepoints"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "count"
          },
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "position"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "font_size"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "spacing"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "tint"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Draw text using font and additional parameters",
        "name": "draw_text_ex",
        "parameters": [
          {
            "datatype": {
              "type": "Font"
            },
            "name": "p_font"
          },
          {
            "datatype": {
              "type": "str"
            },
            "name": "text"
          },
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "position"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "font_size"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "spacing"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "tint"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Draw text using Font and pro parameters (rotation)",
        "name": "draw_text_pro",
        "parameters": [
          {
            "datatype": {
              "type": "Font"
            },
            "name": "p_font"
          },
          {
            "datatype": {
              "type": "str"
            },
            "name": "text"
          },
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "position"
          },
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "origin"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "rotation"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "font_size"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "spacing"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "tint"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Draw a Texture2D",
        "name": "draw_texture",
        "parameters": [
          {
            "datatype": {
              "type": "Texture2D"
            },
            "name": "p_texture"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "pos_x"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "pos_y"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "tint"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Draw a Texture2D with extended parameters",
        "name": "draw_texture_ex",
        "parameters": [
          {
            "datatype": {
              "type": "Texture2D"
            },
            "name": "p_texture"
          },
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "position"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "rotation"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "scale"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "tint"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Draws a texture (or part of it) that stretches or shrinks nicely",
        "name": "draw_texture_n_patch",
        "parameters": [
          {
            "datatype": {
              "type": "Texture2D"
            },
            "name": "p_texture"
          },
          {
            "datatype": {
              "type": "NPatchInfo"
            },
            "name": "p_n_patch_info"
          },
          {
            "datatype": {
              "type": "Rectangle"
            },
            "name": "dest"
          },
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "origin"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "rotation"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "tint"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Draw a part of a texture defined by a rectangle with 'pro' parameters",
        "name": "draw_texture_pro",
        "parameters": [
          {
            "datatype": {
              "type": "Texture2D"
            },
            "name": "p_texture"
          },
          {
            "datatype": {
              "type": "Rectangle"
            },
            "name": "source"
          },
          {
            "datatype": {
              "type": "Rectangle"
            },
            "name": "dest"
          },
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "origin"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "rotation"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "tint"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Draw a part of a texture defined by a rectangle",
        "name": "draw_texture_rec",
        "parameters": [
          {
            "datatype": {
              "type": "Texture2D"
            },
            "name": "p_texture"
          },
          {
            "datatype": {
              "type": "Rectangle"
            },
            "name": "source"
          },
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "position"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "tint"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Draw a Texture2D with position defined as Vector2",
        "name": "draw_texture_v",
        "parameters": [
          {
            "datatype": {
              "type": "Texture2D"
            },
            "name": "p_texture"
          },
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "position"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "tint"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Draw a color-filled triangle (vertex in counter-clockwise order!)",
        "name": "draw_triangle",
        "parameters": [
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "v1"
          },
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "v2"
          },
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "v3"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "p_color"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Draw a color-filled triangle (vertex in counter-clockwise order!)",
        "name": "draw_triangle_3d",
        "parameters": [
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "v1"
          },
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "v2"
          },
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "v3"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "p_color"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Draw a triangle fan defined by points (first vertex is the center)",
        "name": "draw_triangle_fan",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "type": "Vector2"
                }
              ],
              "type": "Ptr"
            },
            "name": "points"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "point_count"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "p_color"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Draw triangle outline (vertex in counter-clockwise order!)",
        "name": "draw_triangle_lines",
        "parameters": [
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "v1"
          },
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "v2"
          },
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "v3"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "p_color"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Draw a triangle strip defined by points",
        "name": "draw_triangle_strip",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "type": "Vector2"
                }
              ],
              "type": "Ptr"
            },
            "name": "points"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "point_count"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "p_color"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Draw a triangle strip defined by points",
        "name": "draw_triangle_strip_3d",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "type": "Vector3"
                }
              ],
              "type": "Ptr"
            },
            "name": "points"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "point_count"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "p_color"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Enables cursor (unlock cursor)",
        "name": "enable_cursor",
        "parameters": [],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Enable waiting for events on EndDrawing(), no automatic event polling",
        "name": "enable_event_waiting",
        "parameters": [],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Encode data to Base64 string, memory must be MemFree()",
        "name": "encode_data_base64",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "arguments": [
                    {
                      "type": "CUChar"
                    }
                  ],
                  "type": "Const"
                }
              ],
              "type": "Ptr"
            },
            "name": "data"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "data_size"
          },
          {
            "datatype": {
              "arguments": [
                {
                  "type": "CInt"
                }
              ],
              "type": "Ptr"
            },
            "name": "output_size"
          }
        ],
        "return_type": {
          "type": "CStr"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " End blending mode (reset to default: alpha blending)",
        "name": "end_blend_mode",
        "parameters": [],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " End canvas drawing and swap buffers (double buffering)",
        "name": "end_drawing",
        "parameters": [],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Ends 2D mode with custom camera",
        "name": "end_mode_2d",
        "parameters": [],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Ends 3D mode and returns to default 2D orthographic mode",
        "name": "end_mode_3d",
        "parameters": [],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " End scissor mode",
        "name": "end_scissor_mode",
        "parameters": [],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " End custom shader drawing (use default shader)",
        "name": "end_shader_mode",
        "parameters": [],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Ends drawing to render texture",
        "name": "end_texture_mode",
        "parameters": [],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " End stereo rendering (requires VR simulator)",
        "name": "end_vr_stereo_mode",
        "parameters": [],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Export data to code (.h), returns true on success",
        "name": "export_data_as_code",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "arguments": [
                    {
                      "type": "CUChar"
                    }
                  ],
                  "type": "Const"
                }
              ],
              "type": "Ptr"
            },
            "name": "data"
          },
          {
            "datatype": {
              "type": "u32"
            },
            "name": "size"
          },
          {
            "datatype": {
              "type": "str"
            },
            "name": "file_name"
          }
        ],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Export font as code file, returns true on success",
        "name": "export_font_as_code",
        "parameters": [
          {
            "datatype": {
              "type": "Font"
            },
            "name": "p_font"
          },
          {
            "datatype": {
              "type": "str"
            },
            "name": "file_name"
          }
        ],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Export image data to file, returns true on success",
        "name": "export_image",
        "parameters": [
          {
            "datatype": {
              "type": "Image"
            },
            "name": "p_image"
          },
          {
            "datatype": {
              "type": "str"
            },
            "name": "file_name"
          }
        ],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Export image as code file defining an array of bytes, returns true on success",
        "name": "export_image_as_code",
        "parameters": [
          {
            "datatype": {
              "type": "Image"
            },
            "name": "p_image"
          },
          {
            "datatype": {
              "type": "str"
            },
            "name": "file_name"
          }
        ],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Export mesh data to file, returns true on success",
        "name": "export_mesh",
        "parameters": [
          {
            "datatype": {
              "type": "Mesh"
            },
            "name": "mesh"
          },
          {
            "datatype": {
              "type": "str"
            },
            "name": "file_name"
          }
        ],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Export wave data to file, returns true on success",
        "name": "export_wave",
        "parameters": [
          {
            "datatype": {
              "type": "Wave"
            },
            "name": "p_wave"
          },
          {
            "datatype": {
              "type": "str"
            },
            "name": "file_name"
          }
        ],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Export wave sample data to code (.h), returns true on success",
        "name": "export_wave_as_code",
        "parameters": [
          {
            "datatype": {
              "type": "Wave"
            },
            "name": "p_wave"
          },
          {
            "datatype": {
              "type": "str"
            },
            "name": "file_name"
          }
        ],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Get color with alpha applied, alpha goes from 0.0f to 1.0f",
        "name": "fade",
        "parameters": [
          {
            "datatype": {
              "type": "Color"
            },
            "name": "p_color"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "alpha"
          }
        ],
        "return_type": {
          "type": "Color"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Check if file exists",
        "name": "file_exists",
        "parameters": [
          {
            "datatype": {
              "type": "str"
            },
            "name": "file_name"
          }
        ],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Factory function for: Font",
        "name": "font",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "base_size"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "glyph_count"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "glyph_padding"
          },
          {
            "datatype": {
              "type": "Texture2D"
            },
            "name": "p_texture"
          },
          {
            "datatype": {
              "arguments": [
                {
                  "type": "Rectangle"
                }
              ],
              "type": "Ptr"
            },
            "name": "recs"
          },
          {
            "datatype": {
              "arguments": [
                {
                  "type": "GlyphInfo"
                }
              ],
              "type": "Ptr"
            },
            "name": "glyphs"
          }
        ],
        "return_type": {
          "type": "Font"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Generate image: cellular algorithm, bigger tileSize means bigger cells",
        "name": "gen_image_cellular",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "width"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "height"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "tile_size"
          }
        ],
        "return_type": {
          "type": "Image"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Generate image: checked",
        "name": "gen_image_checked",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "width"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "height"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "checks_x"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "checks_y"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "col1"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "col2"
          }
        ],
        "return_type": {
          "type": "Image"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Generate image: plain color",
        "name": "gen_image_color",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "width"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "height"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "p_color"
          }
        ],
        "return_type": {
          "type": "Image"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Generate image font atlas using chars info",
        "name": "gen_image_font_atlas",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "arguments": [
                    {
                      "type": "GlyphInfo"
                    }
                  ],
                  "type": "Const"
                }
              ],
              "type": "Ptr"
            },
            "name": "chars"
          },
          {
            "datatype": {
              "arguments": [
                {
                  "arguments": [
                    {
                      "type": "Rectangle"
                    }
                  ],
                  "type": "Ptr"
                }
              ],
              "type": "Ptr"
            },
            "name": "recs"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "glyph_count"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "font_size"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "padding"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "pack_method"
          }
        ],
        "return_type": {
          "type": "Image"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Generate image: horizontal gradient",
        "name": "gen_image_gradient_h",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "width"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "height"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "left"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "right"
          }
        ],
        "return_type": {
          "type": "Image"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Generate image: radial gradient",
        "name": "gen_image_gradient_radial",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "width"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "height"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "density"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "inner"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "outer"
          }
        ],
        "return_type": {
          "type": "Image"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Generate image: vertical gradient",
        "name": "gen_image_gradient_v",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "width"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "height"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "top"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "bottom"
          }
        ],
        "return_type": {
          "type": "Image"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Generate image: perlin noise",
        "name": "gen_image_perlin_noise",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "width"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "height"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "offset_x"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "offset_y"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "scale"
          }
        ],
        "return_type": {
          "type": "Image"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Generate image: grayscale image from text data",
        "name": "gen_image_text",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "width"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "height"
          },
          {
            "datatype": {
              "type": "str"
            },
            "name": "text"
          }
        ],
        "return_type": {
          "type": "Image"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Generate image: white noise",
        "name": "gen_image_white_noise",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "width"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "height"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "factor"
          }
        ],
        "return_type": {
          "type": "Image"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Generate cone/pyramid mesh",
        "name": "gen_mesh_cone",
        "parameters": [
          {
            "datatype": {
              "type": "float"
            },
            "name": "radius"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "height"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "slices"
          }
        ],
        "return_type": {
          "type": "Mesh"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Generate cuboid mesh",
        "name": "gen_mesh_cube",
        "parameters": [
          {
            "datatype": {
              "type": "float"
            },
            "name": "width"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "height"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "length"
          }
        ],
        "return_type": {
          "type": "Mesh"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Generate cubes-based map mesh from image data",
        "name": "gen_mesh_cubicmap",
        "parameters": [
          {
            "datatype": {
              "type": "Image"
            },
            "name": "cubicmap"
          },
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "cube_size"
          }
        ],
        "return_type": {
          "type": "Mesh"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Generate cylinder mesh",
        "name": "gen_mesh_cylinder",
        "parameters": [
          {
            "datatype": {
              "type": "float"
            },
            "name": "radius"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "height"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "slices"
          }
        ],
        "return_type": {
          "type": "Mesh"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Generate heightmap mesh from image data",
        "name": "gen_mesh_heightmap",
        "parameters": [
          {
            "datatype": {
              "type": "Image"
            },
            "name": "heightmap"
          },
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "size"
          }
        ],
        "return_type": {
          "type": "Mesh"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Generate half-sphere mesh (no bottom cap)",
        "name": "gen_mesh_hemi_sphere",
        "parameters": [
          {
            "datatype": {
              "type": "float"
            },
            "name": "radius"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "rings"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "slices"
          }
        ],
        "return_type": {
          "type": "Mesh"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Generate trefoil knot mesh",
        "name": "gen_mesh_knot",
        "parameters": [
          {
            "datatype": {
              "type": "float"
            },
            "name": "radius"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "size"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "rad_seg"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "sides"
          }
        ],
        "return_type": {
          "type": "Mesh"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Generate plane mesh (with subdivisions)",
        "name": "gen_mesh_plane",
        "parameters": [
          {
            "datatype": {
              "type": "float"
            },
            "name": "width"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "length"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "res_x"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "res_z"
          }
        ],
        "return_type": {
          "type": "Mesh"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Generate polygonal mesh",
        "name": "gen_mesh_poly",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "sides"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "radius"
          }
        ],
        "return_type": {
          "type": "Mesh"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Generate sphere mesh (standard sphere)",
        "name": "gen_mesh_sphere",
        "parameters": [
          {
            "datatype": {
              "type": "float"
            },
            "name": "radius"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "rings"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "slices"
          }
        ],
        "return_type": {
          "type": "Mesh"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Compute mesh tangents",
        "name": "gen_mesh_tangents",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "type": "Mesh"
                }
              ],
              "type": "Ptr"
            },
            "name": "mesh"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Generate torus mesh",
        "name": "gen_mesh_torus",
        "parameters": [
          {
            "datatype": {
              "type": "float"
            },
            "name": "radius"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "size"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "rad_seg"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "sides"
          }
        ],
        "return_type": {
          "type": "Mesh"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Generate GPU mipmaps for a texture",
        "name": "gen_texture_mipmaps",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "type": "Texture2D"
                }
              ],
              "type": "Ptr"
            },
            "name": "p_texture"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Get the directory if the running application (uses static string)",
        "name": "get_application_directory",
        "parameters": [],
        "return_type": {
          "arguments": [
            {
              "arguments": [
                {
                  "type": "CChar"
                }
              ],
              "type": "Const"
            }
          ],
          "type": "Ptr"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Get camera transform matrix (view matrix)",
        "name": "get_camera_matrix",
        "parameters": [
          {
            "datatype": {
              "type": "Camera"
            },
            "name": "p_camera"
          }
        ],
        "return_type": {
          "type": "Matrix"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Get camera 2d transform matrix",
        "name": "get_camera_matrix_2d",
        "parameters": [
          {
            "datatype": {
              "type": "Camera2D"
            },
            "name": "p_camera"
          }
        ],
        "return_type": {
          "type": "Matrix"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Get char pressed (unicode), call it multiple times for chars queued, returns 0 when the queue is empty",
        "name": "get_char_pressed",
        "parameters": [],
        "return_type": {
          "type": "int"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Get clipboard text content",
        "name": "get_clipboard_text",
        "parameters": [],
        "return_type": {
          "arguments": [
            {
              "arguments": [
                {
                  "type": "CChar"
                }
              ],
              "type": "Const"
            }
          ],
          "type": "Ptr"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Get next codepoint in a UTF-8 encoded string, 0x3f('?') is returned on failure",
        "name": "get_codepoint",
        "parameters": [
          {
            "datatype": {
              "type": "str"
            },
            "name": "text"
          },
          {
            "datatype": {
              "arguments": [
                {
                  "type": "CInt"
                }
              ],
              "type": "Ptr"
            },
            "name": "codepoint_size"
          }
        ],
        "return_type": {
          "type": "int"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Get total number of codepoints in a UTF-8 encoded string",
        "name": "get_codepoint_count",
        "parameters": [
          {
            "datatype": {
              "type": "str"
            },
            "name": "text"
          }
        ],
        "return_type": {
          "type": "int"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Get next codepoint in a UTF-8 encoded string, 0x3f('?') is returned on failure",
        "name": "get_codepoint_next",
        "parameters": [
          {
            "datatype": {
              "type": "str"
            },
            "name": "text"
          },
          {
            "datatype": {
              "arguments": [
                {
                  "type": "CInt"
                }
              ],
              "type": "Ptr"
            },
            "name": "codepoint_size"
          }
        ],
        "return_type": {
          "type": "int"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Get previous codepoint in a UTF-8 encoded string, 0x3f('?') is returned on failure",
        "name": "get_codepoint_previous",
        "parameters": [
          {
            "datatype": {
              "type": "str"
            },
            "name": "text"
          },
          {
            "datatype": {
              "arguments": [
                {
                  "type": "CInt"
                }
              ],
              "type": "Ptr"
            },
            "name": "codepoint_size"
          }
        ],
        "return_type": {
          "type": "int"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Get collision rectangle for two rectangles collision",
        "name": "get_collision_rec",
        "parameters": [
          {
            "datatype": {
              "type": "Rectangle"
            },
            "name": "rec1"
          },
          {
            "datatype": {
              "type": "Rectangle"
            },
            "name": "rec2"
          }
        ],
        "return_type": {
          "type": "Rectangle"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Get Color structure from hexadecimal value",
        "name": "get_color",
        "parameters": [
          {
            "datatype": {
              "type": "u32"
            },
            "name": "hex_value"
          }
        ],
        "return_type": {
          "type": "Color"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Get current connected monitor",
        "name": "get_current_monitor",
        "parameters": [],
        "return_type": {
          "type": "int"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Get full path for a given fileName with path (uses static string)",
        "name": "get_directory_path",
        "parameters": [
          {
            "datatype": {
              "type": "str"
            },
            "name": "file_path"
          }
        ],
        "return_type": {
          "arguments": [
            {
              "arguments": [
                {
                  "type": "CChar"
                }
              ],
              "type": "Const"
            }
          ],
          "type": "Ptr"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Get pointer to extension for a filename string (includes dot: '.png')",
        "name": "get_file_extension",
        "parameters": [
          {
            "datatype": {
              "type": "str"
            },
            "name": "file_name"
          }
        ],
        "return_type": {
          "arguments": [
            {
              "arguments": [
                {
                  "type": "CChar"
                }
              ],
              "type": "Const"
            }
          ],
          "type": "Ptr"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Get file length in bytes (NOTE: GetFileSize() conflicts with windows.h)",
        "name": "get_file_length",
        "parameters": [
          {
            "datatype": {
              "type": "str"
            },
            "name": "file_name"
          }
        ],
        "return_type": {
          "type": "int"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Get file modification time (last write time)",
        "name": "get_file_mod_time",
        "parameters": [
          {
            "datatype": {
              "type": "str"
            },
            "name": "file_name"
          }
        ],
        "return_type": {
          "type": "i64"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Get pointer to filename for a path string",
        "name": "get_file_name",
        "parameters": [
          {
            "datatype": {
              "type": "str"
            },
            "name": "file_path"
          }
        ],
        "return_type": {
          "arguments": [
            {
              "arguments": [
                {
                  "type": "CChar"
                }
              ],
              "type": "Const"
            }
          ],
          "type": "Ptr"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Get filename string without extension (uses static string)",
        "name": "get_file_name_without_ext",
        "parameters": [
          {
            "datatype": {
              "type": "str"
            },
            "name": "file_path"
          }
        ],
        "return_type": {
          "arguments": [
            {
              "arguments": [
                {
                  "type": "CChar"
                }
              ],
              "type": "Const"
            }
          ],
          "type": "Ptr"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Get the default Font",
        "name": "get_font_default",
        "parameters": [],
        "return_type": {
          "type": "Font"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Get current FPS",
        "name": "get_fps",
        "parameters": [],
        "return_type": {
          "type": "int"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Get time in seconds for last frame drawn (delta time)",
        "name": "get_frame_time",
        "parameters": [],
        "return_type": {
          "type": "float"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Get gamepad axis count for a gamepad",
        "name": "get_gamepad_axis_count",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "gamepad"
          }
        ],
        "return_type": {
          "type": "int"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Get axis movement value for a gamepad axis",
        "name": "get_gamepad_axis_movement",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "gamepad"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "axis"
          }
        ],
        "return_type": {
          "type": "float"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Get the last gamepad button pressed",
        "name": "get_gamepad_button_pressed",
        "parameters": [],
        "return_type": {
          "type": "int"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Get gamepad internal name id",
        "name": "get_gamepad_name",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "gamepad"
          }
        ],
        "return_type": {
          "arguments": [
            {
              "arguments": [
                {
                  "type": "CChar"
                }
              ],
              "type": "Const"
            }
          ],
          "type": "Ptr"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Get latest detected gesture",
        "name": "get_gesture_detected",
        "parameters": [],
        "return_type": {
          "type": "int"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Get gesture drag angle",
        "name": "get_gesture_drag_angle",
        "parameters": [],
        "return_type": {
          "type": "float"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Get gesture drag vector",
        "name": "get_gesture_drag_vector",
        "parameters": [],
        "return_type": {
          "type": "Vector2"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Get gesture hold time in milliseconds",
        "name": "get_gesture_hold_duration",
        "parameters": [],
        "return_type": {
          "type": "float"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Get gesture pinch angle",
        "name": "get_gesture_pinch_angle",
        "parameters": [],
        "return_type": {
          "type": "float"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Get gesture pinch delta",
        "name": "get_gesture_pinch_vector",
        "parameters": [],
        "return_type": {
          "type": "Vector2"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Get glyph rectangle in font atlas for a codepoint (unicode character), fallback to '?' if not found",
        "name": "get_glyph_atlas_rec",
        "parameters": [
          {
            "datatype": {
              "type": "Font"
            },
            "name": "p_font"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "codepoint"
          }
        ],
        "return_type": {
          "type": "Rectangle"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Get glyph index position in font for a codepoint (unicode character), fallback to '?' if not found",
        "name": "get_glyph_index",
        "parameters": [
          {
            "datatype": {
              "type": "Font"
            },
            "name": "p_font"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "codepoint"
          }
        ],
        "return_type": {
          "type": "int"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Get glyph font info data for a codepoint (unicode character), fallback to '?' if not found",
        "name": "get_glyph_info",
        "parameters": [
          {
            "datatype": {
              "type": "Font"
            },
            "name": "p_font"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "codepoint"
          }
        ],
        "return_type": {
          "type": "GlyphInfo"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Get image alpha border rectangle",
        "name": "get_image_alpha_border",
        "parameters": [
          {
            "datatype": {
              "type": "Image"
            },
            "name": "p_image"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "threshold"
          }
        ],
        "return_type": {
          "type": "Rectangle"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Get image pixel color at (x, y) position",
        "name": "get_image_color",
        "parameters": [
          {
            "datatype": {
              "type": "Image"
            },
            "name": "p_image"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "x"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "y"
          }
        ],
        "return_type": {
          "type": "Color"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Get key pressed (keycode), call it multiple times for keys queued, returns 0 when the queue is empty",
        "name": "get_key_pressed",
        "parameters": [],
        "return_type": {
          "type": "int"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Compute mesh bounding box limits",
        "name": "get_mesh_bounding_box",
        "parameters": [
          {
            "datatype": {
              "type": "Mesh"
            },
            "name": "mesh"
          }
        ],
        "return_type": {
          "type": "BoundingBox"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Compute model bounding box limits (considers all meshes)",
        "name": "get_model_bounding_box",
        "parameters": [
          {
            "datatype": {
              "type": "Model"
            },
            "name": "model"
          }
        ],
        "return_type": {
          "type": "BoundingBox"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Get number of connected monitors",
        "name": "get_monitor_count",
        "parameters": [],
        "return_type": {
          "type": "int"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Get specified monitor height (current video mode used by monitor)",
        "name": "get_monitor_height",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "monitor"
          }
        ],
        "return_type": {
          "type": "int"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Get the human-readable, UTF-8 encoded name of the primary monitor",
        "name": "get_monitor_name",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "monitor"
          }
        ],
        "return_type": {
          "arguments": [
            {
              "arguments": [
                {
                  "type": "CChar"
                }
              ],
              "type": "Const"
            }
          ],
          "type": "Ptr"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Get specified monitor physical height in millimetres",
        "name": "get_monitor_physical_height",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "monitor"
          }
        ],
        "return_type": {
          "type": "int"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Get specified monitor physical width in millimetres",
        "name": "get_monitor_physical_width",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "monitor"
          }
        ],
        "return_type": {
          "type": "int"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Get specified monitor position",
        "name": "get_monitor_position",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "monitor"
          }
        ],
        "return_type": {
          "type": "Vector2"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Get specified monitor refresh rate",
        "name": "get_monitor_refresh_rate",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "monitor"
          }
        ],
        "return_type": {
          "type": "int"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Get specified monitor width (current video mode used by monitor)",
        "name": "get_monitor_width",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "monitor"
          }
        ],
        "return_type": {
          "type": "int"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Get mouse delta between frames",
        "name": "get_mouse_delta",
        "parameters": [],
        "return_type": {
          "type": "Vector2"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Get mouse position XY",
        "name": "get_mouse_position",
        "parameters": [],
        "return_type": {
          "type": "Vector2"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Get a ray trace from mouse position",
        "name": "get_mouse_ray",
        "parameters": [
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "mouse_position"
          },
          {
            "datatype": {
              "type": "Camera"
            },
            "name": "p_camera"
          }
        ],
        "return_type": {
          "type": "Ray"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Get mouse wheel movement for X or Y, whichever is larger",
        "name": "get_mouse_wheel_move",
        "parameters": [],
        "return_type": {
          "type": "float"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Get mouse wheel movement for both X and Y",
        "name": "get_mouse_wheel_move_v",
        "parameters": [],
        "return_type": {
          "type": "Vector2"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Get mouse position X",
        "name": "get_mouse_x",
        "parameters": [],
        "return_type": {
          "type": "int"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Get mouse position Y",
        "name": "get_mouse_y",
        "parameters": [],
        "return_type": {
          "type": "int"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Get music time length (in seconds)",
        "name": "get_music_time_length",
        "parameters": [
          {
            "datatype": {
              "type": "Music"
            },
            "name": "p_music"
          }
        ],
        "return_type": {
          "type": "float"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Get current music time played (in seconds)",
        "name": "get_music_time_played",
        "parameters": [
          {
            "datatype": {
              "type": "Music"
            },
            "name": "p_music"
          }
        ],
        "return_type": {
          "type": "float"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Get Color from a source pixel pointer of certain format",
        "name": "get_pixel_color",
        "parameters": [
          {
            "datatype": {
              "type": "AnyPtr"
            },
            "name": "src_ptr"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "format"
          }
        ],
        "return_type": {
          "type": "Color"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Get pixel data size in bytes for certain format",
        "name": "get_pixel_data_size",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "width"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "height"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "format"
          }
        ],
        "return_type": {
          "type": "int"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Get previous directory path for a given path (uses static string)",
        "name": "get_prev_directory_path",
        "parameters": [
          {
            "datatype": {
              "type": "str"
            },
            "name": "dir_path"
          }
        ],
        "return_type": {
          "arguments": [
            {
              "arguments": [
                {
                  "type": "CChar"
                }
              ],
              "type": "Const"
            }
          ],
          "type": "Ptr"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Get a random value between min and max (both included)",
        "name": "get_random_value",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "min"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "max"
          }
        ],
        "return_type": {
          "type": "int"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Get collision info between ray and box",
        "name": "get_ray_collision_box",
        "parameters": [
          {
            "datatype": {
              "type": "Ray"
            },
            "name": "p_ray"
          },
          {
            "datatype": {
              "type": "BoundingBox"
            },
            "name": "box"
          }
        ],
        "return_type": {
          "type": "RayCollision"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Get collision info between ray and mesh",
        "name": "get_ray_collision_mesh",
        "parameters": [
          {
            "datatype": {
              "type": "Ray"
            },
            "name": "p_ray"
          },
          {
            "datatype": {
              "type": "Mesh"
            },
            "name": "mesh"
          },
          {
            "datatype": {
              "type": "Matrix"
            },
            "name": "p_transform"
          }
        ],
        "return_type": {
          "type": "RayCollision"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Get collision info between ray and quad",
        "name": "get_ray_collision_quad",
        "parameters": [
          {
            "datatype": {
              "type": "Ray"
            },
            "name": "p_ray"
          },
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "p1"
          },
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "p2"
          },
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "p3"
          },
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "p4"
          }
        ],
        "return_type": {
          "type": "RayCollision"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Get collision info between ray and sphere",
        "name": "get_ray_collision_sphere",
        "parameters": [
          {
            "datatype": {
              "type": "Ray"
            },
            "name": "p_ray"
          },
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "center"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "radius"
          }
        ],
        "return_type": {
          "type": "RayCollision"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Get collision info between ray and triangle",
        "name": "get_ray_collision_triangle",
        "parameters": [
          {
            "datatype": {
              "type": "Ray"
            },
            "name": "p_ray"
          },
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "p1"
          },
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "p2"
          },
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "p3"
          }
        ],
        "return_type": {
          "type": "RayCollision"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Get current render height (it considers HiDPI)",
        "name": "get_render_height",
        "parameters": [],
        "return_type": {
          "type": "int"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Get current render width (it considers HiDPI)",
        "name": "get_render_width",
        "parameters": [],
        "return_type": {
          "type": "int"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Get current screen height",
        "name": "get_screen_height",
        "parameters": [],
        "return_type": {
          "type": "int"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Get the world space position for a 2d camera screen space position",
        "name": "get_screen_to_world_2d",
        "parameters": [
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "position"
          },
          {
            "datatype": {
              "type": "Camera2D"
            },
            "name": "p_camera"
          }
        ],
        "return_type": {
          "type": "Vector2"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Get current screen width",
        "name": "get_screen_width",
        "parameters": [],
        "return_type": {
          "type": "int"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Get shader uniform location",
        "name": "get_shader_location",
        "parameters": [
          {
            "datatype": {
              "type": "Shader"
            },
            "name": "shader"
          },
          {
            "datatype": {
              "type": "str"
            },
            "name": "uniform_name"
          }
        ],
        "return_type": {
          "type": "int"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Get shader attribute location",
        "name": "get_shader_location_attrib",
        "parameters": [
          {
            "datatype": {
              "type": "Shader"
            },
            "name": "shader"
          },
          {
            "datatype": {
              "type": "str"
            },
            "name": "attrib_name"
          }
        ],
        "return_type": {
          "type": "int"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Get elapsed time in seconds since InitWindow()",
        "name": "get_time",
        "parameters": [],
        "return_type": {
          "type": "f64"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Get number of touch points",
        "name": "get_touch_point_count",
        "parameters": [],
        "return_type": {
          "type": "int"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Get touch point identifier for given index",
        "name": "get_touch_point_id",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "index"
          }
        ],
        "return_type": {
          "type": "int"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Get touch position XY for a touch point index (relative to screen size)",
        "name": "get_touch_position",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "index"
          }
        ],
        "return_type": {
          "type": "Vector2"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Get touch position X for touch point 0 (relative to screen size)",
        "name": "get_touch_x",
        "parameters": [],
        "return_type": {
          "type": "int"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Get touch position Y for touch point 0 (relative to screen size)",
        "name": "get_touch_y",
        "parameters": [],
        "return_type": {
          "type": "int"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Get native window handle",
        "name": "get_window_handle",
        "parameters": [],
        "return_type": {
          "type": "AnyPtr"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Get window position XY on monitor",
        "name": "get_window_position",
        "parameters": [],
        "return_type": {
          "type": "Vector2"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Get window scale DPI factor",
        "name": "get_window_scale_dpi",
        "parameters": [],
        "return_type": {
          "type": "Vector2"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Get current working directory (uses static string)",
        "name": "get_working_directory",
        "parameters": [],
        "return_type": {
          "arguments": [
            {
              "arguments": [
                {
                  "type": "CChar"
                }
              ],
              "type": "Const"
            }
          ],
          "type": "Ptr"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Get the screen space position for a 3d world space position",
        "name": "get_world_to_screen",
        "parameters": [
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "position"
          },
          {
            "datatype": {
              "type": "Camera"
            },
            "name": "p_camera"
          }
        ],
        "return_type": {
          "type": "Vector2"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Get the screen space position for a 2d camera world space position",
        "name": "get_world_to_screen_2d",
        "parameters": [
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "position"
          },
          {
            "datatype": {
              "type": "Camera2D"
            },
            "name": "p_camera"
          }
        ],
        "return_type": {
          "type": "Vector2"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Get size position for a 3d world space position",
        "name": "get_world_to_screen_ex",
        "parameters": [
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "position"
          },
          {
            "datatype": {
              "type": "Camera"
            },
            "name": "p_camera"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "width"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "height"
          }
        ],
        "return_type": {
          "type": "Vector2"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Factory function for: GlyphInfo",
        "name": "glyph_info",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "value"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "offset_x"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "offset_y"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "advance_x"
          },
          {
            "datatype": {
              "type": "Image"
            },
            "name": "p_image"
          }
        ],
        "return_type": {
          "type": "GlyphInfo"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Hides cursor",
        "name": "hide_cursor",
        "parameters": [],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Factory function for: Image",
        "name": "image",
        "parameters": [
          {
            "datatype": {
              "type": "AnyPtr"
            },
            "name": "data"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "width"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "height"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "mipmaps"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "format"
          }
        ],
        "return_type": {
          "type": "Image"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Clear alpha channel to desired color",
        "name": "image_alpha_clear",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "type": "Image"
                }
              ],
              "type": "Ptr"
            },
            "name": "p_image"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "p_color"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "threshold"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Crop image depending on alpha value",
        "name": "image_alpha_crop",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "type": "Image"
                }
              ],
              "type": "Ptr"
            },
            "name": "p_image"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "threshold"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Apply alpha mask to image",
        "name": "image_alpha_mask",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "type": "Image"
                }
              ],
              "type": "Ptr"
            },
            "name": "p_image"
          },
          {
            "datatype": {
              "type": "Image"
            },
            "name": "alpha_mask"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Premultiply alpha channel",
        "name": "image_alpha_premultiply",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "type": "Image"
                }
              ],
              "type": "Ptr"
            },
            "name": "p_image"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Apply Gaussian blur using a box blur approximation",
        "name": "image_blur_gaussian",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "type": "Image"
                }
              ],
              "type": "Ptr"
            },
            "name": "p_image"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "blur_size"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Clear image background with given color",
        "name": "image_clear_background",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "type": "Image"
                }
              ],
              "type": "Ptr"
            },
            "name": "dst"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "p_color"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Modify image color: brightness (-255 to 255)",
        "name": "image_color_brightness",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "type": "Image"
                }
              ],
              "type": "Ptr"
            },
            "name": "p_image"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "brightness"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Modify image color: contrast (-100 to 100)",
        "name": "image_color_contrast",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "type": "Image"
                }
              ],
              "type": "Ptr"
            },
            "name": "p_image"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "contrast"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Modify image color: grayscale",
        "name": "image_color_grayscale",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "type": "Image"
                }
              ],
              "type": "Ptr"
            },
            "name": "p_image"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Modify image color: invert",
        "name": "image_color_invert",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "type": "Image"
                }
              ],
              "type": "Ptr"
            },
            "name": "p_image"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Modify image color: replace color",
        "name": "image_color_replace",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "type": "Image"
                }
              ],
              "type": "Ptr"
            },
            "name": "p_image"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "p_color"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "replace"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Modify image color: tint",
        "name": "image_color_tint",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "type": "Image"
                }
              ],
              "type": "Ptr"
            },
            "name": "p_image"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "p_color"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Create an image duplicate (useful for transformations)",
        "name": "image_copy",
        "parameters": [
          {
            "datatype": {
              "type": "Image"
            },
            "name": "p_image"
          }
        ],
        "return_type": {
          "type": "Image"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Crop an image to a defined rectangle",
        "name": "image_crop",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "type": "Image"
                }
              ],
              "type": "Ptr"
            },
            "name": "p_image"
          },
          {
            "datatype": {
              "type": "Rectangle"
            },
            "name": "crop"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Dither image data to 16bpp or lower (Floyd-Steinberg dithering)",
        "name": "image_dither",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "type": "Image"
                }
              ],
              "type": "Ptr"
            },
            "name": "p_image"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "r_bpp"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "g_bpp"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "b_bpp"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "a_bpp"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Draw a source image within a destination image (tint applied to source)",
        "name": "image_draw",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "type": "Image"
                }
              ],
              "type": "Ptr"
            },
            "name": "dst"
          },
          {
            "datatype": {
              "type": "Image"
            },
            "name": "src"
          },
          {
            "datatype": {
              "type": "Rectangle"
            },
            "name": "src_rec"
          },
          {
            "datatype": {
              "type": "Rectangle"
            },
            "name": "dst_rec"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "tint"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Draw a filled circle within an image",
        "name": "image_draw_circle",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "type": "Image"
                }
              ],
              "type": "Ptr"
            },
            "name": "dst"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "center_x"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "center_y"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "radius"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "p_color"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Draw circle outline within an image",
        "name": "image_draw_circle_lines",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "type": "Image"
                }
              ],
              "type": "Ptr"
            },
            "name": "dst"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "center_x"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "center_y"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "radius"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "p_color"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Draw circle outline within an image (Vector version)",
        "name": "image_draw_circle_lines_v",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "type": "Image"
                }
              ],
              "type": "Ptr"
            },
            "name": "dst"
          },
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "center"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "radius"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "p_color"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Draw a filled circle within an image (Vector version)",
        "name": "image_draw_circle_v",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "type": "Image"
                }
              ],
              "type": "Ptr"
            },
            "name": "dst"
          },
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "center"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "radius"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "p_color"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Draw line within an image",
        "name": "image_draw_line",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "type": "Image"
                }
              ],
              "type": "Ptr"
            },
            "name": "dst"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "start_pos_x"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "start_pos_y"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "end_pos_x"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "end_pos_y"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "p_color"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Draw line within an image (Vector version)",
        "name": "image_draw_line_v",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "type": "Image"
                }
              ],
              "type": "Ptr"
            },
            "name": "dst"
          },
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "start"
          },
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "end"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "p_color"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Draw pixel within an image",
        "name": "image_draw_pixel",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "type": "Image"
                }
              ],
              "type": "Ptr"
            },
            "name": "dst"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "pos_x"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "pos_y"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "p_color"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Draw pixel within an image (Vector version)",
        "name": "image_draw_pixel_v",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "type": "Image"
                }
              ],
              "type": "Ptr"
            },
            "name": "dst"
          },
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "position"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "p_color"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Draw rectangle within an image",
        "name": "image_draw_rectangle",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "type": "Image"
                }
              ],
              "type": "Ptr"
            },
            "name": "dst"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "pos_x"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "pos_y"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "width"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "height"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "p_color"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Draw rectangle lines within an image",
        "name": "image_draw_rectangle_lines",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "type": "Image"
                }
              ],
              "type": "Ptr"
            },
            "name": "dst"
          },
          {
            "datatype": {
              "type": "Rectangle"
            },
            "name": "rec"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "thick"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "p_color"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Draw rectangle within an image",
        "name": "image_draw_rectangle_rec",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "type": "Image"
                }
              ],
              "type": "Ptr"
            },
            "name": "dst"
          },
          {
            "datatype": {
              "type": "Rectangle"
            },
            "name": "rec"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "p_color"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Draw rectangle within an image (Vector version)",
        "name": "image_draw_rectangle_v",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "type": "Image"
                }
              ],
              "type": "Ptr"
            },
            "name": "dst"
          },
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "position"
          },
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "size"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "p_color"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Draw text (using default font) within an image (destination)",
        "name": "image_draw_text",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "type": "Image"
                }
              ],
              "type": "Ptr"
            },
            "name": "dst"
          },
          {
            "datatype": {
              "type": "str"
            },
            "name": "text"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "pos_x"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "pos_y"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "font_size"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "p_color"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Draw text (custom sprite font) within an image (destination)",
        "name": "image_draw_text_ex",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "type": "Image"
                }
              ],
              "type": "Ptr"
            },
            "name": "dst"
          },
          {
            "datatype": {
              "type": "Font"
            },
            "name": "p_font"
          },
          {
            "datatype": {
              "type": "str"
            },
            "name": "text"
          },
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "position"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "font_size"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "spacing"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "tint"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Flip image horizontally",
        "name": "image_flip_horizontal",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "type": "Image"
                }
              ],
              "type": "Ptr"
            },
            "name": "p_image"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Flip image vertically",
        "name": "image_flip_vertical",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "type": "Image"
                }
              ],
              "type": "Ptr"
            },
            "name": "p_image"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Convert image data to desired format",
        "name": "image_format",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "type": "Image"
                }
              ],
              "type": "Ptr"
            },
            "name": "p_image"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "new_format"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Create an image from another image piece",
        "name": "image_from_image",
        "parameters": [
          {
            "datatype": {
              "type": "Image"
            },
            "name": "p_image"
          },
          {
            "datatype": {
              "type": "Rectangle"
            },
            "name": "rec"
          }
        ],
        "return_type": {
          "type": "Image"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Compute all mipmap levels for a provided image",
        "name": "image_mipmaps",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "type": "Image"
                }
              ],
              "type": "Ptr"
            },
            "name": "p_image"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Resize image (Bicubic scaling algorithm)",
        "name": "image_resize",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "type": "Image"
                }
              ],
              "type": "Ptr"
            },
            "name": "p_image"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "new_width"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "new_height"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Resize canvas and fill with color",
        "name": "image_resize_canvas",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "type": "Image"
                }
              ],
              "type": "Ptr"
            },
            "name": "p_image"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "new_width"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "new_height"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "offset_x"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "offset_y"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "fill"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Resize image (Nearest-Neighbor scaling algorithm)",
        "name": "image_resize_nn",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "type": "Image"
                }
              ],
              "type": "Ptr"
            },
            "name": "p_image"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "new_width"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "new_height"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Rotate image counter-clockwise 90deg",
        "name": "image_rotate_ccw",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "type": "Image"
                }
              ],
              "type": "Ptr"
            },
            "name": "p_image"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Rotate image clockwise 90deg",
        "name": "image_rotate_cw",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "type": "Image"
                }
              ],
              "type": "Ptr"
            },
            "name": "p_image"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Create an image from text (default font)",
        "name": "image_text",
        "parameters": [
          {
            "datatype": {
              "type": "str"
            },
            "name": "text"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "font_size"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "p_color"
          }
        ],
        "return_type": {
          "type": "Image"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Create an image from text (custom sprite font)",
        "name": "image_text_ex",
        "parameters": [
          {
            "datatype": {
              "type": "Font"
            },
            "name": "p_font"
          },
          {
            "datatype": {
              "type": "str"
            },
            "name": "text"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "font_size"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "spacing"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "tint"
          }
        ],
        "return_type": {
          "type": "Image"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Convert image to POT (power-of-two)",
        "name": "image_to_pot",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "type": "Image"
                }
              ],
              "type": "Ptr"
            },
            "name": "p_image"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "fill"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Initialize audio device and context",
        "name": "init_audio_device",
        "parameters": [],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Initialize window and OpenGL context",
        "name": "init_window",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "width"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "height"
          },
          {
            "datatype": {
              "type": "str"
            },
            "name": "title"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Check if audio device has been initialized successfully",
        "name": "is_audio_device_ready",
        "parameters": [],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Check if audio stream is playing",
        "name": "is_audio_stream_playing",
        "parameters": [
          {
            "datatype": {
              "type": "AudioStream"
            },
            "name": "stream"
          }
        ],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Check if any audio stream buffers requires refill",
        "name": "is_audio_stream_processed",
        "parameters": [
          {
            "datatype": {
              "type": "AudioStream"
            },
            "name": "stream"
          }
        ],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Checks if an audio stream is ready",
        "name": "is_audio_stream_ready",
        "parameters": [
          {
            "datatype": {
              "type": "AudioStream"
            },
            "name": "stream"
          }
        ],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Check if cursor is not visible",
        "name": "is_cursor_hidden",
        "parameters": [],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Check if cursor is on the screen",
        "name": "is_cursor_on_screen",
        "parameters": [],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Check if a file has been dropped into window",
        "name": "is_file_dropped",
        "parameters": [],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Check file extension (including point: .png, .wav)",
        "name": "is_file_extension",
        "parameters": [
          {
            "datatype": {
              "type": "str"
            },
            "name": "file_name"
          },
          {
            "datatype": {
              "type": "str"
            },
            "name": "ext"
          }
        ],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Check if a font is ready",
        "name": "is_font_ready",
        "parameters": [
          {
            "datatype": {
              "type": "Font"
            },
            "name": "p_font"
          }
        ],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Check if a gamepad is available",
        "name": "is_gamepad_available",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "gamepad"
          }
        ],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Check if a gamepad button is being pressed",
        "name": "is_gamepad_button_down",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "gamepad"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "button"
          }
        ],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Check if a gamepad button has been pressed once",
        "name": "is_gamepad_button_pressed",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "gamepad"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "button"
          }
        ],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Check if a gamepad button has been released once",
        "name": "is_gamepad_button_released",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "gamepad"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "button"
          }
        ],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Check if a gamepad button is NOT being pressed",
        "name": "is_gamepad_button_up",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "gamepad"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "button"
          }
        ],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Check if a gesture have been detected",
        "name": "is_gesture_detected",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "gesture"
          }
        ],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Check if an image is ready",
        "name": "is_image_ready",
        "parameters": [
          {
            "datatype": {
              "type": "Image"
            },
            "name": "p_image"
          }
        ],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Check if a key is being pressed",
        "name": "is_key_down",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "key"
          }
        ],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Check if a key has been pressed once",
        "name": "is_key_pressed",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "key"
          }
        ],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Check if a key has been released once",
        "name": "is_key_released",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "key"
          }
        ],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Check if a key is NOT being pressed",
        "name": "is_key_up",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "key"
          }
        ],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Check if a material is ready",
        "name": "is_material_ready",
        "parameters": [
          {
            "datatype": {
              "type": "Material"
            },
            "name": "material"
          }
        ],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Check model animation skeleton match",
        "name": "is_model_animation_valid",
        "parameters": [
          {
            "datatype": {
              "type": "Model"
            },
            "name": "model"
          },
          {
            "datatype": {
              "type": "ModelAnimation"
            },
            "name": "anim"
          }
        ],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Check if a model is ready",
        "name": "is_model_ready",
        "parameters": [
          {
            "datatype": {
              "type": "Model"
            },
            "name": "model"
          }
        ],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Check if a mouse button is being pressed",
        "name": "is_mouse_button_down",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "button"
          }
        ],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Check if a mouse button has been pressed once",
        "name": "is_mouse_button_pressed",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "button"
          }
        ],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Check if a mouse button has been released once",
        "name": "is_mouse_button_released",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "button"
          }
        ],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Check if a mouse button is NOT being pressed",
        "name": "is_mouse_button_up",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "button"
          }
        ],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Checks if a music stream is ready",
        "name": "is_music_ready",
        "parameters": [
          {
            "datatype": {
              "type": "Music"
            },
            "name": "p_music"
          }
        ],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Check if music is playing",
        "name": "is_music_stream_playing",
        "parameters": [
          {
            "datatype": {
              "type": "Music"
            },
            "name": "p_music"
          }
        ],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Check if a given path is a file or a directory",
        "name": "is_path_file",
        "parameters": [
          {
            "datatype": {
              "type": "str"
            },
            "name": "path"
          }
        ],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Check if a render texture is ready",
        "name": "is_render_texture_ready",
        "parameters": [
          {
            "datatype": {
              "type": "RenderTexture2D"
            },
            "name": "target"
          }
        ],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Check if a shader is ready",
        "name": "is_shader_ready",
        "parameters": [
          {
            "datatype": {
              "type": "Shader"
            },
            "name": "shader"
          }
        ],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Check if a sound is currently playing",
        "name": "is_sound_playing",
        "parameters": [
          {
            "datatype": {
              "type": "Sound"
            },
            "name": "p_sound"
          }
        ],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Checks if a sound is ready",
        "name": "is_sound_ready",
        "parameters": [
          {
            "datatype": {
              "type": "Sound"
            },
            "name": "p_sound"
          }
        ],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Check if a texture is ready",
        "name": "is_texture_ready",
        "parameters": [
          {
            "datatype": {
              "type": "Texture2D"
            },
            "name": "p_texture"
          }
        ],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Checks if wave data is ready",
        "name": "is_wave_ready",
        "parameters": [
          {
            "datatype": {
              "type": "Wave"
            },
            "name": "p_wave"
          }
        ],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Check if window is currently focused (only PLATFORM_DESKTOP)",
        "name": "is_window_focused",
        "parameters": [],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Check if window is currently fullscreen",
        "name": "is_window_fullscreen",
        "parameters": [],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Check if window is currently hidden (only PLATFORM_DESKTOP)",
        "name": "is_window_hidden",
        "parameters": [],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Check if window is currently maximized (only PLATFORM_DESKTOP)",
        "name": "is_window_maximized",
        "parameters": [],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Check if window is currently minimized (only PLATFORM_DESKTOP)",
        "name": "is_window_minimized",
        "parameters": [],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Check if window has been initialized successfully",
        "name": "is_window_ready",
        "parameters": [],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Check if window has been resized last frame",
        "name": "is_window_resized",
        "parameters": [],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Check if one specific window flag is enabled",
        "name": "is_window_state",
        "parameters": [
          {
            "datatype": {
              "type": "u32"
            },
            "name": "flag"
          }
        ],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Load audio stream (to stream raw audio pcm data)",
        "name": "load_audio_stream",
        "parameters": [
          {
            "datatype": {
              "type": "u32"
            },
            "name": "sample_rate"
          },
          {
            "datatype": {
              "type": "u32"
            },
            "name": "sample_size"
          },
          {
            "datatype": {
              "type": "u32"
            },
            "name": "channels"
          }
        ],
        "return_type": {
          "type": "AudioStream"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Load all codepoints from a UTF-8 text string, codepoints count returned by parameter",
        "name": "load_codepoints",
        "parameters": [
          {
            "datatype": {
              "type": "str"
            },
            "name": "text"
          },
          {
            "datatype": {
              "arguments": [
                {
                  "type": "CInt"
                }
              ],
              "type": "Ptr"
            },
            "name": "count"
          }
        ],
        "return_type": {
          "arguments": [
            {
              "type": "CInt"
            }
          ],
          "type": "Ptr"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Load directory filepaths",
        "name": "load_directory_files",
        "parameters": [
          {
            "datatype": {
              "type": "str"
            },
            "name": "dir_path"
          }
        ],
        "return_type": {
          "type": "FilePathList"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Load directory filepaths with extension filtering and recursive directory scan",
        "name": "load_directory_files_ex",
        "parameters": [
          {
            "datatype": {
              "type": "str"
            },
            "name": "base_path"
          },
          {
            "datatype": {
              "type": "str"
            },
            "name": "filter"
          },
          {
            "datatype": {
              "type": "bool"
            },
            "name": "scan_subdirs"
          }
        ],
        "return_type": {
          "type": "FilePathList"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Load dropped filepaths",
        "name": "load_dropped_files",
        "parameters": [],
        "return_type": {
          "type": "FilePathList"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Load file data as byte array (read)",
        "name": "load_file_data",
        "parameters": [
          {
            "datatype": {
              "type": "str"
            },
            "name": "file_name"
          },
          {
            "datatype": {
              "arguments": [
                {
                  "type": "CUInt"
                }
              ],
              "type": "Ptr"
            },
            "name": "bytes_read"
          }
        ],
        "return_type": {
          "arguments": [
            {
              "type": "CUChar"
            }
          ],
          "type": "Ptr"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Load text data from file (read), returns a '\\0' terminated string",
        "name": "load_file_text",
        "parameters": [
          {
            "datatype": {
              "type": "str"
            },
            "name": "file_name"
          }
        ],
        "return_type": {
          "type": "CStr"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Load font from file into GPU memory (VRAM)",
        "name": "load_font",
        "parameters": [
          {
            "datatype": {
              "type": "str"
            },
            "name": "file_name"
          }
        ],
        "return_type": {
          "type": "Font"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Load font data for further use",
        "name": "load_font_data",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "arguments": [
                    {
                      "type": "CUChar"
                    }
                  ],
                  "type": "Const"
                }
              ],
              "type": "Ptr"
            },
            "name": "file_data"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "data_size"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "font_size"
          },
          {
            "datatype": {
              "arguments": [
                {
                  "type": "CInt"
                }
              ],
              "type": "Ptr"
            },
            "name": "font_chars"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "glyph_count"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "type"
          }
        ],
        "return_type": {
          "arguments": [
            {
              "type": "GlyphInfo"
            }
          ],
          "type": "Ptr"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Load font from file with extended parameters, use NULL for fontChars and 0 for glyphCount to load the default character set",
        "name": "load_font_ex",
        "parameters": [
          {
            "datatype": {
              "type": "str"
            },
            "name": "file_name"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "font_size"
          },
          {
            "datatype": {
              "arguments": [
                {
                  "type": "CInt"
                }
              ],
              "type": "Ptr"
            },
            "name": "font_chars"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "glyph_count"
          }
        ],
        "return_type": {
          "type": "Font"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Load font from Image (XNA style)",
        "name": "load_font_from_image",
        "parameters": [
          {
            "datatype": {
              "type": "Image"
            },
            "name": "p_image"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "key"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "first_char"
          }
        ],
        "return_type": {
          "type": "Font"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Load font from memory buffer, fileType refers to extension: i.e. '.ttf'",
        "name": "load_font_from_memory",
        "parameters": [
          {
            "datatype": {
              "type": "str"
            },
            "name": "file_type"
          },
          {
            "datatype": {
              "arguments": [
                {
                  "arguments": [
                    {
                      "type": "CUChar"
                    }
                  ],
                  "type": "Const"
                }
              ],
              "type": "Ptr"
            },
            "name": "file_data"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "data_size"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "font_size"
          },
          {
            "datatype": {
              "arguments": [
                {
                  "type": "CInt"
                }
              ],
              "type": "Ptr"
            },
            "name": "font_chars"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "glyph_count"
          }
        ],
        "return_type": {
          "type": "Font"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Load image from file into CPU memory (RAM)",
        "name": "load_image",
        "parameters": [
          {
            "datatype": {
              "type": "str"
            },
            "name": "file_name"
          }
        ],
        "return_type": {
          "type": "Image"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Load image sequence from file (frames appended to image.data)",
        "name": "load_image_anim",
        "parameters": [
          {
            "datatype": {
              "type": "str"
            },
            "name": "file_name"
          },
          {
            "datatype": {
              "arguments": [
                {
                  "type": "CInt"
                }
              ],
              "type": "Ptr"
            },
            "name": "frames"
          }
        ],
        "return_type": {
          "type": "Image"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Load color data from image as a Color array (RGBA - 32bit)",
        "name": "load_image_colors",
        "parameters": [
          {
            "datatype": {
              "type": "Image"
            },
            "name": "p_image"
          }
        ],
        "return_type": {
          "arguments": [
            {
              "type": "Color"
            }
          ],
          "type": "Ptr"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Load image from memory buffer, fileType refers to extension: i.e. '.png'",
        "name": "load_image_from_memory",
        "parameters": [
          {
            "datatype": {
              "type": "str"
            },
            "name": "file_type"
          },
          {
            "datatype": {
              "arguments": [
                {
                  "arguments": [
                    {
                      "type": "CUChar"
                    }
                  ],
                  "type": "Const"
                }
              ],
              "type": "Ptr"
            },
            "name": "file_data"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "data_size"
          }
        ],
        "return_type": {
          "type": "Image"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Load image from screen buffer and (screenshot)",
        "name": "load_image_from_screen",
        "parameters": [],
        "return_type": {
          "type": "Image"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Load image from GPU texture data",
        "name": "load_image_from_texture",
        "parameters": [
          {
            "datatype": {
              "type": "Texture2D"
            },
            "name": "p_texture"
          }
        ],
        "return_type": {
          "type": "Image"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Load colors palette from image as a Color array (RGBA - 32bit)",
        "name": "load_image_palette",
        "parameters": [
          {
            "datatype": {
              "type": "Image"
            },
            "name": "p_image"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "max_palette_size"
          },
          {
            "datatype": {
              "arguments": [
                {
                  "type": "CInt"
                }
              ],
              "type": "Ptr"
            },
            "name": "color_count"
          }
        ],
        "return_type": {
          "arguments": [
            {
              "type": "Color"
            }
          ],
          "type": "Ptr"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Load image from RAW file data",
        "name": "load_image_raw",
        "parameters": [
          {
            "datatype": {
              "type": "str"
            },
            "name": "file_name"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "width"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "height"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "format"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "header_size"
          }
        ],
        "return_type": {
          "type": "Image"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Load default material (Supports: DIFFUSE, SPECULAR, NORMAL maps)",
        "name": "load_material_default",
        "parameters": [],
        "return_type": {
          "type": "Material"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Load materials from model file",
        "name": "load_materials",
        "parameters": [
          {
            "datatype": {
              "type": "str"
            },
            "name": "file_name"
          },
          {
            "datatype": {
              "arguments": [
                {
                  "type": "CInt"
                }
              ],
              "type": "Ptr"
            },
            "name": "material_count"
          }
        ],
        "return_type": {
          "arguments": [
            {
              "type": "Material"
            }
          ],
          "type": "Ptr"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Load model from files (meshes and materials)",
        "name": "load_model",
        "parameters": [
          {
            "datatype": {
              "type": "str"
            },
            "name": "file_name"
          }
        ],
        "return_type": {
          "type": "Model"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Load model animations from file",
        "name": "load_model_animations",
        "parameters": [
          {
            "datatype": {
              "type": "str"
            },
            "name": "file_name"
          },
          {
            "datatype": {
              "arguments": [
                {
                  "type": "CUInt"
                }
              ],
              "type": "Ptr"
            },
            "name": "anim_count"
          }
        ],
        "return_type": {
          "arguments": [
            {
              "type": "ModelAnimation"
            }
          ],
          "type": "Ptr"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Load model from generated mesh (default material)",
        "name": "load_model_from_mesh",
        "parameters": [
          {
            "datatype": {
              "type": "Mesh"
            },
            "name": "mesh"
          }
        ],
        "return_type": {
          "type": "Model"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Load music stream from file",
        "name": "load_music_stream",
        "parameters": [
          {
            "datatype": {
              "type": "str"
            },
            "name": "file_name"
          }
        ],
        "return_type": {
          "type": "Music"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Load music stream from data",
        "name": "load_music_stream_from_memory",
        "parameters": [
          {
            "datatype": {
              "type": "str"
            },
            "name": "file_type"
          },
          {
            "datatype": {
              "arguments": [
                {
                  "arguments": [
                    {
                      "type": "CUChar"
                    }
                  ],
                  "type": "Const"
                }
              ],
              "type": "Ptr"
            },
            "name": "data"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "data_size"
          }
        ],
        "return_type": {
          "type": "Music"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Load texture for rendering (framebuffer)",
        "name": "load_render_texture",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "width"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "height"
          }
        ],
        "return_type": {
          "type": "RenderTexture2D"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Load shader from files and bind default locations",
        "name": "load_shader",
        "parameters": [
          {
            "datatype": {
              "type": "str"
            },
            "name": "vs_file_name"
          },
          {
            "datatype": {
              "type": "str"
            },
            "name": "fs_file_name"
          }
        ],
        "return_type": {
          "type": "Shader"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Load shader from code strings and bind default locations",
        "name": "load_shader_from_memory",
        "parameters": [
          {
            "datatype": {
              "type": "str"
            },
            "name": "vs_code"
          },
          {
            "datatype": {
              "type": "str"
            },
            "name": "fs_code"
          }
        ],
        "return_type": {
          "type": "Shader"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Load sound from file",
        "name": "load_sound",
        "parameters": [
          {
            "datatype": {
              "type": "str"
            },
            "name": "file_name"
          }
        ],
        "return_type": {
          "type": "Sound"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Load sound from wave data",
        "name": "load_sound_from_wave",
        "parameters": [
          {
            "datatype": {
              "type": "Wave"
            },
            "name": "p_wave"
          }
        ],
        "return_type": {
          "type": "Sound"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Load texture from file into GPU memory (VRAM)",
        "name": "load_texture",
        "parameters": [
          {
            "datatype": {
              "type": "str"
            },
            "name": "file_name"
          }
        ],
        "return_type": {
          "type": "Texture2D"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Load cubemap from image, multiple image cubemap layouts supported",
        "name": "load_texture_cubemap",
        "parameters": [
          {
            "datatype": {
              "type": "Image"
            },
            "name": "p_image"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "layout"
          }
        ],
        "return_type": {
          "type": "TextureCubemap"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Load texture from image data",
        "name": "load_texture_from_image",
        "parameters": [
          {
            "datatype": {
              "type": "Image"
            },
            "name": "p_image"
          }
        ],
        "return_type": {
          "type": "Texture2D"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Load UTF-8 text encoded from codepoints array",
        "name": "load_utf8",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "arguments": [
                    {
                      "type": "CInt"
                    }
                  ],
                  "type": "Const"
                }
              ],
              "type": "Ptr"
            },
            "name": "codepoints"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "length"
          }
        ],
        "return_type": {
          "type": "CStr"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Load VR stereo config for VR simulator device parameters",
        "name": "load_vr_stereo_config",
        "parameters": [
          {
            "datatype": {
              "type": "VrDeviceInfo"
            },
            "name": "device"
          }
        ],
        "return_type": {
          "type": "VrStereoConfig"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Load wave data from file",
        "name": "load_wave",
        "parameters": [
          {
            "datatype": {
              "type": "str"
            },
            "name": "file_name"
          }
        ],
        "return_type": {
          "type": "Wave"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Load wave from memory buffer, fileType refers to extension: i.e. '.wav'",
        "name": "load_wave_from_memory",
        "parameters": [
          {
            "datatype": {
              "type": "str"
            },
            "name": "file_type"
          },
          {
            "datatype": {
              "arguments": [
                {
                  "arguments": [
                    {
                      "type": "CUChar"
                    }
                  ],
                  "type": "Const"
                }
              ],
              "type": "Ptr"
            },
            "name": "file_data"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "data_size"
          }
        ],
        "return_type": {
          "type": "Wave"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Load samples data from wave as a 32bit float data array",
        "name": "load_wave_samples",
        "parameters": [
          {
            "datatype": {
              "type": "Wave"
            },
            "name": "p_wave"
          }
        ],
        "return_type": {
          "arguments": [
            {
              "type": "CFloat"
            }
          ],
          "type": "Ptr"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Factory function for: MaterialMap",
        "name": "material_map",
        "parameters": [
          {
            "datatype": {
              "type": "Texture2D"
            },
            "name": "p_texture"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "p_color"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "value"
          }
        ],
        "return_type": {
          "type": "MaterialMap"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Factory function for: Matrix",
        "name": "matrix",
        "parameters": [
          {
            "datatype": {
              "type": "float"
            },
            "name": "m0"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "m4"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "m8"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "m12"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "m1"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "m5"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "m9"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "m13"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "m2"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "m6"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "m10"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "m14"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "m3"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "m7"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "m11"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "m15"
          }
        ],
        "return_type": {
          "type": "Matrix"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Set window state: maximized, if resizable (only PLATFORM_DESKTOP)",
        "name": "maximize_window",
        "parameters": [],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Measure string width for default font",
        "name": "measure_text",
        "parameters": [
          {
            "datatype": {
              "type": "str"
            },
            "name": "text"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "font_size"
          }
        ],
        "return_type": {
          "type": "int"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Measure string size for Font",
        "name": "measure_text_ex",
        "parameters": [
          {
            "datatype": {
              "type": "Font"
            },
            "name": "p_font"
          },
          {
            "datatype": {
              "type": "str"
            },
            "name": "text"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "font_size"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "spacing"
          }
        ],
        "return_type": {
          "type": "Vector2"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Internal memory allocator",
        "name": "mem_alloc",
        "parameters": [
          {
            "datatype": {
              "type": "u32"
            },
            "name": "size"
          }
        ],
        "return_type": {
          "type": "AnyPtr"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Internal memory free",
        "name": "mem_free",
        "parameters": [
          {
            "datatype": {
              "type": "AnyPtr"
            },
            "name": "ptr"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Internal memory reallocator",
        "name": "mem_realloc",
        "parameters": [
          {
            "datatype": {
              "type": "AnyPtr"
            },
            "name": "ptr"
          },
          {
            "datatype": {
              "type": "u32"
            },
            "name": "size"
          }
        ],
        "return_type": {
          "type": "AnyPtr"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Set window state: minimized, if resizable (only PLATFORM_DESKTOP)",
        "name": "minimize_window",
        "parameters": [],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Factory function for: Music",
        "name": "music",
        "parameters": [
          {
            "datatype": {
              "type": "AudioStream"
            },
            "name": "stream"
          },
          {
            "datatype": {
              "type": "u32"
            },
            "name": "frame_count"
          },
          {
            "datatype": {
              "type": "bool"
            },
            "name": "looping"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "ctx_type"
          },
          {
            "datatype": {
              "type": "AnyPtr"
            },
            "name": "ctx_data"
          }
        ],
        "return_type": {
          "type": "Music"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Factory function for: NPatchInfo",
        "name": "n_patch_info",
        "parameters": [
          {
            "datatype": {
              "type": "Rectangle"
            },
            "name": "source"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "left"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "top"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "right"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "bottom"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "layout"
          }
        ],
        "return_type": {
          "type": "NPatchInfo"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Open URL with default system browser (if available)",
        "name": "open_url",
        "parameters": [
          {
            "datatype": {
              "type": "str"
            },
            "name": "url"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Pause audio stream",
        "name": "pause_audio_stream",
        "parameters": [
          {
            "datatype": {
              "type": "AudioStream"
            },
            "name": "stream"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Pause music playing",
        "name": "pause_music_stream",
        "parameters": [
          {
            "datatype": {
              "type": "Music"
            },
            "name": "p_music"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Pause a sound",
        "name": "pause_sound",
        "parameters": [
          {
            "datatype": {
              "type": "Sound"
            },
            "name": "p_sound"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Play audio stream",
        "name": "play_audio_stream",
        "parameters": [
          {
            "datatype": {
              "type": "AudioStream"
            },
            "name": "stream"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Start music playing",
        "name": "play_music_stream",
        "parameters": [
          {
            "datatype": {
              "type": "Music"
            },
            "name": "p_music"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Play a sound",
        "name": "play_sound",
        "parameters": [
          {
            "datatype": {
              "type": "Sound"
            },
            "name": "p_sound"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Register all input events",
        "name": "poll_input_events",
        "parameters": [],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Factory function for: Quaternion",
        "name": "quaternion",
        "parameters": [
          {
            "datatype": {
              "type": "float"
            },
            "name": "x"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "y"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "z"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "w"
          }
        ],
        "return_type": {
          "type": "Quaternion"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Factory function for: Ray",
        "name": "ray",
        "parameters": [
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "position"
          },
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "direction"
          }
        ],
        "return_type": {
          "type": "Ray"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Factory function for: RayCollision",
        "name": "ray_collision",
        "parameters": [
          {
            "datatype": {
              "type": "bool"
            },
            "name": "hit"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "distance"
          },
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "point"
          },
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "normal"
          }
        ],
        "return_type": {
          "type": "RayCollision"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Factory function for: Rectangle",
        "name": "rectangle",
        "parameters": [
          {
            "datatype": {
              "type": "float"
            },
            "name": "x"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "y"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "width"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "height"
          }
        ],
        "return_type": {
          "type": "Rectangle"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Factory function for: RenderTexture",
        "name": "render_texture",
        "parameters": [
          {
            "datatype": {
              "type": "u32"
            },
            "name": "id"
          },
          {
            "datatype": {
              "type": "Texture"
            },
            "name": "p_texture"
          },
          {
            "datatype": {
              "type": "Texture"
            },
            "name": "depth"
          }
        ],
        "return_type": {
          "type": "RenderTexture"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Factory function for: RenderTexture2D",
        "name": "render_texture_2d",
        "parameters": [
          {
            "datatype": {
              "type": "u32"
            },
            "name": "id"
          },
          {
            "datatype": {
              "type": "Texture"
            },
            "name": "p_texture"
          },
          {
            "datatype": {
              "type": "Texture"
            },
            "name": "depth"
          }
        ],
        "return_type": {
          "type": "RenderTexture2D"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Set window state: not minimized/maximized (only PLATFORM_DESKTOP)",
        "name": "restore_window",
        "parameters": [],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Resume audio stream",
        "name": "resume_audio_stream",
        "parameters": [
          {
            "datatype": {
              "type": "AudioStream"
            },
            "name": "stream"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Resume playing paused music",
        "name": "resume_music_stream",
        "parameters": [
          {
            "datatype": {
              "type": "Music"
            },
            "name": "p_music"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Resume a paused sound",
        "name": "resume_sound",
        "parameters": [
          {
            "datatype": {
              "type": "Sound"
            },
            "name": "p_sound"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Save data to file from byte array (write), returns true on success",
        "name": "save_file_data",
        "parameters": [
          {
            "datatype": {
              "type": "str"
            },
            "name": "file_name"
          },
          {
            "datatype": {
              "type": "AnyPtr"
            },
            "name": "data"
          },
          {
            "datatype": {
              "type": "u32"
            },
            "name": "bytes_to_write"
          }
        ],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Save text data to file (write), string must be '\\0' terminated, returns true on success",
        "name": "save_file_text",
        "parameters": [
          {
            "datatype": {
              "type": "str"
            },
            "name": "file_name"
          },
          {
            "datatype": {
              "type": "str"
            },
            "name": "text"
          }
        ],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Seek music to a position (in seconds)",
        "name": "seek_music_stream",
        "parameters": [
          {
            "datatype": {
              "type": "Music"
            },
            "name": "p_music"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "position"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Default size for new audio streams",
        "name": "set_audio_stream_buffer_size_default",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "size"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Set pan for audio stream (0.5 is centered)",
        "name": "set_audio_stream_pan",
        "parameters": [
          {
            "datatype": {
              "type": "AudioStream"
            },
            "name": "stream"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "pan"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Set pitch for audio stream (1.0 is base level)",
        "name": "set_audio_stream_pitch",
        "parameters": [
          {
            "datatype": {
              "type": "AudioStream"
            },
            "name": "stream"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "pitch"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Set volume for audio stream (1.0 is max level)",
        "name": "set_audio_stream_volume",
        "parameters": [
          {
            "datatype": {
              "type": "AudioStream"
            },
            "name": "stream"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "volume"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Set clipboard text content",
        "name": "set_clipboard_text",
        "parameters": [
          {
            "datatype": {
              "type": "str"
            },
            "name": "text"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Setup init configuration flags (view FLAGS)",
        "name": "set_config_flags",
        "parameters": [
          {
            "datatype": {
              "type": "u32"
            },
            "name": "flags"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Set a custom key to exit program (default is ESC)",
        "name": "set_exit_key",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "key"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Set internal gamepad mappings (SDL_GameControllerDB)",
        "name": "set_gamepad_mappings",
        "parameters": [
          {
            "datatype": {
              "type": "str"
            },
            "name": "mappings"
          }
        ],
        "return_type": {
          "type": "int"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Enable a set of gestures using flags",
        "name": "set_gestures_enabled",
        "parameters": [
          {
            "datatype": {
              "type": "u32"
            },
            "name": "flags"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Set master volume (listener)",
        "name": "set_master_volume",
        "parameters": [
          {
            "datatype": {
              "type": "float"
            },
            "name": "volume"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Set texture for a material map type (MATERIAL_MAP_DIFFUSE, MATERIAL_MAP_SPECULAR...)",
        "name": "set_material_texture",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "type": "Material"
                }
              ],
              "type": "Ptr"
            },
            "name": "material"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "map_type"
          },
          {
            "datatype": {
              "type": "Texture2D"
            },
            "name": "p_texture"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Set material for a mesh",
        "name": "set_model_mesh_material",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "type": "Model"
                }
              ],
              "type": "Ptr"
            },
            "name": "model"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "mesh_id"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "material_id"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Set mouse cursor",
        "name": "set_mouse_cursor",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "cursor"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Set mouse offset",
        "name": "set_mouse_offset",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "offset_x"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "offset_y"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Set mouse position XY",
        "name": "set_mouse_position",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "x"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "y"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Set mouse scaling",
        "name": "set_mouse_scale",
        "parameters": [
          {
            "datatype": {
              "type": "float"
            },
            "name": "scale_x"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "scale_y"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Set pan for a music (0.5 is center)",
        "name": "set_music_pan",
        "parameters": [
          {
            "datatype": {
              "type": "Music"
            },
            "name": "p_music"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "pan"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Set pitch for a music (1.0 is base level)",
        "name": "set_music_pitch",
        "parameters": [
          {
            "datatype": {
              "type": "Music"
            },
            "name": "p_music"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "pitch"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Set volume for music (1.0 is max level)",
        "name": "set_music_volume",
        "parameters": [
          {
            "datatype": {
              "type": "Music"
            },
            "name": "p_music"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "volume"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Set color formatted into destination pixel pointer",
        "name": "set_pixel_color",
        "parameters": [
          {
            "datatype": {
              "type": "AnyPtr"
            },
            "name": "dst_ptr"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "p_color"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "format"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Set the seed for the random number generator",
        "name": "set_random_seed",
        "parameters": [
          {
            "datatype": {
              "type": "u32"
            },
            "name": "seed"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Set shader uniform value",
        "name": "set_shader_value",
        "parameters": [
          {
            "datatype": {
              "type": "Shader"
            },
            "name": "shader"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "loc_index"
          },
          {
            "datatype": {
              "type": "AnyPtrToConst"
            },
            "name": "value"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "uniform_type"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Set shader uniform value (matrix 4x4)",
        "name": "set_shader_value_matrix",
        "parameters": [
          {
            "datatype": {
              "type": "Shader"
            },
            "name": "shader"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "loc_index"
          },
          {
            "datatype": {
              "type": "Matrix"
            },
            "name": "mat"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Set shader uniform value for texture (sampler2d)",
        "name": "set_shader_value_texture",
        "parameters": [
          {
            "datatype": {
              "type": "Shader"
            },
            "name": "shader"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "loc_index"
          },
          {
            "datatype": {
              "type": "Texture2D"
            },
            "name": "p_texture"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Set shader uniform value vector",
        "name": "set_shader_value_v",
        "parameters": [
          {
            "datatype": {
              "type": "Shader"
            },
            "name": "shader"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "loc_index"
          },
          {
            "datatype": {
              "type": "AnyPtrToConst"
            },
            "name": "value"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "uniform_type"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "count"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Set texture and rectangle to be used on shapes drawing",
        "name": "set_shapes_texture",
        "parameters": [
          {
            "datatype": {
              "type": "Texture2D"
            },
            "name": "p_texture"
          },
          {
            "datatype": {
              "type": "Rectangle"
            },
            "name": "source"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Set pan for a sound (0.5 is center)",
        "name": "set_sound_pan",
        "parameters": [
          {
            "datatype": {
              "type": "Sound"
            },
            "name": "p_sound"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "pan"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Set pitch for a sound (1.0 is base level)",
        "name": "set_sound_pitch",
        "parameters": [
          {
            "datatype": {
              "type": "Sound"
            },
            "name": "p_sound"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "pitch"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Set volume for a sound (1.0 is max level)",
        "name": "set_sound_volume",
        "parameters": [
          {
            "datatype": {
              "type": "Sound"
            },
            "name": "p_sound"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "volume"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Set target FPS (maximum)",
        "name": "set_target_fps",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "fps"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Set texture scaling filter mode",
        "name": "set_texture_filter",
        "parameters": [
          {
            "datatype": {
              "type": "Texture2D"
            },
            "name": "p_texture"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "filter"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Set texture wrapping mode",
        "name": "set_texture_wrap",
        "parameters": [
          {
            "datatype": {
              "type": "Texture2D"
            },
            "name": "p_texture"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "wrap"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Set the current threshold (minimum) log level",
        "name": "set_trace_log_level",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "log_level"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Set icon for window (single image, RGBA 32bit, only PLATFORM_DESKTOP)",
        "name": "set_window_icon",
        "parameters": [
          {
            "datatype": {
              "type": "Image"
            },
            "name": "p_image"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Set icon for window (multiple images, RGBA 32bit, only PLATFORM_DESKTOP)",
        "name": "set_window_icons",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "type": "Image"
                }
              ],
              "type": "Ptr"
            },
            "name": "images"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "count"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Set window minimum dimensions (for FLAG_WINDOW_RESIZABLE)",
        "name": "set_window_min_size",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "width"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "height"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Set monitor for the current window (fullscreen mode)",
        "name": "set_window_monitor",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "monitor"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Set window opacity [0.0f..1.0f] (only PLATFORM_DESKTOP)",
        "name": "set_window_opacity",
        "parameters": [
          {
            "datatype": {
              "type": "float"
            },
            "name": "opacity"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Set window position on screen (only PLATFORM_DESKTOP)",
        "name": "set_window_position",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "x"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "y"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Set window dimensions",
        "name": "set_window_size",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "width"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "height"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Set window configuration state using flags (only PLATFORM_DESKTOP)",
        "name": "set_window_state",
        "parameters": [
          {
            "datatype": {
              "type": "u32"
            },
            "name": "flags"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Set title for window (only PLATFORM_DESKTOP)",
        "name": "set_window_title",
        "parameters": [
          {
            "datatype": {
              "type": "str"
            },
            "name": "title"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Shows cursor",
        "name": "show_cursor",
        "parameters": [],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Factory function for: Sound",
        "name": "sound",
        "parameters": [
          {
            "datatype": {
              "type": "AudioStream"
            },
            "name": "stream"
          },
          {
            "datatype": {
              "type": "u32"
            },
            "name": "frame_count"
          }
        ],
        "return_type": {
          "type": "Sound"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Stop audio stream",
        "name": "stop_audio_stream",
        "parameters": [
          {
            "datatype": {
              "type": "AudioStream"
            },
            "name": "stream"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Stop music playing",
        "name": "stop_music_stream",
        "parameters": [
          {
            "datatype": {
              "type": "Music"
            },
            "name": "p_music"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Stop playing a sound",
        "name": "stop_sound",
        "parameters": [
          {
            "datatype": {
              "type": "Sound"
            },
            "name": "p_sound"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Swap back buffer with front buffer (screen drawing)",
        "name": "swap_screen_buffer",
        "parameters": [],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Takes a screenshot of current screen (filename extension defines format)",
        "name": "take_screenshot",
        "parameters": [
          {
            "datatype": {
              "type": "str"
            },
            "name": "file_name"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Append text at specific position and move cursor!",
        "name": "text_append",
        "parameters": [
          {
            "datatype": {
              "type": "str"
            },
            "name": "text"
          },
          {
            "datatype": {
              "type": "str"
            },
            "name": "append"
          },
          {
            "datatype": {
              "arguments": [
                {
                  "type": "CInt"
                }
              ],
              "type": "Ptr"
            },
            "name": "position"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Copy one string to another, returns bytes copied",
        "name": "text_copy",
        "parameters": [
          {
            "datatype": {
              "type": "str"
            },
            "name": "dst"
          },
          {
            "datatype": {
              "type": "str"
            },
            "name": "src"
          }
        ],
        "return_type": {
          "type": "int"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Find first text occurrence within a string",
        "name": "text_find_index",
        "parameters": [
          {
            "datatype": {
              "type": "str"
            },
            "name": "text"
          },
          {
            "datatype": {
              "type": "str"
            },
            "name": "find"
          }
        ],
        "return_type": {
          "type": "int"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Insert text in a position (WARNING: memory must be freed!)",
        "name": "text_insert",
        "parameters": [
          {
            "datatype": {
              "type": "str"
            },
            "name": "text"
          },
          {
            "datatype": {
              "type": "str"
            },
            "name": "insert"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "position"
          }
        ],
        "return_type": {
          "type": "CStr"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Check if two text string are equal",
        "name": "text_is_equal",
        "parameters": [
          {
            "datatype": {
              "type": "str"
            },
            "name": "text1"
          },
          {
            "datatype": {
              "type": "str"
            },
            "name": "text2"
          }
        ],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Join text strings with delimiter",
        "name": "text_join",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "arguments": [
                    {
                      "arguments": [
                        {
                          "type": "CChar"
                        }
                      ],
                      "type": "Const"
                    }
                  ],
                  "type": "Ptr"
                }
              ],
              "type": "Ptr"
            },
            "name": "text_list"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "count"
          },
          {
            "datatype": {
              "type": "str"
            },
            "name": "delimiter"
          }
        ],
        "return_type": {
          "arguments": [
            {
              "arguments": [
                {
                  "type": "CChar"
                }
              ],
              "type": "Const"
            }
          ],
          "type": "Ptr"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Get text length, checks for '\\0' ending",
        "name": "text_length",
        "parameters": [
          {
            "datatype": {
              "type": "str"
            },
            "name": "text"
          }
        ],
        "return_type": {
          "type": "u32"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Replace text string (WARNING: memory must be freed!)",
        "name": "text_replace",
        "parameters": [
          {
            "datatype": {
              "type": "str"
            },
            "name": "text"
          },
          {
            "datatype": {
              "type": "str"
            },
            "name": "replace"
          },
          {
            "datatype": {
              "type": "str"
            },
            "name": "by"
          }
        ],
        "return_type": {
          "type": "CStr"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Split text into multiple strings",
        "name": "text_split",
        "parameters": [
          {
            "datatype": {
              "type": "str"
            },
            "name": "text"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "delimiter"
          },
          {
            "datatype": {
              "arguments": [
                {
                  "type": "CInt"
                }
              ],
              "type": "Ptr"
            },
            "name": "count"
          }
        ],
        "return_type": {
          "arguments": [
            {
              "arguments": [
                {
                  "arguments": [
                    {
                      "type": "CChar"
                    }
                  ],
                  "type": "Const"
                }
              ],
              "type": "Ptr"
            }
          ],
          "type": "Ptr"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Get a piece of a text string",
        "name": "text_subtext",
        "parameters": [
          {
            "datatype": {
              "type": "str"
            },
            "name": "text"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "position"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "length"
          }
        ],
        "return_type": {
          "arguments": [
            {
              "arguments": [
                {
                  "type": "CChar"
                }
              ],
              "type": "Const"
            }
          ],
          "type": "Ptr"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Get integer value from text (negative values not supported)",
        "name": "text_to_integer",
        "parameters": [
          {
            "datatype": {
              "type": "str"
            },
            "name": "text"
          }
        ],
        "return_type": {
          "type": "int"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Get lower case version of provided string",
        "name": "text_to_lower",
        "parameters": [
          {
            "datatype": {
              "type": "str"
            },
            "name": "text"
          }
        ],
        "return_type": {
          "arguments": [
            {
              "arguments": [
                {
                  "type": "CChar"
                }
              ],
              "type": "Const"
            }
          ],
          "type": "Ptr"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Get Pascal case notation version of provided string",
        "name": "text_to_pascal",
        "parameters": [
          {
            "datatype": {
              "type": "str"
            },
            "name": "text"
          }
        ],
        "return_type": {
          "arguments": [
            {
              "arguments": [
                {
                  "type": "CChar"
                }
              ],
              "type": "Const"
            }
          ],
          "type": "Ptr"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Get upper case version of provided string",
        "name": "text_to_upper",
        "parameters": [
          {
            "datatype": {
              "type": "str"
            },
            "name": "text"
          }
        ],
        "return_type": {
          "arguments": [
            {
              "arguments": [
                {
                  "type": "CChar"
                }
              ],
              "type": "Const"
            }
          ],
          "type": "Ptr"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Factory function for: Texture",
        "name": "texture",
        "parameters": [
          {
            "datatype": {
              "type": "u32"
            },
            "name": "id"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "width"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "height"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "mipmaps"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "format"
          }
        ],
        "return_type": {
          "type": "Texture"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Factory function for: Texture2D",
        "name": "texture_2d",
        "parameters": [
          {
            "datatype": {
              "type": "u32"
            },
            "name": "id"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "width"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "height"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "mipmaps"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "format"
          }
        ],
        "return_type": {
          "type": "Texture2D"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Factory function for: TextureCubemap",
        "name": "texture_cubemap",
        "parameters": [
          {
            "datatype": {
              "type": "u32"
            },
            "name": "id"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "width"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "height"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "mipmaps"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "format"
          }
        ],
        "return_type": {
          "type": "TextureCubemap"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Toggle window state: fullscreen/windowed (only PLATFORM_DESKTOP)",
        "name": "toggle_fullscreen",
        "parameters": [],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Factory function for: Transform",
        "name": "transform",
        "parameters": [
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "translation"
          },
          {
            "datatype": {
              "type": "Quaternion"
            },
            "name": "rotation"
          },
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "scale"
          }
        ],
        "return_type": {
          "type": "Transform"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Unload audio stream and free memory",
        "name": "unload_audio_stream",
        "parameters": [
          {
            "datatype": {
              "type": "AudioStream"
            },
            "name": "stream"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Unload codepoints data from memory",
        "name": "unload_codepoints",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "type": "CInt"
                }
              ],
              "type": "Ptr"
            },
            "name": "codepoints"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Unload filepaths",
        "name": "unload_directory_files",
        "parameters": [
          {
            "datatype": {
              "type": "FilePathList"
            },
            "name": "files"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Unload dropped filepaths",
        "name": "unload_dropped_files",
        "parameters": [
          {
            "datatype": {
              "type": "FilePathList"
            },
            "name": "files"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Unload file data allocated by LoadFileData()",
        "name": "unload_file_data",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "type": "CUChar"
                }
              ],
              "type": "Ptr"
            },
            "name": "data"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Unload file text data allocated by LoadFileText()",
        "name": "unload_file_text",
        "parameters": [
          {
            "datatype": {
              "type": "str"
            },
            "name": "text"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Unload font from GPU memory (VRAM)",
        "name": "unload_font",
        "parameters": [
          {
            "datatype": {
              "type": "Font"
            },
            "name": "p_font"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Unload font chars info data (RAM)",
        "name": "unload_font_data",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "type": "GlyphInfo"
                }
              ],
              "type": "Ptr"
            },
            "name": "chars"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "glyph_count"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Unload image from CPU memory (RAM)",
        "name": "unload_image",
        "parameters": [
          {
            "datatype": {
              "type": "Image"
            },
            "name": "p_image"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Unload color data loaded with LoadImageColors()",
        "name": "unload_image_colors",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "type": "Color"
                }
              ],
              "type": "Ptr"
            },
            "name": "colors"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Unload colors palette loaded with LoadImagePalette()",
        "name": "unload_image_palette",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "type": "Color"
                }
              ],
              "type": "Ptr"
            },
            "name": "colors"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Unload material from GPU memory (VRAM)",
        "name": "unload_material",
        "parameters": [
          {
            "datatype": {
              "type": "Material"
            },
            "name": "material"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Unload mesh data from CPU and GPU",
        "name": "unload_mesh",
        "parameters": [
          {
            "datatype": {
              "type": "Mesh"
            },
            "name": "mesh"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Unload model (including meshes) from memory (RAM and/or VRAM)",
        "name": "unload_model",
        "parameters": [
          {
            "datatype": {
              "type": "Model"
            },
            "name": "model"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Unload animation data",
        "name": "unload_model_animation",
        "parameters": [
          {
            "datatype": {
              "type": "ModelAnimation"
            },
            "name": "anim"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Unload animation array data",
        "name": "unload_model_animations",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "type": "ModelAnimation"
                }
              ],
              "type": "Ptr"
            },
            "name": "animations"
          },
          {
            "datatype": {
              "type": "u32"
            },
            "name": "count"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Unload music stream",
        "name": "unload_music_stream",
        "parameters": [
          {
            "datatype": {
              "type": "Music"
            },
            "name": "p_music"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Unload render texture from GPU memory (VRAM)",
        "name": "unload_render_texture",
        "parameters": [
          {
            "datatype": {
              "type": "RenderTexture2D"
            },
            "name": "target"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Unload shader from GPU memory (VRAM)",
        "name": "unload_shader",
        "parameters": [
          {
            "datatype": {
              "type": "Shader"
            },
            "name": "shader"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Unload sound",
        "name": "unload_sound",
        "parameters": [
          {
            "datatype": {
              "type": "Sound"
            },
            "name": "p_sound"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Unload texture from GPU memory (VRAM)",
        "name": "unload_texture",
        "parameters": [
          {
            "datatype": {
              "type": "Texture2D"
            },
            "name": "p_texture"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Unload UTF-8 text encoded from codepoints array",
        "name": "unload_utf8",
        "parameters": [
          {
            "datatype": {
              "type": "str"
            },
            "name": "text"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Unload VR stereo config",
        "name": "unload_vr_stereo_config",
        "parameters": [
          {
            "datatype": {
              "type": "VrStereoConfig"
            },
            "name": "config"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Unload wave data",
        "name": "unload_wave",
        "parameters": [
          {
            "datatype": {
              "type": "Wave"
            },
            "name": "p_wave"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Unload samples data loaded with LoadWaveSamples()",
        "name": "unload_wave_samples",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "type": "CFloat"
                }
              ],
              "type": "Ptr"
            },
            "name": "samples"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Update audio stream buffers with data",
        "name": "update_audio_stream",
        "parameters": [
          {
            "datatype": {
              "type": "AudioStream"
            },
            "name": "stream"
          },
          {
            "datatype": {
              "type": "AnyPtrToConst"
            },
            "name": "data"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "frame_count"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Update camera position for selected mode",
        "name": "update_camera",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "type": "Camera"
                }
              ],
              "type": "Ptr"
            },
            "name": "p_camera"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "mode"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Update camera movement/rotation",
        "name": "update_camera_pro",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "type": "Camera"
                }
              ],
              "type": "Ptr"
            },
            "name": "p_camera"
          },
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "movement"
          },
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "rotation"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "zoom"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Update mesh vertex data in GPU for a specific buffer index",
        "name": "update_mesh_buffer",
        "parameters": [
          {
            "datatype": {
              "type": "Mesh"
            },
            "name": "mesh"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "index"
          },
          {
            "datatype": {
              "type": "AnyPtrToConst"
            },
            "name": "data"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "data_size"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "offset"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Update model animation pose",
        "name": "update_model_animation",
        "parameters": [
          {
            "datatype": {
              "type": "Model"
            },
            "name": "model"
          },
          {
            "datatype": {
              "type": "ModelAnimation"
            },
            "name": "anim"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "frame"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Updates buffers for music streaming",
        "name": "update_music_stream",
        "parameters": [
          {
            "datatype": {
              "type": "Music"
            },
            "name": "p_music"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Update sound buffer with new data",
        "name": "update_sound",
        "parameters": [
          {
            "datatype": {
              "type": "Sound"
            },
            "name": "p_sound"
          },
          {
            "datatype": {
              "type": "AnyPtrToConst"
            },
            "name": "data"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "sample_count"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Update GPU texture with new data",
        "name": "update_texture",
        "parameters": [
          {
            "datatype": {
              "type": "Texture2D"
            },
            "name": "p_texture"
          },
          {
            "datatype": {
              "type": "AnyPtrToConst"
            },
            "name": "pixels"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Update GPU texture rectangle with new data",
        "name": "update_texture_rec",
        "parameters": [
          {
            "datatype": {
              "type": "Texture2D"
            },
            "name": "p_texture"
          },
          {
            "datatype": {
              "type": "Rectangle"
            },
            "name": "rec"
          },
          {
            "datatype": {
              "type": "AnyPtrToConst"
            },
            "name": "pixels"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Upload mesh vertex data in GPU and provide VAO/VBO ids",
        "name": "upload_mesh",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "type": "Mesh"
                }
              ],
              "type": "Ptr"
            },
            "name": "mesh"
          },
          {
            "datatype": {
              "type": "bool"
            },
            "name": "dynamic"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Factory function for: Vector2",
        "name": "vector2",
        "parameters": [
          {
            "datatype": {
              "type": "float"
            },
            "name": "x"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "y"
          }
        ],
        "return_type": {
          "type": "Vector2"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Factory function for: Vector3",
        "name": "vector3",
        "parameters": [
          {
            "datatype": {
              "type": "float"
            },
            "name": "x"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "y"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "z"
          }
        ],
        "return_type": {
          "type": "Vector3"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Factory function for: Vector4",
        "name": "vector4",
        "parameters": [
          {
            "datatype": {
              "type": "float"
            },
            "name": "x"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "y"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "z"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "w"
          }
        ],
        "return_type": {
          "type": "Vector4"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Wait for some time (halt program execution)",
        "name": "wait_time",
        "parameters": [
          {
            "datatype": {
              "type": "f64"
            },
            "name": "seconds"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Factory function for: Wave",
        "name": "wave",
        "parameters": [
          {
            "datatype": {
              "type": "u32"
            },
            "name": "frame_count"
          },
          {
            "datatype": {
              "type": "u32"
            },
            "name": "sample_rate"
          },
          {
            "datatype": {
              "type": "u32"
            },
            "name": "sample_size"
          },
          {
            "datatype": {
              "type": "u32"
            },
            "name": "channels"
          },
          {
            "datatype": {
              "type": "AnyPtr"
            },
            "name": "data"
          }
        ],
        "return_type": {
          "type": "Wave"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Copy a wave to a new wave",
        "name": "wave_copy",
        "parameters": [
          {
            "datatype": {
              "type": "Wave"
            },
            "name": "p_wave"
          }
        ],
        "return_type": {
          "type": "Wave"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Crop a wave to defined samples range",
        "name": "wave_crop",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "type": "Wave"
                }
              ],
              "type": "Ptr"
            },
            "name": "p_wave"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "init_sample"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "final_sample"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Convert wave data to desired format",
        "name": "wave_format",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "type": "Wave"
                }
              ],
              "type": "Ptr"
            },
            "name": "p_wave"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "sample_rate"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "sample_size"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "channels"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Check if KEY_ESCAPE pressed or Close icon pressed",
        "name": "window_should_close",
        "parameters": [],
        "return_type": {
          "type": "bool"
        }
      }
    ],
    "global_consts": [
      {
        "comment": " Blend textures adding colors",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "BLEND_ADDITIVE"
      },
      {
        "comment": " Blend textures adding colors (alternative)",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "BLEND_ADD_COLORS"
      },
      {
        "comment": " Blend textures considering alpha (default)",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "BLEND_ALPHA"
      },
      {
        "comment": " Blend premultiplied textures considering alpha",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "BLEND_ALPHA_PREMULTIPLY"
      },
      {
        "comment": " Blend textures using custom src/dst factors (use rlSetBlendFactors())",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "BLEND_CUSTOM"
      },
      {
        "comment": " Blend textures using custom rgb/alpha separate src/dst factors (use rlSetBlendFactorsSeparate())",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "BLEND_CUSTOM_SEPARATE"
      },
      {
        "comment": " Blend textures multiplying colors",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "BLEND_MULTIPLIED"
      },
      {
        "comment": " Blend textures subtracting colors (alternative)",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "BLEND_SUBTRACT_COLORS"
      },
      {
        "comment": " Custom camera",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "CAMERA_CUSTOM"
      },
      {
        "comment": " First person camera",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "CAMERA_FIRST_PERSON"
      },
      {
        "comment": " Free camera",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "CAMERA_FREE"
      },
      {
        "comment": " Orbital camera",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "CAMERA_ORBITAL"
      },
      {
        "comment": " Orthographic projection",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "CAMERA_ORTHOGRAPHIC"
      },
      {
        "comment": " Perspective projection",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "CAMERA_PERSPECTIVE"
      },
      {
        "comment": " Third person camera",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "CAMERA_THIRD_PERSON"
      },
      {
        "comment": " Automatically detect layout type",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "CUBEMAP_LAYOUT_AUTO_DETECT"
      },
      {
        "comment": " Layout is defined by a 4x3 cross with cubemap faces",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "CUBEMAP_LAYOUT_CROSS_FOUR_BY_THREE"
      },
      {
        "comment": " Layout is defined by a 3x4 cross with cubemap faces",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "CUBEMAP_LAYOUT_CROSS_THREE_BY_FOUR"
      },
      {
        "comment": " Layout is defined by a horizontal line with faces",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "CUBEMAP_LAYOUT_LINE_HORIZONTAL"
      },
      {
        "comment": " Layout is defined by a vertical line with faces",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "CUBEMAP_LAYOUT_LINE_VERTICAL"
      },
      {
        "comment": " Layout is defined by a panorama image (equirrectangular map)",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "CUBEMAP_LAYOUT_PANORAMA"
      },
      {
        "comment": " Set to run program in fullscreen",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "FLAG_FULLSCREEN_MODE"
      },
      {
        "comment": " Set to try enabling interlaced video format (for V3D)",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "FLAG_INTERLACED_HINT"
      },
      {
        "comment": " Set to try enabling MSAA 4X",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "FLAG_MSAA_4X_HINT"
      },
      {
        "comment": " Set to try enabling V-Sync on GPU",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "FLAG_VSYNC_HINT"
      },
      {
        "comment": " Set to allow windows running while minimized",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "FLAG_WINDOW_ALWAYS_RUN"
      },
      {
        "comment": " Set to hide window",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "FLAG_WINDOW_HIDDEN"
      },
      {
        "comment": " Set to support HighDPI",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "FLAG_WINDOW_HIGHDPI"
      },
      {
        "comment": " Set to maximize window (expanded to monitor)",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "FLAG_WINDOW_MAXIMIZED"
      },
      {
        "comment": " Set to minimize window (iconify)",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "FLAG_WINDOW_MINIMIZED"
      },
      {
        "comment": " Set to support mouse passthrough, only supported when FLAG_WINDOW_UNDECORATED",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "FLAG_WINDOW_MOUSE_PASSTHROUGH"
      },
      {
        "comment": " Set to allow resizable window",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "FLAG_WINDOW_RESIZABLE"
      },
      {
        "comment": " Set to window always on top",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "FLAG_WINDOW_TOPMOST"
      },
      {
        "comment": " Set to allow transparent framebuffer",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "FLAG_WINDOW_TRANSPARENT"
      },
      {
        "comment": " Set to disable window decoration (frame and buttons)",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "FLAG_WINDOW_UNDECORATED"
      },
      {
        "comment": " Set to window non focused",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "FLAG_WINDOW_UNFOCUSED"
      },
      {
        "comment": " Bitmap font generation, no anti-aliasing",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "FONT_BITMAP"
      },
      {
        "comment": " Default font generation, anti-aliased",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "FONT_DEFAULT"
      },
      {
        "comment": " SDF font generation, requires external shader",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "FONT_SDF"
      },
      {
        "comment": " Gamepad back trigger left, pressure level: [1..-1]",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "GAMEPAD_AXIS_LEFT_TRIGGER"
      },
      {
        "comment": " Gamepad left stick X axis",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "GAMEPAD_AXIS_LEFT_X"
      },
      {
        "comment": " Gamepad left stick Y axis",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "GAMEPAD_AXIS_LEFT_Y"
      },
      {
        "comment": " Gamepad back trigger right, pressure level: [1..-1]",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "GAMEPAD_AXIS_RIGHT_TRIGGER"
      },
      {
        "comment": " Gamepad right stick X axis",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "GAMEPAD_AXIS_RIGHT_X"
      },
      {
        "comment": " Gamepad right stick Y axis",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "GAMEPAD_AXIS_RIGHT_Y"
      },
      {
        "comment": " Gamepad left DPAD down button",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "GAMEPAD_BUTTON_LEFT_FACE_DOWN"
      },
      {
        "comment": " Gamepad left DPAD left button",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "GAMEPAD_BUTTON_LEFT_FACE_LEFT"
      },
      {
        "comment": " Gamepad left DPAD right button",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "GAMEPAD_BUTTON_LEFT_FACE_RIGHT"
      },
      {
        "comment": " Gamepad left DPAD up button",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "GAMEPAD_BUTTON_LEFT_FACE_UP"
      },
      {
        "comment": " Gamepad joystick pressed button left",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "GAMEPAD_BUTTON_LEFT_THUMB"
      },
      {
        "comment": " Gamepad top/back trigger left (first), it could be a trailing button",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "GAMEPAD_BUTTON_LEFT_TRIGGER_1"
      },
      {
        "comment": " Gamepad top/back trigger left (second), it could be a trailing button",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "GAMEPAD_BUTTON_LEFT_TRIGGER_2"
      },
      {
        "comment": " Gamepad center buttons, middle one (i.e. PS3: PS, Xbox: XBOX)",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "GAMEPAD_BUTTON_MIDDLE"
      },
      {
        "comment": " Gamepad center buttons, left one (i.e. PS3: Select)",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "GAMEPAD_BUTTON_MIDDLE_LEFT"
      },
      {
        "comment": " Gamepad center buttons, right one (i.e. PS3: Start)",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "GAMEPAD_BUTTON_MIDDLE_RIGHT"
      },
      {
        "comment": " Gamepad right button down (i.e. PS3: Cross, Xbox: A)",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "GAMEPAD_BUTTON_RIGHT_FACE_DOWN"
      },
      {
        "comment": " Gamepad right button left (i.e. PS3: Circle, Xbox: B)",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "GAMEPAD_BUTTON_RIGHT_FACE_LEFT"
      },
      {
        "comment": " Gamepad right button right (i.e. PS3: Square, Xbox: X)",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "GAMEPAD_BUTTON_RIGHT_FACE_RIGHT"
      },
      {
        "comment": " Gamepad right button up (i.e. PS3: Triangle, Xbox: Y)",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "GAMEPAD_BUTTON_RIGHT_FACE_UP"
      },
      {
        "comment": " Gamepad joystick pressed button right",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "GAMEPAD_BUTTON_RIGHT_THUMB"
      },
      {
        "comment": " Gamepad top/back trigger right (one), it could be a trailing button",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "GAMEPAD_BUTTON_RIGHT_TRIGGER_1"
      },
      {
        "comment": " Gamepad top/back trigger right (second), it could be a trailing button",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "GAMEPAD_BUTTON_RIGHT_TRIGGER_2"
      },
      {
        "comment": " Unknown button, just for error checking",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "GAMEPAD_BUTTON_UNKNOWN"
      },
      {
        "comment": " Double tap gesture",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "GESTURE_DOUBLETAP"
      },
      {
        "comment": " Drag gesture",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "GESTURE_DRAG"
      },
      {
        "comment": " Hold gesture",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "GESTURE_HOLD"
      },
      {
        "comment": " No gesture",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "GESTURE_NONE"
      },
      {
        "comment": " Pinch in gesture",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "GESTURE_PINCH_IN"
      },
      {
        "comment": " Pinch out gesture",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "GESTURE_PINCH_OUT"
      },
      {
        "comment": " Swipe down gesture",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "GESTURE_SWIPE_DOWN"
      },
      {
        "comment": " Swipe left gesture",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "GESTURE_SWIPE_LEFT"
      },
      {
        "comment": " Swipe right gesture",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "GESTURE_SWIPE_RIGHT"
      },
      {
        "comment": " Swipe up gesture",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "GESTURE_SWIPE_UP"
      },
      {
        "comment": " Tap gesture",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "GESTURE_TAP"
      },
      {
        "comment": " Key: A | a",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "KEY_A"
      },
      {
        "comment": " Key: '",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "KEY_APOSTROPHE"
      },
      {
        "comment": " Key: B | b",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "KEY_B"
      },
      {
        "comment": " Key: Android back button",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "KEY_BACK"
      },
      {
        "comment": " Key: '\\'",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "KEY_BACKSLASH"
      },
      {
        "comment": " Key: Backspace",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "KEY_BACKSPACE"
      },
      {
        "comment": " Key: C | c",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "KEY_C"
      },
      {
        "comment": " Key: Caps lock",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "KEY_CAPS_LOCK"
      },
      {
        "comment": " Key: ,",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "KEY_COMMA"
      },
      {
        "comment": " Key: D | d",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "KEY_D"
      },
      {
        "comment": " Key: Del",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "KEY_DELETE"
      },
      {
        "comment": " Key: Cursor down",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "KEY_DOWN"
      },
      {
        "comment": " Key: E | e",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "KEY_E"
      },
      {
        "comment": " Key: 8",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "KEY_EIGHT"
      },
      {
        "comment": " Key: End",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "KEY_END"
      },
      {
        "comment": " Key: Enter",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "KEY_ENTER"
      },
      {
        "comment": " Key: =",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "KEY_EQUAL"
      },
      {
        "comment": " Key: Esc",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "KEY_ESCAPE"
      },
      {
        "comment": " Key: F | f",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "KEY_F"
      },
      {
        "comment": " Key: F1",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "KEY_F1"
      },
      {
        "comment": " Key: F10",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "KEY_F10"
      },
      {
        "comment": " Key: F11",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "KEY_F11"
      },
      {
        "comment": " Key: F12",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "KEY_F12"
      },
      {
        "comment": " Key: F2",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "KEY_F2"
      },
      {
        "comment": " Key: F3",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "KEY_F3"
      },
      {
        "comment": " Key: F4",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "KEY_F4"
      },
      {
        "comment": " Key: F5",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "KEY_F5"
      },
      {
        "comment": " Key: F6",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "KEY_F6"
      },
      {
        "comment": " Key: F7",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "KEY_F7"
      },
      {
        "comment": " Key: F8",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "KEY_F8"
      },
      {
        "comment": " Key: F9",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "KEY_F9"
      },
      {
        "comment": " Key: 5",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "KEY_FIVE"
      },
      {
        "comment": " Key: 4",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "KEY_FOUR"
      },
      {
        "comment": " Key: G | g",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "KEY_G"
      },
      {
        "comment": " Key: `",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "KEY_GRAVE"
      },
      {
        "comment": " Key: H | h",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "KEY_H"
      },
      {
        "comment": " Key: Home",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "KEY_HOME"
      },
      {
        "comment": " Key: I | i",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "KEY_I"
      },
      {
        "comment": " Key: Ins",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "KEY_INSERT"
      },
      {
        "comment": " Key: J | j",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "KEY_J"
      },
      {
        "comment": " Key: K | k",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "KEY_K"
      },
      {
        "comment": " Key: KB menu",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "KEY_KB_MENU"
      },
      {
        "comment": " Key: Keypad 0",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "KEY_KP_0"
      },
      {
        "comment": " Key: Keypad 1",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "KEY_KP_1"
      },
      {
        "comment": " Key: Keypad 2",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "KEY_KP_2"
      },
      {
        "comment": " Key: Keypad 3",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "KEY_KP_3"
      },
      {
        "comment": " Key: Keypad 4",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "KEY_KP_4"
      },
      {
        "comment": " Key: Keypad 5",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "KEY_KP_5"
      },
      {
        "comment": " Key: Keypad 6",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "KEY_KP_6"
      },
      {
        "comment": " Key: Keypad 7",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "KEY_KP_7"
      },
      {
        "comment": " Key: Keypad 8",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "KEY_KP_8"
      },
      {
        "comment": " Key: Keypad 9",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "KEY_KP_9"
      },
      {
        "comment": " Key: Keypad +",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "KEY_KP_ADD"
      },
      {
        "comment": " Key: Keypad .",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "KEY_KP_DECIMAL"
      },
      {
        "comment": " Key: Keypad /",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "KEY_KP_DIVIDE"
      },
      {
        "comment": " Key: Keypad Enter",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "KEY_KP_ENTER"
      },
      {
        "comment": " Key: Keypad =",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "KEY_KP_EQUAL"
      },
      {
        "comment": " Key: Keypad *",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "KEY_KP_MULTIPLY"
      },
      {
        "comment": " Key: Keypad -",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "KEY_KP_SUBTRACT"
      },
      {
        "comment": " Key: L | l",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "KEY_L"
      },
      {
        "comment": " Key: Cursor left",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "KEY_LEFT"
      },
      {
        "comment": " Key: Alt left",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "KEY_LEFT_ALT"
      },
      {
        "comment": " Key: [",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "KEY_LEFT_BRACKET"
      },
      {
        "comment": " Key: Control left",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "KEY_LEFT_CONTROL"
      },
      {
        "comment": " Key: Shift left",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "KEY_LEFT_SHIFT"
      },
      {
        "comment": " Key: Super left",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "KEY_LEFT_SUPER"
      },
      {
        "comment": " Key: M | m",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "KEY_M"
      },
      {
        "comment": " Key: Android menu button",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "KEY_MENU"
      },
      {
        "comment": " Key: -",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "KEY_MINUS"
      },
      {
        "comment": " Key: N | n",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "KEY_N"
      },
      {
        "comment": " Key: 9",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "KEY_NINE"
      },
      {
        "comment": " Key: NULL, used for no key pressed",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "KEY_NULL"
      },
      {
        "comment": " Key: Num lock",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "KEY_NUM_LOCK"
      },
      {
        "comment": " Key: O | o",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "KEY_O"
      },
      {
        "comment": " Key: 1",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "KEY_ONE"
      },
      {
        "comment": " Key: P | p",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "KEY_P"
      },
      {
        "comment": " Key: Page down",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "KEY_PAGE_DOWN"
      },
      {
        "comment": " Key: Page up",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "KEY_PAGE_UP"
      },
      {
        "comment": " Key: Pause",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "KEY_PAUSE"
      },
      {
        "comment": " Key: .",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "KEY_PERIOD"
      },
      {
        "comment": " Key: Print screen",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "KEY_PRINT_SCREEN"
      },
      {
        "comment": " Key: Q | q",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "KEY_Q"
      },
      {
        "comment": " Key: R | r",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "KEY_R"
      },
      {
        "comment": " Key: Cursor right",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "KEY_RIGHT"
      },
      {
        "comment": " Key: Alt right",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "KEY_RIGHT_ALT"
      },
      {
        "comment": " Key: ]",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "KEY_RIGHT_BRACKET"
      },
      {
        "comment": " Key: Control right",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "KEY_RIGHT_CONTROL"
      },
      {
        "comment": " Key: Shift right",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "KEY_RIGHT_SHIFT"
      },
      {
        "comment": " Key: Super right",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "KEY_RIGHT_SUPER"
      },
      {
        "comment": " Key: S | s",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "KEY_S"
      },
      {
        "comment": " Key: Scroll down",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "KEY_SCROLL_LOCK"
      },
      {
        "comment": " Key: ;",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "KEY_SEMICOLON"
      },
      {
        "comment": " Key: 7",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "KEY_SEVEN"
      },
      {
        "comment": " Key: 6",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "KEY_SIX"
      },
      {
        "comment": " Key: /",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "KEY_SLASH"
      },
      {
        "comment": " Key: Space",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "KEY_SPACE"
      },
      {
        "comment": " Key: T | t",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "KEY_T"
      },
      {
        "comment": " Key: Tab",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "KEY_TAB"
      },
      {
        "comment": " Key: 3",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "KEY_THREE"
      },
      {
        "comment": " Key: 2",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "KEY_TWO"
      },
      {
        "comment": " Key: U | u",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "KEY_U"
      },
      {
        "comment": " Key: Cursor up",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "KEY_UP"
      },
      {
        "comment": " Key: V | v",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "KEY_V"
      },
      {
        "comment": " Key: Android volume down button",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "KEY_VOLUME_DOWN"
      },
      {
        "comment": " Key: Android volume up button",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "KEY_VOLUME_UP"
      },
      {
        "comment": " Key: W | w",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "KEY_W"
      },
      {
        "comment": " Key: X | x",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "KEY_X"
      },
      {
        "comment": " Key: Y | y",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "KEY_Y"
      },
      {
        "comment": " Key: Z | z",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "KEY_Z"
      },
      {
        "comment": " Key: 0",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "KEY_ZERO"
      },
      {
        "comment": " Display all logs",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "LOG_ALL"
      },
      {
        "comment": " Debug logging, used for internal debugging, it should be disabled on release builds",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "LOG_DEBUG"
      },
      {
        "comment": " Error logging, used on unrecoverable failures",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "LOG_ERROR"
      },
      {
        "comment": " Fatal logging, used to abort program: exit(EXIT_FAILURE)",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "LOG_FATAL"
      },
      {
        "comment": " Info logging, used for program execution info",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "LOG_INFO"
      },
      {
        "comment": " Disable logging",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "LOG_NONE"
      },
      {
        "comment": " Trace logging, intended for internal use only",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "LOG_TRACE"
      },
      {
        "comment": " Warning logging, used on recoverable failures",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "LOG_WARNING"
      },
      {
        "comment": " Albedo material (same as: MATERIAL_MAP_DIFFUSE)",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "MATERIAL_MAP_ALBEDO"
      },
      {
        "comment": " Brdf material",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "MATERIAL_MAP_BRDF"
      },
      {
        "comment": " Cubemap material (NOTE: Uses GL_TEXTURE_CUBE_MAP)",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "MATERIAL_MAP_CUBEMAP"
      },
      {
        "comment": " Emission material",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "MATERIAL_MAP_EMISSION"
      },
      {
        "comment": " Heightmap material",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "MATERIAL_MAP_HEIGHT"
      },
      {
        "comment": " Irradiance material (NOTE: Uses GL_TEXTURE_CUBE_MAP)",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "MATERIAL_MAP_IRRADIANCE"
      },
      {
        "comment": " Metalness material (same as: MATERIAL_MAP_SPECULAR)",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "MATERIAL_MAP_METALNESS"
      },
      {
        "comment": " Normal material",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "MATERIAL_MAP_NORMAL"
      },
      {
        "comment": " Ambient occlusion material",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "MATERIAL_MAP_OCCLUSION"
      },
      {
        "comment": " Prefilter material (NOTE: Uses GL_TEXTURE_CUBE_MAP)",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "MATERIAL_MAP_PREFILTER"
      },
      {
        "comment": " Roughness material",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "MATERIAL_MAP_ROUGHNESS"
      },
      {
        "comment": " Mouse button back (advanced mouse device)",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "MOUSE_BUTTON_BACK"
      },
      {
        "comment": " Mouse button extra (advanced mouse device)",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "MOUSE_BUTTON_EXTRA"
      },
      {
        "comment": " Mouse button forward (advanced mouse device)",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "MOUSE_BUTTON_FORWARD"
      },
      {
        "comment": " Mouse button left",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "MOUSE_BUTTON_LEFT"
      },
      {
        "comment": " Mouse button middle (pressed wheel)",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "MOUSE_BUTTON_MIDDLE"
      },
      {
        "comment": " Mouse button right",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "MOUSE_BUTTON_RIGHT"
      },
      {
        "comment": " Mouse button side (advanced mouse device)",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "MOUSE_BUTTON_SIDE"
      },
      {
        "comment": " Arrow shape",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "MOUSE_CURSOR_ARROW"
      },
      {
        "comment": " Cross shape",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "MOUSE_CURSOR_CROSSHAIR"
      },
      {
        "comment": " Default pointer shape",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "MOUSE_CURSOR_DEFAULT"
      },
      {
        "comment": " Text writing cursor shape",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "MOUSE_CURSOR_IBEAM"
      },
      {
        "comment": " The operation-not-allowed shape",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "MOUSE_CURSOR_NOT_ALLOWED"
      },
      {
        "comment": " Pointing hand cursor",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "MOUSE_CURSOR_POINTING_HAND"
      },
      {
        "comment": " The omnidirectional resize/move cursor shape",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "MOUSE_CURSOR_RESIZE_ALL"
      },
      {
        "comment": " Horizontal resize/move arrow shape",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "MOUSE_CURSOR_RESIZE_EW"
      },
      {
        "comment": " The top-right to bottom-left diagonal resize/move arrow shape",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "MOUSE_CURSOR_RESIZE_NESW"
      },
      {
        "comment": " Vertical resize/move arrow shape",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "MOUSE_CURSOR_RESIZE_NS"
      },
      {
        "comment": " Top-left to bottom-right diagonal resize/move arrow shape",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "MOUSE_CURSOR_RESIZE_NWSE"
      },
      {
        "comment": " Npatch layout: 3x3 tiles",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "NPATCH_NINE_PATCH"
      },
      {
        "comment": " Npatch layout: 3x1 tiles",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "NPATCH_THREE_PATCH_HORIZONTAL"
      },
      {
        "comment": " Npatch layout: 1x3 tiles",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "NPATCH_THREE_PATCH_VERTICAL"
      },
      {
        "comment": " 8 bpp",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "PIXELFORMAT_COMPRESSED_ASTC_4x4_RGBA"
      },
      {
        "comment": " 2 bpp",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "PIXELFORMAT_COMPRESSED_ASTC_8x8_RGBA"
      },
      {
        "comment": " 4 bpp (no alpha)",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "PIXELFORMAT_COMPRESSED_DXT1_RGB"
      },
      {
        "comment": " 4 bpp (1 bit alpha)",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "PIXELFORMAT_COMPRESSED_DXT1_RGBA"
      },
      {
        "comment": " 8 bpp",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "PIXELFORMAT_COMPRESSED_DXT3_RGBA"
      },
      {
        "comment": " 8 bpp",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "PIXELFORMAT_COMPRESSED_DXT5_RGBA"
      },
      {
        "comment": " 4 bpp",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "PIXELFORMAT_COMPRESSED_ETC1_RGB"
      },
      {
        "comment": " 8 bpp",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "PIXELFORMAT_COMPRESSED_ETC2_EAC_RGBA"
      },
      {
        "comment": " 4 bpp",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "PIXELFORMAT_COMPRESSED_ETC2_RGB"
      },
      {
        "comment": " 4 bpp",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "PIXELFORMAT_COMPRESSED_PVRT_RGB"
      },
      {
        "comment": " 4 bpp",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "PIXELFORMAT_COMPRESSED_PVRT_RGBA"
      },
      {
        "comment": " 8 bit per pixel (no alpha)",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "PIXELFORMAT_UNCOMPRESSED_GRAYSCALE"
      },
      {
        "comment": " 8*2 bpp (2 channels)",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "PIXELFORMAT_UNCOMPRESSED_GRAY_ALPHA"
      },
      {
        "comment": " 32 bpp (1 channel - float)",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "PIXELFORMAT_UNCOMPRESSED_R32"
      },
      {
        "comment": " 32*3 bpp (3 channels - float)",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "PIXELFORMAT_UNCOMPRESSED_R32G32B32"
      },
      {
        "comment": " 32*4 bpp (4 channels - float)",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "PIXELFORMAT_UNCOMPRESSED_R32G32B32A32"
      },
      {
        "comment": " 16 bpp (4 bit alpha)",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "PIXELFORMAT_UNCOMPRESSED_R4G4B4A4"
      },
      {
        "comment": " 16 bpp (1 bit alpha)",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "PIXELFORMAT_UNCOMPRESSED_R5G5B5A1"
      },
      {
        "comment": " 16 bpp",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "PIXELFORMAT_UNCOMPRESSED_R5G6B5"
      },
      {
        "comment": " 24 bpp",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "PIXELFORMAT_UNCOMPRESSED_R8G8B8"
      },
      {
        "comment": " 32 bpp",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "PIXELFORMAT_UNCOMPRESSED_R8G8B8A8"
      },
      {
        "comment": " Shader attribute type: float",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "SHADER_ATTRIB_FLOAT"
      },
      {
        "comment": " Shader attribute type: vec2 (2 float)",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "SHADER_ATTRIB_VEC2"
      },
      {
        "comment": " Shader attribute type: vec3 (3 float)",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "SHADER_ATTRIB_VEC3"
      },
      {
        "comment": " Shader attribute type: vec4 (4 float)",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "SHADER_ATTRIB_VEC4"
      },
      {
        "comment": " Shader location: vector uniform: ambient color",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "SHADER_LOC_COLOR_AMBIENT"
      },
      {
        "comment": " Shader location: vector uniform: diffuse color",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "SHADER_LOC_COLOR_DIFFUSE"
      },
      {
        "comment": " Shader location: vector uniform: specular color",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "SHADER_LOC_COLOR_SPECULAR"
      },
      {
        "comment": " Shader location: sampler2d texture: albedo (same as: SHADER_LOC_MAP_DIFFUSE)",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "SHADER_LOC_MAP_ALBEDO"
      },
      {
        "comment": " Shader location: sampler2d texture: brdf",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "SHADER_LOC_MAP_BRDF"
      },
      {
        "comment": " Shader location: samplerCube texture: cubemap",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "SHADER_LOC_MAP_CUBEMAP"
      },
      {
        "comment": " Shader location: sampler2d texture: emission",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "SHADER_LOC_MAP_EMISSION"
      },
      {
        "comment": " Shader location: sampler2d texture: height",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "SHADER_LOC_MAP_HEIGHT"
      },
      {
        "comment": " Shader location: samplerCube texture: irradiance",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "SHADER_LOC_MAP_IRRADIANCE"
      },
      {
        "comment": " Shader location: sampler2d texture: metalness (same as: SHADER_LOC_MAP_SPECULAR)",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "SHADER_LOC_MAP_METALNESS"
      },
      {
        "comment": " Shader location: sampler2d texture: normal",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "SHADER_LOC_MAP_NORMAL"
      },
      {
        "comment": " Shader location: sampler2d texture: occlusion",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "SHADER_LOC_MAP_OCCLUSION"
      },
      {
        "comment": " Shader location: samplerCube texture: prefilter",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "SHADER_LOC_MAP_PREFILTER"
      },
      {
        "comment": " Shader location: sampler2d texture: roughness",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "SHADER_LOC_MAP_ROUGHNESS"
      },
      {
        "comment": " Shader location: matrix uniform: model (transform)",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "SHADER_LOC_MATRIX_MODEL"
      },
      {
        "comment": " Shader location: matrix uniform: model-view-projection",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "SHADER_LOC_MATRIX_MVP"
      },
      {
        "comment": " Shader location: matrix uniform: normal",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "SHADER_LOC_MATRIX_NORMAL"
      },
      {
        "comment": " Shader location: matrix uniform: projection",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "SHADER_LOC_MATRIX_PROJECTION"
      },
      {
        "comment": " Shader location: matrix uniform: view (camera transform)",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "SHADER_LOC_MATRIX_VIEW"
      },
      {
        "comment": " Shader location: vector uniform: view",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "SHADER_LOC_VECTOR_VIEW"
      },
      {
        "comment": " Shader location: vertex attribute: color",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "SHADER_LOC_VERTEX_COLOR"
      },
      {
        "comment": " Shader location: vertex attribute: normal",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "SHADER_LOC_VERTEX_NORMAL"
      },
      {
        "comment": " Shader location: vertex attribute: position",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "SHADER_LOC_VERTEX_POSITION"
      },
      {
        "comment": " Shader location: vertex attribute: tangent",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "SHADER_LOC_VERTEX_TANGENT"
      },
      {
        "comment": " Shader location: vertex attribute: texcoord01",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "SHADER_LOC_VERTEX_TEXCOORD01"
      },
      {
        "comment": " Shader location: vertex attribute: texcoord02",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "SHADER_LOC_VERTEX_TEXCOORD02"
      },
      {
        "comment": " Shader uniform type: float",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "SHADER_UNIFORM_FLOAT"
      },
      {
        "comment": " Shader uniform type: int",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "SHADER_UNIFORM_INT"
      },
      {
        "comment": " Shader uniform type: ivec2 (2 int)",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "SHADER_UNIFORM_IVEC2"
      },
      {
        "comment": " Shader uniform type: ivec3 (3 int)",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "SHADER_UNIFORM_IVEC3"
      },
      {
        "comment": " Shader uniform type: ivec4 (4 int)",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "SHADER_UNIFORM_IVEC4"
      },
      {
        "comment": " Shader uniform type: sampler2d",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "SHADER_UNIFORM_SAMPLER2D"
      },
      {
        "comment": " Shader uniform type: vec2 (2 float)",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "SHADER_UNIFORM_VEC2"
      },
      {
        "comment": " Shader uniform type: vec3 (3 float)",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "SHADER_UNIFORM_VEC3"
      },
      {
        "comment": " Shader uniform type: vec4 (4 float)",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "SHADER_UNIFORM_VEC4"
      },
      {
        "comment": " Anisotropic filtering 16x",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "TEXTURE_FILTER_ANISOTROPIC_16X"
      },
      {
        "comment": " Anisotropic filtering 4x",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "TEXTURE_FILTER_ANISOTROPIC_4X"
      },
      {
        "comment": " Anisotropic filtering 8x",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "TEXTURE_FILTER_ANISOTROPIC_8X"
      },
      {
        "comment": " Linear filtering",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "TEXTURE_FILTER_BILINEAR"
      },
      {
        "comment": " No filter, just pixel approximation",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "TEXTURE_FILTER_POINT"
      },
      {
        "comment": " Trilinear filtering (linear with mipmaps)",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "TEXTURE_FILTER_TRILINEAR"
      },
      {
        "comment": " Clamps texture to edge pixel in tiled mode",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "TEXTURE_WRAP_CLAMP"
      },
      {
        "comment": " Mirrors and clamps to border the texture in tiled mode",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "TEXTURE_WRAP_MIRROR_CLAMP"
      },
      {
        "comment": " Mirrors and repeats the texture in tiled mode",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "TEXTURE_WRAP_MIRROR_REPEAT"
      },
      {
        "comment": " Repeats texture in tiled mode",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "TEXTURE_WRAP_REPEAT"
      }
    ],
    "imports": [
      {
        "alias": "c",
        "path": [
          "libs",
          "c"
        ]
      }
    ],
    "macros": []
  },
  "raylib.gl": {
    "classes": [
      {
        "annotations": [
          {
            "argument": "rlDrawCall",
            "name": "@nativedefine"
          },
          {
            "name": "@onstack"
          }
        ],
        "comment": " of those state-change happens (this is done in core module)",
        "members": [
          {
            "datatype": {
              "type": "CInt"
            },
            "name": "mode"
          },
          {
            "datatype": {
              "type": "CInt"
            },
            "name": "vertexCount"
          },
          {
            "datatype": {
              "type": "CInt"
            },
            "name": "vertexAlignment"
          },
          {
            "datatype": {
              "type": "CUInt"
            },
            "name": "textureId"
          }
        ],
        "name": "rlDrawCall"
      },
      {
        "annotations": [
          {
            "argument": "rlRenderBatch",
            "name": "@nativedefine"
          },
          {
            "name": "@onstack"
          }
        ],
        "comment": " rlRenderBatch type",
        "members": [
          {
            "datatype": {
              "type": "CInt"
            },
            "name": "bufferCount"
          },
          {
            "datatype": {
              "type": "CInt"
            },
            "name": "currentBuffer"
          },
          {
            "datatype": {
              "arguments": [
                {
                  "type": "rlVertexBuffer"
                }
              ],
              "type": "Ptr"
            },
            "name": "vertexBuffer"
          },
          {
            "datatype": {
              "arguments": [
                {
                  "type": "rlDrawCall"
                }
              ],
              "type": "Ptr"
            },
            "name": "draws"
          },
          {
            "datatype": {
              "type": "CInt"
            },
            "name": "drawCounter"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "currentDepth"
          }
        ],
        "name": "rlRenderBatch"
      },
      {
        "annotations": [
          {
            "argument": "rlVertexBuffer",
            "name": "@nativedefine"
          }
        ],
        "comment": " Dynamic vertex buffers (position + texcoords + colors + indices arrays)",
        "members": [],
        "name": "rlVertexBuffer"
      },
      {
        "annotations": [
          {
            "argument": "rlglData",
            "name": "@nativedefine"
          }
        ],
        "comment": "",
        "members": [],
        "name": "rlglData"
      }
    ],
    "functions": [
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Activate multiple draw color buffers",
        "name": "rl_active_draw_buffers",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "count"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Select and active a texture slot",
        "name": "rl_active_texture_slot",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "slot"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Initialize drawing mode (how to organize vertex)",
        "name": "rl_begin",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "mode"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Bind image texture",
        "name": "rl_bind_image_texture",
        "parameters": [
          {
            "datatype": {
              "type": "u32"
            },
            "name": "id"
          },
          {
            "datatype": {
              "type": "u32"
            },
            "name": "index"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "format"
          },
          {
            "datatype": {
              "type": "bool"
            },
            "name": "readonly"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Bind SSBO buffer",
        "name": "rl_bind_shader_buffer",
        "parameters": [
          {
            "datatype": {
              "type": "u32"
            },
            "name": "id"
          },
          {
            "datatype": {
              "type": "u32"
            },
            "name": "index"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Check and log OpenGL error codes",
        "name": "rl_check_errors",
        "parameters": [],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Check internal buffer overflow for a given number of vertex",
        "name": "rl_check_render_batch_limit",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "v_count"
          }
        ],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Clear color buffer with color",
        "name": "rl_clear_color",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "r"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "g"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "b"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "a"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Clear used screen buffers (color and depth)",
        "name": "rl_clear_screen_buffers",
        "parameters": [],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Define one vertex (color) - 3 float",
        "name": "rl_color3f",
        "parameters": [
          {
            "datatype": {
              "type": "float"
            },
            "name": "x"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "y"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "z"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Define one vertex (color) - 4 float",
        "name": "rl_color4f",
        "parameters": [
          {
            "datatype": {
              "type": "float"
            },
            "name": "x"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "y"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "z"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "w"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Define one vertex (color) - 4 byte",
        "name": "rl_color4ub",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "r"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "g"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "b"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "a"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Compile custom shader and return shader id (type: RL_VERTEX_SHADER, RL_FRAGMENT_SHADER, RL_COMPUTE_SHADER)",
        "name": "rl_compile_shader",
        "parameters": [
          {
            "datatype": {
              "type": "str"
            },
            "name": "shader_code"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "type"
          }
        ],
        "return_type": {
          "type": "u32"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Dispatch compute shader (equivalent to *draw* for graphics pipeline)",
        "name": "rl_compute_shader_dispatch",
        "parameters": [
          {
            "datatype": {
              "type": "u32"
            },
            "name": "group_x"
          },
          {
            "datatype": {
              "type": "u32"
            },
            "name": "group_y"
          },
          {
            "datatype": {
              "type": "u32"
            },
            "name": "group_z"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Copy SSBO data between buffers",
        "name": "rl_copy_shader_buffer",
        "parameters": [
          {
            "datatype": {
              "type": "u32"
            },
            "name": "dest_id"
          },
          {
            "datatype": {
              "type": "u32"
            },
            "name": "src_id"
          },
          {
            "datatype": {
              "type": "u32"
            },
            "name": "dest_offset"
          },
          {
            "datatype": {
              "type": "u32"
            },
            "name": "src_offset"
          },
          {
            "datatype": {
              "type": "u32"
            },
            "name": "count"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Set cubemap parameters (filter, wrap)",
        "name": "rl_cubemap_parameters",
        "parameters": [
          {
            "datatype": {
              "type": "u32"
            },
            "name": "id"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "param"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "value"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Disable backface culling",
        "name": "rl_disable_backface_culling",
        "parameters": [],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Disable color blending",
        "name": "rl_disable_color_blend",
        "parameters": [],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Disable depth write",
        "name": "rl_disable_depth_mask",
        "parameters": [],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Disable depth test",
        "name": "rl_disable_depth_test",
        "parameters": [],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Disable render texture (fbo), return to default framebuffer",
        "name": "rl_disable_framebuffer",
        "parameters": [],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Disable scissor test",
        "name": "rl_disable_scissor_test",
        "parameters": [],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Disable shader program",
        "name": "rl_disable_shader",
        "parameters": [],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Disable line aliasing",
        "name": "rl_disable_smooth_lines",
        "parameters": [],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Disable attribute state pointer",
        "name": "rl_disable_state_pointer",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "vertex_attrib_type"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Disable stereo rendering",
        "name": "rl_disable_stereo_render",
        "parameters": [],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Disable texture",
        "name": "rl_disable_texture",
        "parameters": [],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Disable texture cubemap",
        "name": "rl_disable_texture_cubemap",
        "parameters": [],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Disable vertex array (VAO, if supported)",
        "name": "rl_disable_vertex_array",
        "parameters": [],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Disable vertex attribute index",
        "name": "rl_disable_vertex_attribute",
        "parameters": [
          {
            "datatype": {
              "type": "u32"
            },
            "name": "index"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Disable vertex buffer (VBO)",
        "name": "rl_disable_vertex_buffer",
        "parameters": [],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Disable vertex buffer element (VBO element)",
        "name": "rl_disable_vertex_buffer_element",
        "parameters": [],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Disable wire mode",
        "name": "rl_disable_wire_mode",
        "parameters": [],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Factory function for: rlDrawCall",
        "name": "rl_draw_call",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "mode"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "vertex_count"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "vertex_alignment"
          },
          {
            "datatype": {
              "type": "u32"
            },
            "name": "texture_id"
          }
        ],
        "return_type": {
          "type": "rlDrawCall"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Draw render batch data (Update->Draw->Reset)",
        "name": "rl_draw_render_batch",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "type": "rlRenderBatch"
                }
              ],
              "type": "Ptr"
            },
            "name": "batch"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Update and draw internal render batch",
        "name": "rl_draw_render_batch_active",
        "parameters": [],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "rl_draw_vertex_array",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "offset"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "count"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "rl_draw_vertex_array_elements",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "offset"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "count"
          },
          {
            "datatype": {
              "type": "AnyPtrToConst"
            },
            "name": "buffer"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "rl_draw_vertex_array_elements_instanced",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "offset"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "count"
          },
          {
            "datatype": {
              "type": "AnyPtrToConst"
            },
            "name": "buffer"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "instances"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "rl_draw_vertex_array_instanced",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "offset"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "count"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "instances"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Enable backface culling",
        "name": "rl_enable_backface_culling",
        "parameters": [],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Enable color blending",
        "name": "rl_enable_color_blend",
        "parameters": [],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Enable depth write",
        "name": "rl_enable_depth_mask",
        "parameters": [],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Enable depth test",
        "name": "rl_enable_depth_test",
        "parameters": [],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Enable render texture (fbo)",
        "name": "rl_enable_framebuffer",
        "parameters": [
          {
            "datatype": {
              "type": "u32"
            },
            "name": "id"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Enable scissor test",
        "name": "rl_enable_scissor_test",
        "parameters": [],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Enable shader program",
        "name": "rl_enable_shader",
        "parameters": [
          {
            "datatype": {
              "type": "u32"
            },
            "name": "id"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Enable line aliasing",
        "name": "rl_enable_smooth_lines",
        "parameters": [],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Enable attribute state pointer",
        "name": "rl_enable_state_pointer",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "vertex_attrib_type"
          },
          {
            "datatype": {
              "type": "AnyPtr"
            },
            "name": "buffer"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Enable stereo rendering",
        "name": "rl_enable_stereo_render",
        "parameters": [],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Enable texture",
        "name": "rl_enable_texture",
        "parameters": [
          {
            "datatype": {
              "type": "u32"
            },
            "name": "id"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Enable texture cubemap",
        "name": "rl_enable_texture_cubemap",
        "parameters": [
          {
            "datatype": {
              "type": "u32"
            },
            "name": "id"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Enable vertex array (VAO, if supported)",
        "name": "rl_enable_vertex_array",
        "parameters": [
          {
            "datatype": {
              "type": "u32"
            },
            "name": "vao_id"
          }
        ],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Enable vertex attribute index",
        "name": "rl_enable_vertex_attribute",
        "parameters": [
          {
            "datatype": {
              "type": "u32"
            },
            "name": "index"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Enable vertex buffer (VBO)",
        "name": "rl_enable_vertex_buffer",
        "parameters": [
          {
            "datatype": {
              "type": "u32"
            },
            "name": "id"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Enable vertex buffer element (VBO element)",
        "name": "rl_enable_vertex_buffer_element",
        "parameters": [
          {
            "datatype": {
              "type": "u32"
            },
            "name": "id"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Enable wire mode",
        "name": "rl_enable_wire_mode",
        "parameters": [],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Finish vertex providing",
        "name": "rl_end",
        "parameters": [],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Attach texture/renderbuffer to a framebuffer",
        "name": "rl_framebuffer_attach",
        "parameters": [
          {
            "datatype": {
              "type": "u32"
            },
            "name": "fbo_id"
          },
          {
            "datatype": {
              "type": "u32"
            },
            "name": "tex_id"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "attach_type"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "tex_type"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "mip_level"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Verify framebuffer is complete",
        "name": "rl_framebuffer_complete",
        "parameters": [
          {
            "datatype": {
              "type": "u32"
            },
            "name": "id"
          }
        ],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "rl_frustum",
        "parameters": [
          {
            "datatype": {
              "type": "f64"
            },
            "name": "left"
          },
          {
            "datatype": {
              "type": "f64"
            },
            "name": "right"
          },
          {
            "datatype": {
              "type": "f64"
            },
            "name": "bottom"
          },
          {
            "datatype": {
              "type": "f64"
            },
            "name": "top"
          },
          {
            "datatype": {
              "type": "f64"
            },
            "name": "znear"
          },
          {
            "datatype": {
              "type": "f64"
            },
            "name": "zfar"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Generate mipmap data for selected texture",
        "name": "rl_gen_texture_mipmaps",
        "parameters": [
          {
            "datatype": {
              "type": "u32"
            },
            "name": "id"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "width"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "height"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "format"
          },
          {
            "datatype": {
              "arguments": [
                {
                  "type": "CInt"
                }
              ],
              "type": "Ptr"
            },
            "name": "mipmaps"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Get default framebuffer height",
        "name": "rl_get_framebuffer_height",
        "parameters": [],
        "return_type": {
          "type": "int"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Get default framebuffer width",
        "name": "rl_get_framebuffer_width",
        "parameters": [],
        "return_type": {
          "type": "int"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Get OpenGL internal formats",
        "name": "rl_get_gl_texture_formats",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "format"
          },
          {
            "datatype": {
              "arguments": [
                {
                  "type": "CUInt"
                }
              ],
              "type": "Ptr"
            },
            "name": "gl_internal_format"
          },
          {
            "datatype": {
              "arguments": [
                {
                  "type": "CUInt"
                }
              ],
              "type": "Ptr"
            },
            "name": "gl_format"
          },
          {
            "datatype": {
              "arguments": [
                {
                  "type": "CUInt"
                }
              ],
              "type": "Ptr"
            },
            "name": "gl_type"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Get the line drawing width",
        "name": "rl_get_line_width",
        "parameters": [],
        "return_type": {
          "type": "float"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Get shader location attribute",
        "name": "rl_get_location_attrib",
        "parameters": [
          {
            "datatype": {
              "type": "u32"
            },
            "name": "shader_id"
          },
          {
            "datatype": {
              "type": "str"
            },
            "name": "attrib_name"
          }
        ],
        "return_type": {
          "type": "int"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Get shader location uniform",
        "name": "rl_get_location_uniform",
        "parameters": [
          {
            "datatype": {
              "type": "u32"
            },
            "name": "shader_id"
          },
          {
            "datatype": {
              "type": "str"
            },
            "name": "uniform_name"
          }
        ],
        "return_type": {
          "type": "int"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Get internal modelview matrix",
        "name": "rl_get_matrix_modelview",
        "parameters": [],
        "return_type": {
          "type": "Matrix"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Get internal projection matrix",
        "name": "rl_get_matrix_projection",
        "parameters": [],
        "return_type": {
          "type": "Matrix"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Get internal projection matrix for stereo render (selected eye)",
        "name": "rl_get_matrix_projection_stereo",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "eye"
          }
        ],
        "return_type": {
          "type": "Matrix"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Get internal accumulated transform matrix",
        "name": "rl_get_matrix_transform",
        "parameters": [],
        "return_type": {
          "type": "Matrix"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Get internal view offset matrix for stereo render (selected eye)",
        "name": "rl_get_matrix_view_offset_stereo",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "eye"
          }
        ],
        "return_type": {
          "type": "Matrix"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Get name string for pixel format",
        "name": "rl_get_pixel_format_name",
        "parameters": [
          {
            "datatype": {
              "type": "u32"
            },
            "name": "format"
          }
        ],
        "return_type": {
          "arguments": [
            {
              "arguments": [
                {
                  "type": "CChar"
                }
              ],
              "type": "Const"
            }
          ],
          "type": "Ptr"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Get SSBO buffer size",
        "name": "rl_get_shader_buffer_size",
        "parameters": [
          {
            "datatype": {
              "type": "u32"
            },
            "name": "id"
          }
        ],
        "return_type": {
          "type": "u32"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Get default shader id",
        "name": "rl_get_shader_id_default",
        "parameters": [],
        "return_type": {
          "type": "u32"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Get default shader locations",
        "name": "rl_get_shader_locs_default",
        "parameters": [],
        "return_type": {
          "arguments": [
            {
              "type": "CInt"
            }
          ],
          "type": "Ptr"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Get default texture id",
        "name": "rl_get_texture_id_default",
        "parameters": [],
        "return_type": {
          "type": "u32"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Get current OpenGL version",
        "name": "rl_get_version",
        "parameters": [],
        "return_type": {
          "type": "int"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Check if stereo render is enabled",
        "name": "rl_is_stereo_render_enabled",
        "parameters": [],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Load compute shader program",
        "name": "rl_load_compute_shader_program",
        "parameters": [
          {
            "datatype": {
              "type": "u32"
            },
            "name": "shader_id"
          }
        ],
        "return_type": {
          "type": "u32"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Load and draw a cube",
        "name": "rl_load_draw_cube",
        "parameters": [],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Load and draw a quad",
        "name": "rl_load_draw_quad",
        "parameters": [],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Load OpenGL extensions (loader function required)",
        "name": "rl_load_extensions",
        "parameters": [
          {
            "datatype": {
              "type": "AnyPtr"
            },
            "name": "loader"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Load an empty framebuffer",
        "name": "rl_load_framebuffer",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "width"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "height"
          }
        ],
        "return_type": {
          "type": "u32"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Reset current matrix to identity matrix",
        "name": "rl_load_identity",
        "parameters": [],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Load a render batch system",
        "name": "rl_load_render_batch",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "num_buffers"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "buffer_elements"
          }
        ],
        "return_type": {
          "type": "rlRenderBatch"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Load shader storage buffer object (SSBO)",
        "name": "rl_load_shader_buffer",
        "parameters": [
          {
            "datatype": {
              "type": "u32"
            },
            "name": "size"
          },
          {
            "datatype": {
              "type": "AnyPtrToConst"
            },
            "name": "data"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "usage_hint"
          }
        ],
        "return_type": {
          "type": "u32"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Load shader from code strings",
        "name": "rl_load_shader_code",
        "parameters": [
          {
            "datatype": {
              "type": "str"
            },
            "name": "vs_code"
          },
          {
            "datatype": {
              "type": "str"
            },
            "name": "fs_code"
          }
        ],
        "return_type": {
          "type": "u32"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Load custom shader program",
        "name": "rl_load_shader_program",
        "parameters": [
          {
            "datatype": {
              "type": "u32"
            },
            "name": "v_shader_id"
          },
          {
            "datatype": {
              "type": "u32"
            },
            "name": "f_shader_id"
          }
        ],
        "return_type": {
          "type": "u32"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Load texture in GPU",
        "name": "rl_load_texture",
        "parameters": [
          {
            "datatype": {
              "type": "AnyPtrToConst"
            },
            "name": "data"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "width"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "height"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "format"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "mipmap_count"
          }
        ],
        "return_type": {
          "type": "u32"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Load texture cubemap",
        "name": "rl_load_texture_cubemap",
        "parameters": [
          {
            "datatype": {
              "type": "AnyPtrToConst"
            },
            "name": "data"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "size"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "format"
          }
        ],
        "return_type": {
          "type": "u32"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Load depth texture/renderbuffer (to be attached to fbo)",
        "name": "rl_load_texture_depth",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "width"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "height"
          },
          {
            "datatype": {
              "type": "bool"
            },
            "name": "use_render_buffer"
          }
        ],
        "return_type": {
          "type": "u32"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Load vertex array (vao) if supported",
        "name": "rl_load_vertex_array",
        "parameters": [],
        "return_type": {
          "type": "u32"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Load a vertex buffer attribute",
        "name": "rl_load_vertex_buffer",
        "parameters": [
          {
            "datatype": {
              "type": "AnyPtrToConst"
            },
            "name": "buffer"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "size"
          },
          {
            "datatype": {
              "type": "bool"
            },
            "name": "dynamic"
          }
        ],
        "return_type": {
          "type": "u32"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Load a new attributes element buffer",
        "name": "rl_load_vertex_buffer_element",
        "parameters": [
          {
            "datatype": {
              "type": "AnyPtrToConst"
            },
            "name": "buffer"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "size"
          },
          {
            "datatype": {
              "type": "bool"
            },
            "name": "dynamic"
          }
        ],
        "return_type": {
          "type": "u32"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Choose the current matrix to be transformed",
        "name": "rl_matrix_mode",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "mode"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Define one vertex (normal) - 3 float",
        "name": "rl_normal3f",
        "parameters": [
          {
            "datatype": {
              "type": "float"
            },
            "name": "x"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "y"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "z"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "rl_ortho",
        "parameters": [
          {
            "datatype": {
              "type": "f64"
            },
            "name": "left"
          },
          {
            "datatype": {
              "type": "f64"
            },
            "name": "right"
          },
          {
            "datatype": {
              "type": "f64"
            },
            "name": "bottom"
          },
          {
            "datatype": {
              "type": "f64"
            },
            "name": "top"
          },
          {
            "datatype": {
              "type": "f64"
            },
            "name": "znear"
          },
          {
            "datatype": {
              "type": "f64"
            },
            "name": "zfar"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Pop latest inserted matrix from stack",
        "name": "rl_pop_matrix",
        "parameters": [],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Push the current matrix to stack",
        "name": "rl_push_matrix",
        "parameters": [],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Read screen pixel data (color buffer)",
        "name": "rl_read_screen_pixels",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "width"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "height"
          }
        ],
        "return_type": {
          "arguments": [
            {
              "type": "CUChar"
            }
          ],
          "type": "Ptr"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Read SSBO buffer data (GPU->CPU)",
        "name": "rl_read_shader_buffer",
        "parameters": [
          {
            "datatype": {
              "type": "u32"
            },
            "name": "id"
          },
          {
            "datatype": {
              "type": "AnyPtr"
            },
            "name": "dest"
          },
          {
            "datatype": {
              "type": "u32"
            },
            "name": "count"
          },
          {
            "datatype": {
              "type": "u32"
            },
            "name": "offset"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Read texture pixel data",
        "name": "rl_read_texture_pixels",
        "parameters": [
          {
            "datatype": {
              "type": "u32"
            },
            "name": "id"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "width"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "height"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "format"
          }
        ],
        "return_type": {
          "type": "AnyPtr"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Factory function for: rlRenderBatch",
        "name": "rl_render_batch",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "buffer_count"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "current_buffer"
          },
          {
            "datatype": {
              "arguments": [
                {
                  "type": "rlVertexBuffer"
                }
              ],
              "type": "Ptr"
            },
            "name": "vertex_buffer"
          },
          {
            "datatype": {
              "arguments": [
                {
                  "type": "rlDrawCall"
                }
              ],
              "type": "Ptr"
            },
            "name": "draws"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "draw_counter"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "current_depth"
          }
        ],
        "return_type": {
          "type": "rlRenderBatch"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Multiply the current matrix by a rotation matrix",
        "name": "rl_rotatef",
        "parameters": [
          {
            "datatype": {
              "type": "float"
            },
            "name": "angle"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "x"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "y"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "z"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Multiply the current matrix by a scaling matrix",
        "name": "rl_scalef",
        "parameters": [
          {
            "datatype": {
              "type": "float"
            },
            "name": "x"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "y"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "z"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Scissor test",
        "name": "rl_scissor",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "x"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "y"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "width"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "height"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Set blending mode factor and equation (using OpenGL factors)",
        "name": "rl_set_blend_factors",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "gl_src_factor"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "gl_dst_factor"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "gl_equation"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Set blending mode factors and equations separately (using OpenGL factors)",
        "name": "rl_set_blend_factors_separate",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "gl_src_rgb"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "gl_dst_rgb"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "gl_src_alpha"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "gl_dst_alpha"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "gl_eq_rgb"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "gl_eq_alpha"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Set blending mode",
        "name": "rl_set_blend_mode",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "mode"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Set face culling mode",
        "name": "rl_set_cull_face",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "mode"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Set current framebuffer height",
        "name": "rl_set_framebuffer_height",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "height"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Set current framebuffer width",
        "name": "rl_set_framebuffer_width",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "width"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Set the line drawing width",
        "name": "rl_set_line_width",
        "parameters": [
          {
            "datatype": {
              "type": "float"
            },
            "name": "width"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Set a custom modelview matrix (replaces internal modelview matrix)",
        "name": "rl_set_matrix_modelview",
        "parameters": [
          {
            "datatype": {
              "type": "Matrix"
            },
            "name": "view"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Set a custom projection matrix (replaces internal projection matrix)",
        "name": "rl_set_matrix_projection",
        "parameters": [
          {
            "datatype": {
              "type": "Matrix"
            },
            "name": "proj"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Set eyes projection matrices for stereo rendering",
        "name": "rl_set_matrix_projection_stereo",
        "parameters": [
          {
            "datatype": {
              "type": "Matrix"
            },
            "name": "right"
          },
          {
            "datatype": {
              "type": "Matrix"
            },
            "name": "left"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Set eyes view offsets matrices for stereo rendering",
        "name": "rl_set_matrix_view_offset_stereo",
        "parameters": [
          {
            "datatype": {
              "type": "Matrix"
            },
            "name": "right"
          },
          {
            "datatype": {
              "type": "Matrix"
            },
            "name": "left"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Set the active render batch for rlgl (NULL for default internal)",
        "name": "rl_set_render_batch_active",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "type": "rlRenderBatch"
                }
              ],
              "type": "Ptr"
            },
            "name": "batch"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Set shader currently active (id and locations)",
        "name": "rl_set_shader",
        "parameters": [
          {
            "datatype": {
              "type": "u32"
            },
            "name": "id"
          },
          {
            "datatype": {
              "arguments": [
                {
                  "type": "CInt"
                }
              ],
              "type": "Ptr"
            },
            "name": "locs"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Set current texture for render batch and check buffers limits",
        "name": "rl_set_texture",
        "parameters": [
          {
            "datatype": {
              "type": "u32"
            },
            "name": "id"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Set shader value uniform",
        "name": "rl_set_uniform",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "loc_index"
          },
          {
            "datatype": {
              "type": "AnyPtrToConst"
            },
            "name": "value"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "uniform_type"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "count"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Set shader value matrix",
        "name": "rl_set_uniform_matrix",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "loc_index"
          },
          {
            "datatype": {
              "type": "Matrix"
            },
            "name": "mat"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Set shader value sampler",
        "name": "rl_set_uniform_sampler",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "loc_index"
          },
          {
            "datatype": {
              "type": "u32"
            },
            "name": "texture_id"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "rl_set_vertex_attribute",
        "parameters": [
          {
            "datatype": {
              "type": "u32"
            },
            "name": "index"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "comp_size"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "type"
          },
          {
            "datatype": {
              "type": "bool"
            },
            "name": "normalized"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "stride"
          },
          {
            "datatype": {
              "type": "AnyPtrToConst"
            },
            "name": "pointer"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Set vertex attribute default value",
        "name": "rl_set_vertex_attribute_default",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "loc_index"
          },
          {
            "datatype": {
              "type": "AnyPtrToConst"
            },
            "name": "value"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "attrib_type"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "count"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "rl_set_vertex_attribute_divisor",
        "parameters": [
          {
            "datatype": {
              "type": "u32"
            },
            "name": "index"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "divisor"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Define one vertex (texture coordinate) - 2 float",
        "name": "rl_tex_coord2f",
        "parameters": [
          {
            "datatype": {
              "type": "float"
            },
            "name": "x"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "y"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Set texture parameters (filter, wrap)",
        "name": "rl_texture_parameters",
        "parameters": [
          {
            "datatype": {
              "type": "u32"
            },
            "name": "id"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "param"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "value"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Multiply the current matrix by a translation matrix",
        "name": "rl_translatef",
        "parameters": [
          {
            "datatype": {
              "type": "float"
            },
            "name": "x"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "y"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "z"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Delete framebuffer from GPU",
        "name": "rl_unload_framebuffer",
        "parameters": [
          {
            "datatype": {
              "type": "u32"
            },
            "name": "id"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Unload render batch system",
        "name": "rl_unload_render_batch",
        "parameters": [
          {
            "datatype": {
              "type": "rlRenderBatch"
            },
            "name": "batch"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Unload shader storage buffer object (SSBO)",
        "name": "rl_unload_shader_buffer",
        "parameters": [
          {
            "datatype": {
              "type": "u32"
            },
            "name": "ssbo_id"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Unload shader program",
        "name": "rl_unload_shader_program",
        "parameters": [
          {
            "datatype": {
              "type": "u32"
            },
            "name": "id"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Unload texture from GPU memory",
        "name": "rl_unload_texture",
        "parameters": [
          {
            "datatype": {
              "type": "u32"
            },
            "name": "id"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "rl_unload_vertex_array",
        "parameters": [
          {
            "datatype": {
              "type": "u32"
            },
            "name": "vao_id"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "rl_unload_vertex_buffer",
        "parameters": [
          {
            "datatype": {
              "type": "u32"
            },
            "name": "vbo_id"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Update SSBO buffer data",
        "name": "rl_update_shader_buffer",
        "parameters": [
          {
            "datatype": {
              "type": "u32"
            },
            "name": "id"
          },
          {
            "datatype": {
              "type": "AnyPtrToConst"
            },
            "name": "data"
          },
          {
            "datatype": {
              "type": "u32"
            },
            "name": "data_size"
          },
          {
            "datatype": {
              "type": "u32"
            },
            "name": "offset"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Update GPU texture with new data",
        "name": "rl_update_texture",
        "parameters": [
          {
            "datatype": {
              "type": "u32"
            },
            "name": "id"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "offset_x"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "offset_y"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "width"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "height"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "format"
          },
          {
            "datatype": {
              "type": "AnyPtrToConst"
            },
            "name": "data"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Update GPU buffer with new data",
        "name": "rl_update_vertex_buffer",
        "parameters": [
          {
            "datatype": {
              "type": "u32"
            },
            "name": "buffer_id"
          },
          {
            "datatype": {
              "type": "AnyPtrToConst"
            },
            "name": "data"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "data_size"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "offset"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Update vertex buffer elements with new data",
        "name": "rl_update_vertex_buffer_elements",
        "parameters": [
          {
            "datatype": {
              "type": "u32"
            },
            "name": "id"
          },
          {
            "datatype": {
              "type": "AnyPtrToConst"
            },
            "name": "data"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "data_size"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "offset"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Define one vertex (position) - 2 float",
        "name": "rl_vertex2f",
        "parameters": [
          {
            "datatype": {
              "type": "float"
            },
            "name": "x"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "y"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Define one vertex (position) - 2 int",
        "name": "rl_vertex2i",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "x"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "y"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Define one vertex (position) - 3 float",
        "name": "rl_vertex3f",
        "parameters": [
          {
            "datatype": {
              "type": "float"
            },
            "name": "x"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "y"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "z"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Set the viewport area",
        "name": "rl_viewport",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "x"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "y"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "width"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "height"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " De-initialize rlgl (buffers, shaders, textures)",
        "name": "rlgl_close",
        "parameters": [],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Initialize rlgl (buffers, shaders, textures, states)",
        "name": "rlgl_init",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "width"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "height"
          }
        ],
        "return_type": {
          "type": "None"
        }
      }
    ],
    "global_consts": [
      {
        "comment": " Framebuffer attachment type: color 0",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "RL_ATTACHMENT_COLOR_CHANNEL0"
      },
      {
        "comment": " Framebuffer attachment type: color 1",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "RL_ATTACHMENT_COLOR_CHANNEL1"
      },
      {
        "comment": " Framebuffer attachment type: color 2",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "RL_ATTACHMENT_COLOR_CHANNEL2"
      },
      {
        "comment": " Framebuffer attachment type: color 3",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "RL_ATTACHMENT_COLOR_CHANNEL3"
      },
      {
        "comment": " Framebuffer attachment type: color 4",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "RL_ATTACHMENT_COLOR_CHANNEL4"
      },
      {
        "comment": " Framebuffer attachment type: color 5",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "RL_ATTACHMENT_COLOR_CHANNEL5"
      },
      {
        "comment": " Framebuffer attachment type: color 6",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "RL_ATTACHMENT_COLOR_CHANNEL6"
      },
      {
        "comment": " Framebuffer attachment type: color 7",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "RL_ATTACHMENT_COLOR_CHANNEL7"
      },
      {
        "comment": " Framebuffer texture attachment type: cubemap, -X side",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "RL_ATTACHMENT_CUBEMAP_NEGATIVE_X"
      },
      {
        "comment": " Framebuffer texture attachment type: cubemap, -Y side",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "RL_ATTACHMENT_CUBEMAP_NEGATIVE_Y"
      },
      {
        "comment": " Framebuffer texture attachment type: cubemap, -Z side",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "RL_ATTACHMENT_CUBEMAP_NEGATIVE_Z"
      },
      {
        "comment": " Framebuffer texture attachment type: cubemap, +X side",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "RL_ATTACHMENT_CUBEMAP_POSITIVE_X"
      },
      {
        "comment": " Framebuffer texture attachment type: cubemap, +Y side",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "RL_ATTACHMENT_CUBEMAP_POSITIVE_Y"
      },
      {
        "comment": " Framebuffer texture attachment type: cubemap, +Z side",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "RL_ATTACHMENT_CUBEMAP_POSITIVE_Z"
      },
      {
        "comment": " Framebuffer attachment type: depth",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "RL_ATTACHMENT_DEPTH"
      },
      {
        "comment": " Framebuffer texture attachment type: renderbuffer",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "RL_ATTACHMENT_RENDERBUFFER"
      },
      {
        "comment": " Framebuffer attachment type: stencil",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "RL_ATTACHMENT_STENCIL"
      },
      {
        "comment": " Framebuffer texture attachment type: texture2d",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "RL_ATTACHMENT_TEXTURE2D"
      },
      {
        "comment": " Blend textures adding colors",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "RL_BLEND_ADDITIVE"
      },
      {
        "comment": " Blend textures adding colors (alternative)",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "RL_BLEND_ADD_COLORS"
      },
      {
        "comment": " Blend textures considering alpha (default)",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "RL_BLEND_ALPHA"
      },
      {
        "comment": " Blend premultiplied textures considering alpha",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "RL_BLEND_ALPHA_PREMULTIPLY"
      },
      {
        "comment": " Blend textures using custom src/dst factors (use rlSetBlendFactors())",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "RL_BLEND_CUSTOM"
      },
      {
        "comment": " Blend textures using custom src/dst factors (use rlSetBlendFactorsSeparate())",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "RL_BLEND_CUSTOM_SEPARATE"
      },
      {
        "comment": " Blend textures multiplying colors",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "RL_BLEND_MULTIPLIED"
      },
      {
        "comment": " Blend textures subtracting colors (alternative)",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "RL_BLEND_SUBTRACT_COLORS"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "RL_CULL_FACE_BACK"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "RL_CULL_FACE_FRONT"
      },
      {
        "comment": " Display all logs",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "RL_LOG_ALL"
      },
      {
        "comment": " Debug logging, used for internal debugging, it should be disabled on release builds",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "RL_LOG_DEBUG"
      },
      {
        "comment": " Error logging, used on unrecoverable failures",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "RL_LOG_ERROR"
      },
      {
        "comment": " Fatal logging, used to abort program: exit(EXIT_FAILURE)",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "RL_LOG_FATAL"
      },
      {
        "comment": " Info logging, used for program execution info",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "RL_LOG_INFO"
      },
      {
        "comment": " Disable logging",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "RL_LOG_NONE"
      },
      {
        "comment": " Trace logging, intended for internal use only",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "RL_LOG_TRACE"
      },
      {
        "comment": " Warning logging, used on recoverable failures",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "RL_LOG_WARNING"
      },
      {
        "comment": " OpenGL 1.1",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "RL_OPENGL_11"
      },
      {
        "comment": " OpenGL 2.1 (GLSL 120)",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "RL_OPENGL_21"
      },
      {
        "comment": " OpenGL 3.3 (GLSL 330)",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "RL_OPENGL_33"
      },
      {
        "comment": " OpenGL 4.3 (using GLSL 330)",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "RL_OPENGL_43"
      },
      {
        "comment": " OpenGL ES 2.0 (GLSL 100)",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "RL_OPENGL_ES_20"
      },
      {
        "comment": " 8 bpp",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "RL_PIXELFORMAT_COMPRESSED_ASTC_4x4_RGBA"
      },
      {
        "comment": " 2 bpp",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "RL_PIXELFORMAT_COMPRESSED_ASTC_8x8_RGBA"
      },
      {
        "comment": " 4 bpp (no alpha)",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "RL_PIXELFORMAT_COMPRESSED_DXT1_RGB"
      },
      {
        "comment": " 4 bpp (1 bit alpha)",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "RL_PIXELFORMAT_COMPRESSED_DXT1_RGBA"
      },
      {
        "comment": " 8 bpp",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "RL_PIXELFORMAT_COMPRESSED_DXT3_RGBA"
      },
      {
        "comment": " 8 bpp",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "RL_PIXELFORMAT_COMPRESSED_DXT5_RGBA"
      },
      {
        "comment": " 4 bpp",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "RL_PIXELFORMAT_COMPRESSED_ETC1_RGB"
      },
      {
        "comment": " 8 bpp",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "RL_PIXELFORMAT_COMPRESSED_ETC2_EAC_RGBA"
      },
      {
        "comment": " 4 bpp",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "RL_PIXELFORMAT_COMPRESSED_ETC2_RGB"
      },
      {
        "comment": " 4 bpp",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "RL_PIXELFORMAT_COMPRESSED_PVRT_RGB"
      },
      {
        "comment": " 4 bpp",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "RL_PIXELFORMAT_COMPRESSED_PVRT_RGBA"
      },
      {
        "comment": " 8 bit per pixel (no alpha)",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "RL_PIXELFORMAT_UNCOMPRESSED_GRAYSCALE"
      },
      {
        "comment": " 8*2 bpp (2 channels)",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "RL_PIXELFORMAT_UNCOMPRESSED_GRAY_ALPHA"
      },
      {
        "comment": " 32 bpp (1 channel - float)",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "RL_PIXELFORMAT_UNCOMPRESSED_R32"
      },
      {
        "comment": " 32*3 bpp (3 channels - float)",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "RL_PIXELFORMAT_UNCOMPRESSED_R32G32B32"
      },
      {
        "comment": " 32*4 bpp (4 channels - float)",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "RL_PIXELFORMAT_UNCOMPRESSED_R32G32B32A32"
      },
      {
        "comment": " 16 bpp (4 bit alpha)",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "RL_PIXELFORMAT_UNCOMPRESSED_R4G4B4A4"
      },
      {
        "comment": " 16 bpp (1 bit alpha)",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "RL_PIXELFORMAT_UNCOMPRESSED_R5G5B5A1"
      },
      {
        "comment": " 16 bpp",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "RL_PIXELFORMAT_UNCOMPRESSED_R5G6B5"
      },
      {
        "comment": " 24 bpp",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "RL_PIXELFORMAT_UNCOMPRESSED_R8G8B8"
      },
      {
        "comment": " 32 bpp",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "RL_PIXELFORMAT_UNCOMPRESSED_R8G8B8A8"
      },
      {
        "comment": " Shader attribute type: float",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "RL_SHADER_ATTRIB_FLOAT"
      },
      {
        "comment": " Shader attribute type: vec2 (2 float)",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "RL_SHADER_ATTRIB_VEC2"
      },
      {
        "comment": " Shader attribute type: vec3 (3 float)",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "RL_SHADER_ATTRIB_VEC3"
      },
      {
        "comment": " Shader attribute type: vec4 (4 float)",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "RL_SHADER_ATTRIB_VEC4"
      },
      {
        "comment": " Shader location: vector uniform: ambient color",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "RL_SHADER_LOC_COLOR_AMBIENT"
      },
      {
        "comment": " Shader location: vector uniform: diffuse color",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "RL_SHADER_LOC_COLOR_DIFFUSE"
      },
      {
        "comment": " Shader location: vector uniform: specular color",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "RL_SHADER_LOC_COLOR_SPECULAR"
      },
      {
        "comment": " Shader location: sampler2d texture: albedo (same as: RL_SHADER_LOC_MAP_DIFFUSE)",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "RL_SHADER_LOC_MAP_ALBEDO"
      },
      {
        "comment": " Shader location: sampler2d texture: brdf",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "RL_SHADER_LOC_MAP_BRDF"
      },
      {
        "comment": " Shader location: samplerCube texture: cubemap",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "RL_SHADER_LOC_MAP_CUBEMAP"
      },
      {
        "comment": " Shader location: sampler2d texture: emission",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "RL_SHADER_LOC_MAP_EMISSION"
      },
      {
        "comment": " Shader location: sampler2d texture: height",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "RL_SHADER_LOC_MAP_HEIGHT"
      },
      {
        "comment": " Shader location: samplerCube texture: irradiance",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "RL_SHADER_LOC_MAP_IRRADIANCE"
      },
      {
        "comment": " Shader location: sampler2d texture: metalness (same as: RL_SHADER_LOC_MAP_SPECULAR)",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "RL_SHADER_LOC_MAP_METALNESS"
      },
      {
        "comment": " Shader location: sampler2d texture: normal",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "RL_SHADER_LOC_MAP_NORMAL"
      },
      {
        "comment": " Shader location: sampler2d texture: occlusion",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "RL_SHADER_LOC_MAP_OCCLUSION"
      },
      {
        "comment": " Shader location: samplerCube texture: prefilter",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "RL_SHADER_LOC_MAP_PREFILTER"
      },
      {
        "comment": " Shader location: sampler2d texture: roughness",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "RL_SHADER_LOC_MAP_ROUGHNESS"
      },
      {
        "comment": " Shader location: matrix uniform: model (transform)",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "RL_SHADER_LOC_MATRIX_MODEL"
      },
      {
        "comment": " Shader location: matrix uniform: model-view-projection",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "RL_SHADER_LOC_MATRIX_MVP"
      },
      {
        "comment": " Shader location: matrix uniform: normal",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "RL_SHADER_LOC_MATRIX_NORMAL"
      },
      {
        "comment": " Shader location: matrix uniform: projection",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "RL_SHADER_LOC_MATRIX_PROJECTION"
      },
      {
        "comment": " Shader location: matrix uniform: view (camera transform)",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "RL_SHADER_LOC_MATRIX_VIEW"
      },
      {
        "comment": " Shader location: vector uniform: view",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "RL_SHADER_LOC_VECTOR_VIEW"
      },
      {
        "comment": " Shader location: vertex attribute: color",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "RL_SHADER_LOC_VERTEX_COLOR"
      },
      {
        "comment": " Shader location: vertex attribute: normal",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "RL_SHADER_LOC_VERTEX_NORMAL"
      },
      {
        "comment": " Shader location: vertex attribute: position",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "RL_SHADER_LOC_VERTEX_POSITION"
      },
      {
        "comment": " Shader location: vertex attribute: tangent",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "RL_SHADER_LOC_VERTEX_TANGENT"
      },
      {
        "comment": " Shader location: vertex attribute: texcoord01",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "RL_SHADER_LOC_VERTEX_TEXCOORD01"
      },
      {
        "comment": " Shader location: vertex attribute: texcoord02",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "RL_SHADER_LOC_VERTEX_TEXCOORD02"
      },
      {
        "comment": " Shader uniform type: float",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "RL_SHADER_UNIFORM_FLOAT"
      },
      {
        "comment": " Shader uniform type: int",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "RL_SHADER_UNIFORM_INT"
      },
      {
        "comment": " Shader uniform type: ivec2 (2 int)",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "RL_SHADER_UNIFORM_IVEC2"
      },
      {
        "comment": " Shader uniform type: ivec3 (3 int)",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "RL_SHADER_UNIFORM_IVEC3"
      },
      {
        "comment": " Shader uniform type: ivec4 (4 int)",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "RL_SHADER_UNIFORM_IVEC4"
      },
      {
        "comment": " Shader uniform type: sampler2d",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "RL_SHADER_UNIFORM_SAMPLER2D"
      },
      {
        "comment": " Shader uniform type: vec2 (2 float)",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "RL_SHADER_UNIFORM_VEC2"
      },
      {
        "comment": " Shader uniform type: vec3 (3 float)",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "RL_SHADER_UNIFORM_VEC3"
      },
      {
        "comment": " Shader uniform type: vec4 (4 float)",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "RL_SHADER_UNIFORM_VEC4"
      },
      {
        "comment": " Anisotropic filtering 16x",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "RL_TEXTURE_FILTER_ANISOTROPIC_16X"
      },
      {
        "comment": " Anisotropic filtering 4x",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "RL_TEXTURE_FILTER_ANISOTROPIC_4X"
      },
      {
        "comment": " Anisotropic filtering 8x",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "RL_TEXTURE_FILTER_ANISOTROPIC_8X"
      },
      {
        "comment": " Linear filtering",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "RL_TEXTURE_FILTER_BILINEAR"
      },
      {
        "comment": " No filter, just pixel approximation",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "RL_TEXTURE_FILTER_POINT"
      },
      {
        "comment": " Trilinear filtering (linear with mipmaps)",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "RL_TEXTURE_FILTER_TRILINEAR"
      }
    ],
    "imports": [
      {
        "alias": "c",
        "path": [
          "libs",
          "c"
        ]
      },
      {
        "alias": "rl",
        "path": [
          "raylib"
        ]
      }
    ],
    "macros": []
  },
  "raylib.gui": {
    "classes": [
      {
        "annotations": [
          {
            "argument": "GuiStyleProp",
            "name": "@nativedefine"
          },
          {
            "name": "@onstack"
          }
        ],
        "comment": " Style property",
        "members": [
          {
            "datatype": {
              "type": "CUShort"
            },
            "name": "controlId"
          },
          {
            "datatype": {
              "type": "CUShort"
            },
            "name": "propertyId"
          },
          {
            "datatype": {
              "type": "CUInt"
            },
            "name": "propertyValue"
          }
        ],
        "name": "GuiStyleProp"
      }
    ],
    "functions": [
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Button control, returns true when clicked",
        "name": "gui_button",
        "parameters": [
          {
            "datatype": {
              "type": "Rectangle"
            },
            "name": "bounds"
          },
          {
            "datatype": {
              "type": "str"
            },
            "name": "text"
          }
        ],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Check Box control, returns true when active",
        "name": "gui_check_box",
        "parameters": [
          {
            "datatype": {
              "type": "Rectangle"
            },
            "name": "bounds"
          },
          {
            "datatype": {
              "type": "str"
            },
            "name": "text"
          },
          {
            "datatype": {
              "type": "bool"
            },
            "name": "checked"
          }
        ],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Color Bar Alpha control",
        "name": "gui_color_bar_alpha",
        "parameters": [
          {
            "datatype": {
              "type": "Rectangle"
            },
            "name": "bounds"
          },
          {
            "datatype": {
              "type": "str"
            },
            "name": "text"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "alpha"
          }
        ],
        "return_type": {
          "type": "float"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Color Bar Hue control",
        "name": "gui_color_bar_hue",
        "parameters": [
          {
            "datatype": {
              "type": "Rectangle"
            },
            "name": "bounds"
          },
          {
            "datatype": {
              "type": "str"
            },
            "name": "text"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "value"
          }
        ],
        "return_type": {
          "type": "float"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Color Panel control",
        "name": "gui_color_panel",
        "parameters": [
          {
            "datatype": {
              "type": "Rectangle"
            },
            "name": "bounds"
          },
          {
            "datatype": {
              "type": "str"
            },
            "name": "text"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "p_color"
          }
        ],
        "return_type": {
          "type": "Color"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Color Picker control (multiple color controls)",
        "name": "gui_color_picker",
        "parameters": [
          {
            "datatype": {
              "type": "Rectangle"
            },
            "name": "bounds"
          },
          {
            "datatype": {
              "type": "str"
            },
            "name": "text"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "p_color"
          }
        ],
        "return_type": {
          "type": "Color"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Combo Box control, returns selected item index",
        "name": "gui_combo_box",
        "parameters": [
          {
            "datatype": {
              "type": "Rectangle"
            },
            "name": "bounds"
          },
          {
            "datatype": {
              "type": "str"
            },
            "name": "text"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "active"
          }
        ],
        "return_type": {
          "type": "int"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Disable gui controls (global state)",
        "name": "gui_disable",
        "parameters": [],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Disable gui tooltips (global state)",
        "name": "gui_disable_tooltip",
        "parameters": [],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "gui_draw_icon",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "icon_id"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "pos_x"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "pos_y"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "pixel_size"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "p_color"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Dropdown Box control, returns selected item",
        "name": "gui_dropdown_box",
        "parameters": [
          {
            "datatype": {
              "type": "Rectangle"
            },
            "name": "bounds"
          },
          {
            "datatype": {
              "type": "str"
            },
            "name": "text"
          },
          {
            "datatype": {
              "arguments": [
                {
                  "type": "CInt"
                }
              ],
              "type": "Ptr"
            },
            "name": "active"
          },
          {
            "datatype": {
              "type": "bool"
            },
            "name": "edit_mode"
          }
        ],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Dummy control for placeholders",
        "name": "gui_dummy_rec",
        "parameters": [
          {
            "datatype": {
              "type": "Rectangle"
            },
            "name": "bounds"
          },
          {
            "datatype": {
              "type": "str"
            },
            "name": "text"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Enable gui controls (global state)",
        "name": "gui_enable",
        "parameters": [],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Enable gui tooltips (global state)",
        "name": "gui_enable_tooltip",
        "parameters": [],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Set gui controls alpha (global state), alpha goes from 0.0f to 1.0f",
        "name": "gui_fade",
        "parameters": [
          {
            "datatype": {
              "type": "float"
            },
            "name": "alpha"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Get gui custom font (global state)",
        "name": "gui_get_font",
        "parameters": [],
        "return_type": {
          "type": "Font"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Get raygui icons data pointer",
        "name": "gui_get_icons",
        "parameters": [],
        "return_type": {
          "arguments": [
            {
              "type": "CUInt"
            }
          ],
          "type": "Ptr"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Get gui state (global state)",
        "name": "gui_get_state",
        "parameters": [],
        "return_type": {
          "type": "int"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Get one style property",
        "name": "gui_get_style",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "control"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "property"
          }
        ],
        "return_type": {
          "type": "int"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Grid control, returns mouse cell position",
        "name": "gui_grid",
        "parameters": [
          {
            "datatype": {
              "type": "Rectangle"
            },
            "name": "bounds"
          },
          {
            "datatype": {
              "type": "str"
            },
            "name": "text"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "spacing"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "subdivs"
          }
        ],
        "return_type": {
          "type": "Vector2"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Group Box control with text name",
        "name": "gui_group_box",
        "parameters": [
          {
            "datatype": {
              "type": "Rectangle"
            },
            "name": "bounds"
          },
          {
            "datatype": {
              "type": "str"
            },
            "name": "text"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Get text with icon id prepended (if supported)",
        "name": "gui_icon_text",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "icon_id"
          },
          {
            "datatype": {
              "type": "str"
            },
            "name": "text"
          }
        ],
        "return_type": {
          "arguments": [
            {
              "arguments": [
                {
                  "type": "CChar"
                }
              ],
              "type": "Const"
            }
          ],
          "type": "Ptr"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Check if gui is locked (global state)",
        "name": "gui_is_locked",
        "parameters": [],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Label control, shows text",
        "name": "gui_label",
        "parameters": [
          {
            "datatype": {
              "type": "Rectangle"
            },
            "name": "bounds"
          },
          {
            "datatype": {
              "type": "str"
            },
            "name": "text"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Label button control, show true when clicked",
        "name": "gui_label_button",
        "parameters": [
          {
            "datatype": {
              "type": "Rectangle"
            },
            "name": "bounds"
          },
          {
            "datatype": {
              "type": "str"
            },
            "name": "text"
          }
        ],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Line separator control, could contain text",
        "name": "gui_line",
        "parameters": [
          {
            "datatype": {
              "type": "Rectangle"
            },
            "name": "bounds"
          },
          {
            "datatype": {
              "type": "str"
            },
            "name": "text"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " List View control, returns selected list item index",
        "name": "gui_list_view",
        "parameters": [
          {
            "datatype": {
              "type": "Rectangle"
            },
            "name": "bounds"
          },
          {
            "datatype": {
              "type": "str"
            },
            "name": "text"
          },
          {
            "datatype": {
              "arguments": [
                {
                  "type": "CInt"
                }
              ],
              "type": "Ptr"
            },
            "name": "scroll_index"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "active"
          }
        ],
        "return_type": {
          "type": "int"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " List View with extended parameters",
        "name": "gui_list_view_ex",
        "parameters": [
          {
            "datatype": {
              "type": "Rectangle"
            },
            "name": "bounds"
          },
          {
            "datatype": {
              "arguments": [
                {
                  "arguments": [
                    {
                      "arguments": [
                        {
                          "type": "CChar"
                        }
                      ],
                      "type": "Const"
                    }
                  ],
                  "type": "Ptr"
                }
              ],
              "type": "Ptr"
            },
            "name": "text"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "count"
          },
          {
            "datatype": {
              "arguments": [
                {
                  "type": "CInt"
                }
              ],
              "type": "Ptr"
            },
            "name": "focus"
          },
          {
            "datatype": {
              "arguments": [
                {
                  "type": "CInt"
                }
              ],
              "type": "Ptr"
            },
            "name": "scroll_index"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "active"
          }
        ],
        "return_type": {
          "type": "int"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Load raygui icons file (.rgi) into internal icons data",
        "name": "gui_load_icons",
        "parameters": [
          {
            "datatype": {
              "type": "str"
            },
            "name": "file_name"
          },
          {
            "datatype": {
              "type": "bool"
            },
            "name": "load_icons_name"
          }
        ],
        "return_type": {
          "arguments": [
            {
              "arguments": [
                {
                  "type": "CChar"
                }
              ],
              "type": "Ptr"
            }
          ],
          "type": "Ptr"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Load style file over global style variable (.rgs)",
        "name": "gui_load_style",
        "parameters": [
          {
            "datatype": {
              "type": "str"
            },
            "name": "file_name"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Load style default over global style",
        "name": "gui_load_style_default",
        "parameters": [],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Lock gui controls (global state)",
        "name": "gui_lock",
        "parameters": [],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Message Box control, displays a message",
        "name": "gui_message_box",
        "parameters": [
          {
            "datatype": {
              "type": "Rectangle"
            },
            "name": "bounds"
          },
          {
            "datatype": {
              "type": "str"
            },
            "name": "title"
          },
          {
            "datatype": {
              "type": "str"
            },
            "name": "message"
          },
          {
            "datatype": {
              "type": "str"
            },
            "name": "buttons"
          }
        ],
        "return_type": {
          "type": "int"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Panel control, useful to group controls",
        "name": "gui_panel",
        "parameters": [
          {
            "datatype": {
              "type": "Rectangle"
            },
            "name": "bounds"
          },
          {
            "datatype": {
              "type": "str"
            },
            "name": "text"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Progress Bar control, shows current progress value",
        "name": "gui_progress_bar",
        "parameters": [
          {
            "datatype": {
              "type": "Rectangle"
            },
            "name": "bounds"
          },
          {
            "datatype": {
              "type": "str"
            },
            "name": "text_left"
          },
          {
            "datatype": {
              "type": "str"
            },
            "name": "text_right"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "value"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "min_value"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "max_value"
          }
        ],
        "return_type": {
          "type": "float"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Scroll Panel control",
        "name": "gui_scroll_panel",
        "parameters": [
          {
            "datatype": {
              "type": "Rectangle"
            },
            "name": "bounds"
          },
          {
            "datatype": {
              "type": "str"
            },
            "name": "text"
          },
          {
            "datatype": {
              "type": "Rectangle"
            },
            "name": "content"
          },
          {
            "datatype": {
              "arguments": [
                {
                  "type": "Vector2"
                }
              ],
              "type": "Ptr"
            },
            "name": "scroll"
          }
        ],
        "return_type": {
          "type": "Rectangle"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Set gui custom font (global state)",
        "name": "gui_set_font",
        "parameters": [
          {
            "datatype": {
              "type": "Font"
            },
            "name": "p_font"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Set icon drawing size",
        "name": "gui_set_icon_scale",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "scale"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Set gui state (global state)",
        "name": "gui_set_state",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "state"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Set one style property",
        "name": "gui_set_style",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "control"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "property"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "value"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Set tooltip string",
        "name": "gui_set_tooltip",
        "parameters": [
          {
            "datatype": {
              "type": "str"
            },
            "name": "tooltip"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Slider control, returns selected value",
        "name": "gui_slider",
        "parameters": [
          {
            "datatype": {
              "type": "Rectangle"
            },
            "name": "bounds"
          },
          {
            "datatype": {
              "type": "str"
            },
            "name": "text_left"
          },
          {
            "datatype": {
              "type": "str"
            },
            "name": "text_right"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "value"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "min_value"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "max_value"
          }
        ],
        "return_type": {
          "type": "float"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Slider Bar control, returns selected value",
        "name": "gui_slider_bar",
        "parameters": [
          {
            "datatype": {
              "type": "Rectangle"
            },
            "name": "bounds"
          },
          {
            "datatype": {
              "type": "str"
            },
            "name": "text_left"
          },
          {
            "datatype": {
              "type": "str"
            },
            "name": "text_right"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "value"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "min_value"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "max_value"
          }
        ],
        "return_type": {
          "type": "float"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Spinner control, returns selected value",
        "name": "gui_spinner",
        "parameters": [
          {
            "datatype": {
              "type": "Rectangle"
            },
            "name": "bounds"
          },
          {
            "datatype": {
              "type": "str"
            },
            "name": "text"
          },
          {
            "datatype": {
              "arguments": [
                {
                  "type": "CInt"
                }
              ],
              "type": "Ptr"
            },
            "name": "value"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "min_value"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "max_value"
          },
          {
            "datatype": {
              "type": "bool"
            },
            "name": "edit_mode"
          }
        ],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Status Bar control, shows info text",
        "name": "gui_status_bar",
        "parameters": [
          {
            "datatype": {
              "type": "Rectangle"
            },
            "name": "bounds"
          },
          {
            "datatype": {
              "type": "str"
            },
            "name": "text"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Factory function for: GuiStyleProp",
        "name": "gui_style_prop",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "control_id"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "property_id"
          },
          {
            "datatype": {
              "type": "u32"
            },
            "name": "property_value"
          }
        ],
        "return_type": {
          "type": "GuiStyleProp"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Tab Bar control, returns TAB to be closed or -1",
        "name": "gui_tab_bar",
        "parameters": [
          {
            "datatype": {
              "type": "Rectangle"
            },
            "name": "bounds"
          },
          {
            "datatype": {
              "arguments": [
                {
                  "arguments": [
                    {
                      "arguments": [
                        {
                          "type": "CChar"
                        }
                      ],
                      "type": "Const"
                    }
                  ],
                  "type": "Ptr"
                }
              ],
              "type": "Ptr"
            },
            "name": "text"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "count"
          },
          {
            "datatype": {
              "arguments": [
                {
                  "type": "CInt"
                }
              ],
              "type": "Ptr"
            },
            "name": "active"
          }
        ],
        "return_type": {
          "type": "int"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Text Box control, updates input text",
        "name": "gui_text_box",
        "parameters": [
          {
            "datatype": {
              "type": "Rectangle"
            },
            "name": "bounds"
          },
          {
            "datatype": {
              "type": "str"
            },
            "name": "text"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "text_size"
          },
          {
            "datatype": {
              "type": "bool"
            },
            "name": "edit_mode"
          }
        ],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Text Box control with multiple lines",
        "name": "gui_text_box_multi",
        "parameters": [
          {
            "datatype": {
              "type": "Rectangle"
            },
            "name": "bounds"
          },
          {
            "datatype": {
              "type": "str"
            },
            "name": "text"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "text_size"
          },
          {
            "datatype": {
              "type": "bool"
            },
            "name": "edit_mode"
          }
        ],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Text Input Box control, ask for text, supports secret",
        "name": "gui_text_input_box",
        "parameters": [
          {
            "datatype": {
              "type": "Rectangle"
            },
            "name": "bounds"
          },
          {
            "datatype": {
              "type": "str"
            },
            "name": "title"
          },
          {
            "datatype": {
              "type": "str"
            },
            "name": "message"
          },
          {
            "datatype": {
              "type": "str"
            },
            "name": "buttons"
          },
          {
            "datatype": {
              "type": "str"
            },
            "name": "text"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "text_max_size"
          },
          {
            "datatype": {
              "arguments": [
                {
                  "type": "CInt"
                }
              ],
              "type": "Ptr"
            },
            "name": "secret_view_active"
          }
        ],
        "return_type": {
          "type": "int"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Toggle Button control, returns true when active",
        "name": "gui_toggle",
        "parameters": [
          {
            "datatype": {
              "type": "Rectangle"
            },
            "name": "bounds"
          },
          {
            "datatype": {
              "type": "str"
            },
            "name": "text"
          },
          {
            "datatype": {
              "type": "bool"
            },
            "name": "active"
          }
        ],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Toggle Group control, returns active toggle index",
        "name": "gui_toggle_group",
        "parameters": [
          {
            "datatype": {
              "type": "Rectangle"
            },
            "name": "bounds"
          },
          {
            "datatype": {
              "type": "str"
            },
            "name": "text"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "active"
          }
        ],
        "return_type": {
          "type": "int"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Unlock gui controls (global state)",
        "name": "gui_unlock",
        "parameters": [],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Value Box control, updates input text with numbers",
        "name": "gui_value_box",
        "parameters": [
          {
            "datatype": {
              "type": "Rectangle"
            },
            "name": "bounds"
          },
          {
            "datatype": {
              "type": "str"
            },
            "name": "text"
          },
          {
            "datatype": {
              "arguments": [
                {
                  "type": "CInt"
                }
              ],
              "type": "Ptr"
            },
            "name": "value"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "min_value"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "max_value"
          },
          {
            "datatype": {
              "type": "bool"
            },
            "name": "edit_mode"
          }
        ],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Window Box control, shows a window that can be closed",
        "name": "gui_window_box",
        "parameters": [
          {
            "datatype": {
              "type": "Rectangle"
            },
            "name": "bounds"
          },
          {
            "datatype": {
              "type": "str"
            },
            "name": "title"
          }
        ],
        "return_type": {
          "type": "bool"
        }
      }
    ],
    "global_consts": [
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ARROWS_SIZE"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ARROWS_VISIBLE"
      },
      {
        "comment": " DropdownBox arrow separation from border and items",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ARROW_PADDING"
      },
      {
        "comment": " Background color",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "BACKGROUND_COLOR"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "BASE_COLOR_DISABLED"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "BASE_COLOR_FOCUSED"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "BASE_COLOR_NORMAL"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "BASE_COLOR_PRESSED"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "BORDER_COLOR_DISABLED"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "BORDER_COLOR_FOCUSED"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "BORDER_COLOR_NORMAL"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "BORDER_COLOR_PRESSED"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "BORDER_WIDTH"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "BUTTON"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "CHECKBOX"
      },
      {
        "comment": " CheckBox internal check padding",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "CHECK_PADDING"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "COLORPICKER"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "COLOR_SELECTOR_SIZE"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "COMBOBOX"
      },
      {
        "comment": " ComboBox button separation",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "COMBO_BUTTON_SPACING"
      },
      {
        "comment": " ComboBox right button width",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "COMBO_BUTTON_WIDTH"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "DEFAULT"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "DROPDOWNBOX"
      },
      {
        "comment": " DropdownBox items separation",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "DROPDOWN_ITEMS_SPACING"
      },
      {
        "comment": " ToggleGroup separation between toggles",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "GROUP_PADDING"
      },
      {
        "comment": " ColorPicker right hue bar separation from panel",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "HUEBAR_PADDING"
      },
      {
        "comment": " ColorPicker right hue bar selector height",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "HUEBAR_SELECTOR_HEIGHT"
      },
      {
        "comment": " ColorPicker right hue bar selector overflow",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "HUEBAR_SELECTOR_OVERFLOW"
      },
      {
        "comment": " ColorPicker right hue bar width",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "HUEBAR_WIDTH"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_1UP"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_219"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_220"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_221"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_222"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_223"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_224"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_225"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_226"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_227"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_228"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_229"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_230"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_231"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_232"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_233"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_234"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_235"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_236"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_237"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_238"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_239"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_240"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_241"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_242"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_243"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_244"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_245"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_246"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_247"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_248"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_249"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_250"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_251"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_252"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_253"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_254"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_255"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_ALARM"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_ALPHA_CLEAR"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_ALPHA_MULTIPLY"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_ARROW_DOWN"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_ARROW_DOWN_FILL"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_ARROW_LEFT"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_ARROW_LEFT_FILL"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_ARROW_RIGHT"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_ARROW_RIGHT_FILL"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_ARROW_UP"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_ARROW_UP_FILL"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_AUDIO"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_BIN"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_BOX"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_BOX_BOTTOM"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_BOX_BOTTOM_LEFT"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_BOX_BOTTOM_RIGHT"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_BOX_CENTER"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_BOX_CIRCLE_MASK"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_BOX_CONCENTRIC"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_BOX_CORNERS_BIG"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_BOX_CORNERS_SMALL"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_BOX_DOTS_BIG"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_BOX_DOTS_SMALL"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_BOX_GRID"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_BOX_GRID_BIG"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_BOX_LEFT"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_BOX_MULTISIZE"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_BOX_RIGHT"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_BOX_TOP"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_BOX_TOP_LEFT"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_BOX_TOP_RIGHT"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_BREAKPOINT_OFF"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_BREAKPOINT_ON"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_BRUSH_CLASSIC"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_BRUSH_PAINTER"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_BURGER_MENU"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_CAMERA"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_CASE_SENSITIVE"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_CLOCK"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_COIN"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_COLOR_BUCKET"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_COLOR_PICKER"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_CORNER"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_CPU"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_CRACK"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_CRACK_POINTS"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_CROP"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_CROP_ALPHA"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_CROSS"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_CROSSLINE"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_CROSS_SMALL"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_CUBE"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_CUBE_FACE_BACK"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_CUBE_FACE_BOTTOM"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_CUBE_FACE_FRONT"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_CUBE_FACE_LEFT"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_CUBE_FACE_RIGHT"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_CUBE_FACE_TOP"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_CURSOR_CLASSIC"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_CURSOR_HAND"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_CURSOR_MOVE"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_CURSOR_MOVE_FILL"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_CURSOR_POINTER"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_CURSOR_SCALE"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_CURSOR_SCALE_FILL"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_CURSOR_SCALE_LEFT"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_CURSOR_SCALE_LEFT_FILL"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_CURSOR_SCALE_RIGHT"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_CURSOR_SCALE_RIGHT_FILL"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_DEMON"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_DITHERING"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_DOOR"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_EMPTYBOX"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_EMPTYBOX_SMALL"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_EXIT"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_EXPLOSION"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_EYE_OFF"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_EYE_ON"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_FILE"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_FILETYPE_ALPHA"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_FILETYPE_AUDIO"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_FILETYPE_BINARY"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_FILETYPE_HOME"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_FILETYPE_IMAGE"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_FILETYPE_INFO"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_FILETYPE_PLAY"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_FILETYPE_TEXT"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_FILETYPE_VIDEO"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_FILE_ADD"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_FILE_COPY"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_FILE_CUT"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_FILE_DELETE"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_FILE_EXPORT"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_FILE_NEW"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_FILE_OPEN"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_FILE_PASTE"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_FILE_SAVE"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_FILE_SAVE_CLASSIC"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_FILTER"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_FILTER_BILINEAR"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_FILTER_POINT"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_FILTER_TOP"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_FOLDER"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_FOLDER_ADD"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_FOLDER_FILE_OPEN"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_FOLDER_OPEN"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_FOLDER_SAVE"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_FOUR_BOXES"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_FX"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_GEAR"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_GEAR_BIG"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_GEAR_EX"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_GRID"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_GRID_FILL"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_HAND_POINTER"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_HEART"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_HELP"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_HEX"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_HIDPI"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_HOUSE"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_INFO"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_KEY"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_LASER"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_LAYERS"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_LAYERS_VISIBLE"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_LENS"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_LENS_BIG"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_LIFE_BARS"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_LINK"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_LINK_BOXES"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_LINK_BROKE"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_LINK_MULTI"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_LINK_NET"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_LOCK_CLOSE"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_LOCK_OPEN"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_MAGNET"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_MAILBOX"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_MIPMAPS"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_MODE_2D"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_MODE_3D"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_MONITOR"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_MUTATE"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_MUTATE_FILL"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_NONE"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_NOTEBOOK"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_OK_TICK"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_PENCIL"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_PENCIL_BIG"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_PHOTO_CAMERA"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_PHOTO_CAMERA_FLASH"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_PLAYER"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_PLAYER_JUMP"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_PLAYER_NEXT"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_PLAYER_PAUSE"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_PLAYER_PLAY"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_PLAYER_PLAY_BACK"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_PLAYER_PREVIOUS"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_PLAYER_RECORD"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_PLAYER_STOP"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_POT"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_PRINTER"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_REDO"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_REDO_FILL"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_REG_EXP"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_REPEAT"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_REPEAT_FILL"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_REREDO"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_REREDO_FILL"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_RESIZE"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_RESTART"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_ROM"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_ROTATE"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_ROTATE_FILL"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_RUBBER"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_SCALE"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_SHIELD"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_SHUFFLE"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_SHUFFLE_FILL"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_SPECIAL"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_SQUARE_TOGGLE"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_STAR"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_STEP_INTO"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_STEP_OUT"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_STEP_OVER"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_SUITCASE"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_SUITCASE_ZIP"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_SYMMETRY"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_SYMMETRY_HORIZONTAL"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_SYMMETRY_VERTICAL"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_TARGET"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_TARGET_BIG"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_TARGET_BIG_FILL"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_TARGET_MOVE"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_TARGET_MOVE_FILL"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_TARGET_POINT"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_TARGET_SMALL"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_TARGET_SMALL_FILL"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_TEXT_A"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_TEXT_NOTES"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_TEXT_POPUP"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_TEXT_T"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_TOOLS"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_UNDO"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_UNDO_FILL"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_VERTICAL_BARS"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_VERTICAL_BARS_FILL"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_WATER_DROP"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_WAVE"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_WAVE_SINUS"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_WAVE_SQUARE"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_WAVE_TRIANGULAR"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_WINDOW"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_ZOOM_ALL"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_ZOOM_BIG"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_ZOOM_CENTER"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_ZOOM_MEDIUM"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "ICON_ZOOM_SMALL"
      },
      {
        "comment": " Used also for: LABELBUTTON",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "LABEL"
      },
      {
        "comment": " Line control color",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "LINE_COLOR"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "LISTVIEW"
      },
      {
        "comment": " ListView items height",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "LIST_ITEMS_HEIGHT"
      },
      {
        "comment": " ListView items separation",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "LIST_ITEMS_SPACING"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "PROGRESSBAR"
      },
      {
        "comment": " ProgressBar internal padding",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "PROGRESS_PADDING"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "RESERVED"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "SCROLLBAR"
      },
      {
        "comment": " ListView scrollbar side (0-left, 1-right)",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "SCROLLBAR_SIDE"
      },
      {
        "comment": " ListView scrollbar size (usually width)",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "SCROLLBAR_WIDTH"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "SCROLL_PADDING"
      },
      {
        "comment": " (SLIDERBAR, SLIDER_PADDING)",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "SCROLL_SLIDER_PADDING"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "SCROLL_SLIDER_SIZE"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "SCROLL_SPEED"
      },
      {
        "comment": " Used also for: SLIDERBAR",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "SLIDER"
      },
      {
        "comment": " Slider/SliderBar internal bar padding",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "SLIDER_PADDING"
      },
      {
        "comment": " Slider size of internal bar",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "SLIDER_WIDTH"
      },
      {
        "comment": " Uses: BUTTON, VALUEBOX",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "SPINNER"
      },
      {
        "comment": " Spinner buttons separation",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "SPIN_BUTTON_SPACING"
      },
      {
        "comment": " Spinner left/right buttons width",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "SPIN_BUTTON_WIDTH"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "STATE_DISABLED"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "STATE_FOCUSED"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "STATE_NORMAL"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "STATE_PRESSED"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "STATUSBAR"
      },
      {
        "comment": " Used also for: TEXTBOXMULTI",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "TEXTBOX"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "TEXT_ALIGNMENT"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "TEXT_ALIGN_CENTER"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "TEXT_ALIGN_LEFT"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "TEXT_ALIGN_RIGHT"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "TEXT_COLOR_DISABLED"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "TEXT_COLOR_FOCUSED"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "TEXT_COLOR_NORMAL"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "TEXT_COLOR_PRESSED"
      },
      {
        "comment": " TextBox/TextBoxMulti/ValueBox/Spinner inner text padding",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "TEXT_INNER_PADDING"
      },
      {
        "comment": " TextBoxMulti lines separation",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "TEXT_LINES_SPACING"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "TEXT_PADDING"
      },
      {
        "comment": " Text size (glyphs max height)",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "TEXT_SIZE"
      },
      {
        "comment": " Text spacing between glyphs",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "TEXT_SPACING"
      },
      {
        "comment": " Used also for: TOGGLEGROUP",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "TOGGLE"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "VALUEBOX"
      }
    ],
    "imports": [
      {
        "alias": "c",
        "path": [
          "libs",
          "c"
        ]
      },
      {
        "alias": "rl",
        "path": [
          "raylib"
        ]
      }
    ],
    "macros": []
  },
  "raylib.math": {
    "classes": [
      {
        "annotations": [
          {
            "argument": "float16",
            "name": "@nativedefine"
          }
        ],
        "comment": "",
        "members": [],
        "name": "float16"
      },
      {
        "annotations": [
          {
            "argument": "float3",
            "name": "@nativedefine"
          }
        ],
        "comment": " NOTE: Helper types to be used instead of array return types for *ToFloat functions",
        "members": [],
        "name": "float3"
      }
    ],
    "functions": [
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "clamp",
        "parameters": [
          {
            "datatype": {
              "type": "float"
            },
            "name": "value"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "min"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "max"
          }
        ],
        "return_type": {
          "type": "float"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "float_equals",
        "parameters": [
          {
            "datatype": {
              "type": "float"
            },
            "name": "x"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "y"
          }
        ],
        "return_type": {
          "type": "int"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "lerp",
        "parameters": [
          {
            "datatype": {
              "type": "float"
            },
            "name": "start"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "end"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "amount"
          }
        ],
        "return_type": {
          "type": "float"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "matrix_add",
        "parameters": [
          {
            "datatype": {
              "type": "Matrix"
            },
            "name": "left"
          },
          {
            "datatype": {
              "type": "Matrix"
            },
            "name": "right"
          }
        ],
        "return_type": {
          "type": "Matrix"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "matrix_determinant",
        "parameters": [
          {
            "datatype": {
              "type": "Matrix"
            },
            "name": "mat"
          }
        ],
        "return_type": {
          "type": "float"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "matrix_frustum",
        "parameters": [
          {
            "datatype": {
              "type": "f64"
            },
            "name": "left"
          },
          {
            "datatype": {
              "type": "f64"
            },
            "name": "right"
          },
          {
            "datatype": {
              "type": "f64"
            },
            "name": "bottom"
          },
          {
            "datatype": {
              "type": "f64"
            },
            "name": "top"
          },
          {
            "datatype": {
              "type": "f64"
            },
            "name": "near"
          },
          {
            "datatype": {
              "type": "f64"
            },
            "name": "far"
          }
        ],
        "return_type": {
          "type": "Matrix"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "matrix_identity",
        "parameters": [],
        "return_type": {
          "type": "Matrix"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "matrix_invert",
        "parameters": [
          {
            "datatype": {
              "type": "Matrix"
            },
            "name": "mat"
          }
        ],
        "return_type": {
          "type": "Matrix"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "matrix_look_at",
        "parameters": [
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "eye"
          },
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "target"
          },
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "up"
          }
        ],
        "return_type": {
          "type": "Matrix"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "matrix_multiply",
        "parameters": [
          {
            "datatype": {
              "type": "Matrix"
            },
            "name": "left"
          },
          {
            "datatype": {
              "type": "Matrix"
            },
            "name": "right"
          }
        ],
        "return_type": {
          "type": "Matrix"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "matrix_ortho",
        "parameters": [
          {
            "datatype": {
              "type": "f64"
            },
            "name": "left"
          },
          {
            "datatype": {
              "type": "f64"
            },
            "name": "right"
          },
          {
            "datatype": {
              "type": "f64"
            },
            "name": "bottom"
          },
          {
            "datatype": {
              "type": "f64"
            },
            "name": "top"
          },
          {
            "datatype": {
              "type": "f64"
            },
            "name": "near"
          },
          {
            "datatype": {
              "type": "f64"
            },
            "name": "far"
          }
        ],
        "return_type": {
          "type": "Matrix"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "matrix_perspective",
        "parameters": [
          {
            "datatype": {
              "type": "f64"
            },
            "name": "fovy"
          },
          {
            "datatype": {
              "type": "f64"
            },
            "name": "aspect"
          },
          {
            "datatype": {
              "type": "f64"
            },
            "name": "near"
          },
          {
            "datatype": {
              "type": "f64"
            },
            "name": "far"
          }
        ],
        "return_type": {
          "type": "Matrix"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "matrix_rotate",
        "parameters": [
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "axis"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "angle"
          }
        ],
        "return_type": {
          "type": "Matrix"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "matrix_rotate_x",
        "parameters": [
          {
            "datatype": {
              "type": "float"
            },
            "name": "angle"
          }
        ],
        "return_type": {
          "type": "Matrix"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "matrix_rotate_xyz",
        "parameters": [
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "angle"
          }
        ],
        "return_type": {
          "type": "Matrix"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "matrix_rotate_y",
        "parameters": [
          {
            "datatype": {
              "type": "float"
            },
            "name": "angle"
          }
        ],
        "return_type": {
          "type": "Matrix"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "matrix_rotate_z",
        "parameters": [
          {
            "datatype": {
              "type": "float"
            },
            "name": "angle"
          }
        ],
        "return_type": {
          "type": "Matrix"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "matrix_rotate_zyx",
        "parameters": [
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "angle"
          }
        ],
        "return_type": {
          "type": "Matrix"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "matrix_scale",
        "parameters": [
          {
            "datatype": {
              "type": "float"
            },
            "name": "x"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "y"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "z"
          }
        ],
        "return_type": {
          "type": "Matrix"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "matrix_subtract",
        "parameters": [
          {
            "datatype": {
              "type": "Matrix"
            },
            "name": "left"
          },
          {
            "datatype": {
              "type": "Matrix"
            },
            "name": "right"
          }
        ],
        "return_type": {
          "type": "Matrix"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "matrix_to_float_v",
        "parameters": [
          {
            "datatype": {
              "type": "Matrix"
            },
            "name": "mat"
          }
        ],
        "return_type": {
          "type": "float16"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "matrix_trace",
        "parameters": [
          {
            "datatype": {
              "type": "Matrix"
            },
            "name": "mat"
          }
        ],
        "return_type": {
          "type": "float"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "matrix_translate",
        "parameters": [
          {
            "datatype": {
              "type": "float"
            },
            "name": "x"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "y"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "z"
          }
        ],
        "return_type": {
          "type": "Matrix"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "matrix_transpose",
        "parameters": [
          {
            "datatype": {
              "type": "Matrix"
            },
            "name": "mat"
          }
        ],
        "return_type": {
          "type": "Matrix"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "normalize",
        "parameters": [
          {
            "datatype": {
              "type": "float"
            },
            "name": "value"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "start"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "end"
          }
        ],
        "return_type": {
          "type": "float"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "quaternion_add",
        "parameters": [
          {
            "datatype": {
              "type": "Quaternion"
            },
            "name": "q1"
          },
          {
            "datatype": {
              "type": "Quaternion"
            },
            "name": "q2"
          }
        ],
        "return_type": {
          "type": "Quaternion"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "quaternion_add_value",
        "parameters": [
          {
            "datatype": {
              "type": "Quaternion"
            },
            "name": "q"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "add"
          }
        ],
        "return_type": {
          "type": "Quaternion"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "quaternion_divide",
        "parameters": [
          {
            "datatype": {
              "type": "Quaternion"
            },
            "name": "q1"
          },
          {
            "datatype": {
              "type": "Quaternion"
            },
            "name": "q2"
          }
        ],
        "return_type": {
          "type": "Quaternion"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "quaternion_equals",
        "parameters": [
          {
            "datatype": {
              "type": "Quaternion"
            },
            "name": "p"
          },
          {
            "datatype": {
              "type": "Quaternion"
            },
            "name": "q"
          }
        ],
        "return_type": {
          "type": "int"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "quaternion_from_axis_angle",
        "parameters": [
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "axis"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "angle"
          }
        ],
        "return_type": {
          "type": "Quaternion"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "quaternion_from_euler",
        "parameters": [
          {
            "datatype": {
              "type": "float"
            },
            "name": "pitch"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "yaw"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "roll"
          }
        ],
        "return_type": {
          "type": "Quaternion"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "quaternion_from_matrix",
        "parameters": [
          {
            "datatype": {
              "type": "Matrix"
            },
            "name": "mat"
          }
        ],
        "return_type": {
          "type": "Quaternion"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "quaternion_from_vector3_to_vector3",
        "parameters": [
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "p_from"
          },
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "to"
          }
        ],
        "return_type": {
          "type": "Quaternion"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "quaternion_identity",
        "parameters": [],
        "return_type": {
          "type": "Quaternion"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "quaternion_invert",
        "parameters": [
          {
            "datatype": {
              "type": "Quaternion"
            },
            "name": "q"
          }
        ],
        "return_type": {
          "type": "Quaternion"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "quaternion_length",
        "parameters": [
          {
            "datatype": {
              "type": "Quaternion"
            },
            "name": "q"
          }
        ],
        "return_type": {
          "type": "float"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "quaternion_lerp",
        "parameters": [
          {
            "datatype": {
              "type": "Quaternion"
            },
            "name": "q1"
          },
          {
            "datatype": {
              "type": "Quaternion"
            },
            "name": "q2"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "amount"
          }
        ],
        "return_type": {
          "type": "Quaternion"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "quaternion_multiply",
        "parameters": [
          {
            "datatype": {
              "type": "Quaternion"
            },
            "name": "q1"
          },
          {
            "datatype": {
              "type": "Quaternion"
            },
            "name": "q2"
          }
        ],
        "return_type": {
          "type": "Quaternion"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "quaternion_nlerp",
        "parameters": [
          {
            "datatype": {
              "type": "Quaternion"
            },
            "name": "q1"
          },
          {
            "datatype": {
              "type": "Quaternion"
            },
            "name": "q2"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "amount"
          }
        ],
        "return_type": {
          "type": "Quaternion"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "quaternion_normalize",
        "parameters": [
          {
            "datatype": {
              "type": "Quaternion"
            },
            "name": "q"
          }
        ],
        "return_type": {
          "type": "Quaternion"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "quaternion_scale",
        "parameters": [
          {
            "datatype": {
              "type": "Quaternion"
            },
            "name": "q"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "mul"
          }
        ],
        "return_type": {
          "type": "Quaternion"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "quaternion_slerp",
        "parameters": [
          {
            "datatype": {
              "type": "Quaternion"
            },
            "name": "q1"
          },
          {
            "datatype": {
              "type": "Quaternion"
            },
            "name": "q2"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "amount"
          }
        ],
        "return_type": {
          "type": "Quaternion"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "quaternion_subtract",
        "parameters": [
          {
            "datatype": {
              "type": "Quaternion"
            },
            "name": "q1"
          },
          {
            "datatype": {
              "type": "Quaternion"
            },
            "name": "q2"
          }
        ],
        "return_type": {
          "type": "Quaternion"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "quaternion_subtract_value",
        "parameters": [
          {
            "datatype": {
              "type": "Quaternion"
            },
            "name": "q"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "sub"
          }
        ],
        "return_type": {
          "type": "Quaternion"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "quaternion_to_axis_angle",
        "parameters": [
          {
            "datatype": {
              "type": "Quaternion"
            },
            "name": "q"
          },
          {
            "datatype": {
              "arguments": [
                {
                  "type": "Vector3"
                }
              ],
              "type": "Ptr"
            },
            "name": "out_axis"
          },
          {
            "datatype": {
              "arguments": [
                {
                  "type": "CFloat"
                }
              ],
              "type": "Ptr"
            },
            "name": "out_angle"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "quaternion_to_euler",
        "parameters": [
          {
            "datatype": {
              "type": "Quaternion"
            },
            "name": "q"
          }
        ],
        "return_type": {
          "type": "Vector3"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "quaternion_to_matrix",
        "parameters": [
          {
            "datatype": {
              "type": "Quaternion"
            },
            "name": "q"
          }
        ],
        "return_type": {
          "type": "Matrix"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "quaternion_transform",
        "parameters": [
          {
            "datatype": {
              "type": "Quaternion"
            },
            "name": "q"
          },
          {
            "datatype": {
              "type": "Matrix"
            },
            "name": "mat"
          }
        ],
        "return_type": {
          "type": "Quaternion"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "remap",
        "parameters": [
          {
            "datatype": {
              "type": "float"
            },
            "name": "value"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "input_start"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "input_end"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "output_start"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "output_end"
          }
        ],
        "return_type": {
          "type": "float"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "vector2_add",
        "parameters": [
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "v1"
          },
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "v2"
          }
        ],
        "return_type": {
          "type": "Vector2"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "vector2_add_value",
        "parameters": [
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "v"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "add"
          }
        ],
        "return_type": {
          "type": "Vector2"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "vector2_angle",
        "parameters": [
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "v1"
          },
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "v2"
          }
        ],
        "return_type": {
          "type": "float"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "vector2_clamp",
        "parameters": [
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "v"
          },
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "min"
          },
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "max"
          }
        ],
        "return_type": {
          "type": "Vector2"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "vector2_clamp_value",
        "parameters": [
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "v"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "min"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "max"
          }
        ],
        "return_type": {
          "type": "Vector2"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "vector2_distance",
        "parameters": [
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "v1"
          },
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "v2"
          }
        ],
        "return_type": {
          "type": "float"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "vector2_distance_sqr",
        "parameters": [
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "v1"
          },
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "v2"
          }
        ],
        "return_type": {
          "type": "float"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "vector2_divide",
        "parameters": [
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "v1"
          },
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "v2"
          }
        ],
        "return_type": {
          "type": "Vector2"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "vector2_dot_product",
        "parameters": [
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "v1"
          },
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "v2"
          }
        ],
        "return_type": {
          "type": "float"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "vector2_equals",
        "parameters": [
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "p"
          },
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "q"
          }
        ],
        "return_type": {
          "type": "int"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "vector2_invert",
        "parameters": [
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "v"
          }
        ],
        "return_type": {
          "type": "Vector2"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "vector2_length",
        "parameters": [
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "v"
          }
        ],
        "return_type": {
          "type": "float"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "vector2_length_sqr",
        "parameters": [
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "v"
          }
        ],
        "return_type": {
          "type": "float"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "vector2_lerp",
        "parameters": [
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "v1"
          },
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "v2"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "amount"
          }
        ],
        "return_type": {
          "type": "Vector2"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "vector2_line_angle",
        "parameters": [
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "start"
          },
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "end"
          }
        ],
        "return_type": {
          "type": "float"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "vector2_move_towards",
        "parameters": [
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "v"
          },
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "target"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "max_distance"
          }
        ],
        "return_type": {
          "type": "Vector2"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "vector2_multiply",
        "parameters": [
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "v1"
          },
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "v2"
          }
        ],
        "return_type": {
          "type": "Vector2"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "vector2_negate",
        "parameters": [
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "v"
          }
        ],
        "return_type": {
          "type": "Vector2"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "vector2_normalize",
        "parameters": [
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "v"
          }
        ],
        "return_type": {
          "type": "Vector2"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "vector2_one",
        "parameters": [],
        "return_type": {
          "type": "Vector2"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "vector2_reflect",
        "parameters": [
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "v"
          },
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "normal"
          }
        ],
        "return_type": {
          "type": "Vector2"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "vector2_rotate",
        "parameters": [
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "v"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "angle"
          }
        ],
        "return_type": {
          "type": "Vector2"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "vector2_scale",
        "parameters": [
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "v"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "scale"
          }
        ],
        "return_type": {
          "type": "Vector2"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "vector2_subtract",
        "parameters": [
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "v1"
          },
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "v2"
          }
        ],
        "return_type": {
          "type": "Vector2"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "vector2_subtract_value",
        "parameters": [
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "v"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "sub"
          }
        ],
        "return_type": {
          "type": "Vector2"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "vector2_transform",
        "parameters": [
          {
            "datatype": {
              "type": "Vector2"
            },
            "name": "v"
          },
          {
            "datatype": {
              "type": "Matrix"
            },
            "name": "mat"
          }
        ],
        "return_type": {
          "type": "Vector2"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "vector2_zero",
        "parameters": [],
        "return_type": {
          "type": "Vector2"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "vector3_add",
        "parameters": [
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "v1"
          },
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "v2"
          }
        ],
        "return_type": {
          "type": "Vector3"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "vector3_add_value",
        "parameters": [
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "v"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "add"
          }
        ],
        "return_type": {
          "type": "Vector3"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "vector3_angle",
        "parameters": [
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "v1"
          },
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "v2"
          }
        ],
        "return_type": {
          "type": "float"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "vector3_barycenter",
        "parameters": [
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "p"
          },
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "a"
          },
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "b"
          },
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "c_arg"
          }
        ],
        "return_type": {
          "type": "Vector3"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "vector3_clamp",
        "parameters": [
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "v"
          },
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "min"
          },
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "max"
          }
        ],
        "return_type": {
          "type": "Vector3"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "vector3_clamp_value",
        "parameters": [
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "v"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "min"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "max"
          }
        ],
        "return_type": {
          "type": "Vector3"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "vector3_cross_product",
        "parameters": [
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "v1"
          },
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "v2"
          }
        ],
        "return_type": {
          "type": "Vector3"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "vector3_distance",
        "parameters": [
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "v1"
          },
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "v2"
          }
        ],
        "return_type": {
          "type": "float"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "vector3_distance_sqr",
        "parameters": [
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "v1"
          },
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "v2"
          }
        ],
        "return_type": {
          "type": "float"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "vector3_divide",
        "parameters": [
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "v1"
          },
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "v2"
          }
        ],
        "return_type": {
          "type": "Vector3"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "vector3_dot_product",
        "parameters": [
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "v1"
          },
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "v2"
          }
        ],
        "return_type": {
          "type": "float"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "vector3_equals",
        "parameters": [
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "p"
          },
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "q"
          }
        ],
        "return_type": {
          "type": "int"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "vector3_invert",
        "parameters": [
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "v"
          }
        ],
        "return_type": {
          "type": "Vector3"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "vector3_length",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "type": "Vector3"
                }
              ],
              "type": "Const"
            },
            "name": "v"
          }
        ],
        "return_type": {
          "type": "float"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "vector3_length_sqr",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "type": "Vector3"
                }
              ],
              "type": "Const"
            },
            "name": "v"
          }
        ],
        "return_type": {
          "type": "float"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "vector3_lerp",
        "parameters": [
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "v1"
          },
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "v2"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "amount"
          }
        ],
        "return_type": {
          "type": "Vector3"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "vector3_max",
        "parameters": [
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "v1"
          },
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "v2"
          }
        ],
        "return_type": {
          "type": "Vector3"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "vector3_min",
        "parameters": [
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "v1"
          },
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "v2"
          }
        ],
        "return_type": {
          "type": "Vector3"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "vector3_multiply",
        "parameters": [
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "v1"
          },
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "v2"
          }
        ],
        "return_type": {
          "type": "Vector3"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "vector3_negate",
        "parameters": [
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "v"
          }
        ],
        "return_type": {
          "type": "Vector3"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "vector3_normalize",
        "parameters": [
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "v"
          }
        ],
        "return_type": {
          "type": "Vector3"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "vector3_one",
        "parameters": [],
        "return_type": {
          "type": "Vector3"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "vector3_ortho_normalize",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "type": "Vector3"
                }
              ],
              "type": "Ptr"
            },
            "name": "v1"
          },
          {
            "datatype": {
              "arguments": [
                {
                  "type": "Vector3"
                }
              ],
              "type": "Ptr"
            },
            "name": "v2"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "vector3_perpendicular",
        "parameters": [
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "v"
          }
        ],
        "return_type": {
          "type": "Vector3"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "vector3_reflect",
        "parameters": [
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "v"
          },
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "normal"
          }
        ],
        "return_type": {
          "type": "Vector3"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "vector3_refract",
        "parameters": [
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "v"
          },
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "n"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "r"
          }
        ],
        "return_type": {
          "type": "Vector3"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "vector3_rotate_by_axis_angle",
        "parameters": [
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "v"
          },
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "axis"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "angle"
          }
        ],
        "return_type": {
          "type": "Vector3"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "vector3_rotate_by_quaternion",
        "parameters": [
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "v"
          },
          {
            "datatype": {
              "type": "Quaternion"
            },
            "name": "q"
          }
        ],
        "return_type": {
          "type": "Vector3"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "vector3_scale",
        "parameters": [
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "v"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "scalar"
          }
        ],
        "return_type": {
          "type": "Vector3"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "vector3_subtract",
        "parameters": [
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "v1"
          },
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "v2"
          }
        ],
        "return_type": {
          "type": "Vector3"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "vector3_subtract_value",
        "parameters": [
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "v"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "sub"
          }
        ],
        "return_type": {
          "type": "Vector3"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "vector3_to_float_v",
        "parameters": [
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "v"
          }
        ],
        "return_type": {
          "type": "float3"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "vector3_transform",
        "parameters": [
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "v"
          },
          {
            "datatype": {
              "type": "Matrix"
            },
            "name": "mat"
          }
        ],
        "return_type": {
          "type": "Vector3"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "vector3_unproject",
        "parameters": [
          {
            "datatype": {
              "type": "Vector3"
            },
            "name": "source"
          },
          {
            "datatype": {
              "type": "Matrix"
            },
            "name": "projection"
          },
          {
            "datatype": {
              "type": "Matrix"
            },
            "name": "view"
          }
        ],
        "return_type": {
          "type": "Vector3"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "vector3_zero",
        "parameters": [],
        "return_type": {
          "type": "Vector3"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "wrap",
        "parameters": [
          {
            "datatype": {
              "type": "float"
            },
            "name": "value"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "min"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "max"
          }
        ],
        "return_type": {
          "type": "float"
        }
      }
    ],
    "global_consts": [],
    "imports": [
      {
        "alias": "c",
        "path": [
          "libs",
          "c"
        ]
      },
      {
        "alias": "rl",
        "path": [
          "raylib"
        ]
      }
    ],
    "macros": []
  },
  "raylib.utils": {
    "classes": [
      {
        "annotations": [
          {
            "argument": "void*",
            "name": "@nativedefine"
          }
        ],
        "comment": " Arbitary data (void*)",
        "members": [],
        "name": "Data"
      }
    ],
    "functions": [
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Clear background with RAYWHITE colour",
        "name": "clear",
        "parameters": [],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "cos_deg",
        "parameters": [
          {
            "datatype": {
              "type": "float"
            },
            "name": "x"
          }
        ],
        "return_type": {
          "type": "float"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Are we running in raylib in desktop?",
        "name": "is_desktop",
        "parameters": [],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Are we running in raylib with hot reload?",
        "name": "is_hot_reload",
        "parameters": [],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Are we running in raylib WASM/Web?",
        "name": "is_web",
        "parameters": [],
        "return_type": {
          "type": "bool"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": "",
        "name": "lerp_color",
        "parameters": [
          {
            "datatype": {
              "type": "Color"
            },
            "name": "a"
          },
          {
            "datatype": {
              "type": "Color"
            },
            "name": "b"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "fraction"
          }
        ],
        "return_type": {
          "type": "Color"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": " Get approximate PI value",
        "name": "pi",
        "parameters": [],
        "return_type": {
          "type": "float"
        }
      },
      {
        "annotations": [],
        "comment": " Map x to be from 'a to b' range to 'c to d' range",
        "name": "remap",
        "parameters": [
          {
            "datatype": {
              "type": "float"
            },
            "name": "x"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "a"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "b"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "c"
          },
          {
            "datatype": {
              "type": "float"
            },
            "name": "d"
          }
        ],
        "return_type": {
          "type": "float"
        }
      },
      {
        "annotations": [
          {
            "argument": "yk__rungameloop",
            "name": "@nativedefine"
          }
        ],
        "comment": " Run def game_step(d: utils.Data) in a loop\n Warning! this assumes you have def game_step(d: utils.Data) present in code\n Warning! game_step def must be present in same file as main()\n See wind_tree_gs.yaka for a sample of how to use this.\n Use only if you run into slowness with standard while loop",
        "name": "run_game_loop",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "fps"
          },
          {
            "datatype": {
              "type": "Data"
            },
            "name": "data"
          }
        ],
        "return_type": {
          "type": "int"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "sin_deg",
        "parameters": [
          {
            "datatype": {
              "type": "float"
            },
            "name": "x"
          }
        ],
        "return_type": {
          "type": "float"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "tan_deg",
        "parameters": [
          {
            "datatype": {
              "type": "float"
            },
            "name": "x"
          }
        ],
        "return_type": {
          "type": "float"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "todeg",
        "parameters": [
          {
            "datatype": {
              "type": "float"
            },
            "name": "radians"
          }
        ],
        "return_type": {
          "type": "float"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "torad",
        "parameters": [
          {
            "datatype": {
              "type": "float"
            },
            "name": "degrees"
          }
        ],
        "return_type": {
          "type": "float"
        }
      }
    ],
    "global_consts": [],
    "imports": [
      {
        "alias": "rl",
        "path": [
          "raylib"
        ]
      }
    ],
    "macros": []
  },
  "w4": {
    "classes": [],
    "functions": [
      {
        "annotations": [
          {
            "argument": "blit",
            "name": "@native"
          }
        ],
        "comment": " Copies pixels to the framebuffer",
        "name": "blit",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "arguments": [
                    {
                      "type": "u8"
                    }
                  ],
                  "type": "Const"
                }
              ],
              "type": "Ptr"
            },
            "name": "data"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "x"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "y"
          },
          {
            "datatype": {
              "type": "u32"
            },
            "name": "width"
          },
          {
            "datatype": {
              "type": "u32"
            },
            "name": "height"
          },
          {
            "datatype": {
              "type": "u32"
            },
            "name": "flags"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "blitSub",
            "name": "@native"
          }
        ],
        "comment": " Copies a subregion within a larger sprite atlas to the framebuffer",
        "name": "blit_sub",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "arguments": [
                    {
                      "type": "u8"
                    }
                  ],
                  "type": "Const"
                }
              ],
              "type": "Ptr"
            },
            "name": "data"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "x"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "y"
          },
          {
            "datatype": {
              "type": "u32"
            },
            "name": "width"
          },
          {
            "datatype": {
              "type": "u32"
            },
            "name": "height"
          },
          {
            "datatype": {
              "type": "u32"
            },
            "name": "src_x"
          },
          {
            "datatype": {
              "type": "u32"
            },
            "name": "src_y"
          },
          {
            "datatype": {
              "type": "u32"
            },
            "name": "stride"
          },
          {
            "datatype": {
              "type": "u32"
            },
            "name": "flags"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "diskr",
            "name": "@native"
          }
        ],
        "comment": " Reads up to `size` bytes from persistent storage into the pointer `dest`",
        "name": "diskr",
        "parameters": [
          {
            "datatype": {
              "type": "AnyPtr"
            },
            "name": "dest"
          },
          {
            "datatype": {
              "type": "u32"
            },
            "name": "size"
          }
        ],
        "return_type": {
          "type": "u32"
        }
      },
      {
        "annotations": [
          {
            "argument": "diskw",
            "name": "@native"
          }
        ],
        "comment": " Writes up to `size` bytes from the pointer `src` into persistent storage",
        "name": "diskw",
        "parameters": [
          {
            "datatype": {
              "type": "AnyPtrToConst"
            },
            "name": "src"
          },
          {
            "datatype": {
              "type": "u32"
            },
            "name": "size"
          }
        ],
        "return_type": {
          "type": "u32"
        }
      },
      {
        "annotations": [
          {
            "argument": "(*((uint16_t*)0x14))",
            "name": "@nativemacro"
          }
        ],
        "comment": " Read draw colors",
        "name": "draw_colors",
        "parameters": [],
        "return_type": {
          "type": "u16"
        }
      },
      {
        "annotations": [
          {
            "argument": "((uint8_t*)0xa0)",
            "name": "@nativemacro"
          }
        ],
        "comment": " Access pointer to framebuffer",
        "name": "framebuffer",
        "parameters": [],
        "return_type": {
          "arguments": [
            {
              "type": "u8"
            }
          ],
          "type": "Ptr"
        }
      },
      {
        "annotations": [
          {
            "argument": "(*((const uint8_t*)0x16))",
            "name": "@nativemacro"
          }
        ],
        "comment": " Read gamepad 1 value",
        "name": "gamepad1",
        "parameters": [],
        "return_type": {
          "type": "u8"
        }
      },
      {
        "annotations": [
          {
            "argument": "(*((const uint8_t*)0x17))",
            "name": "@nativemacro"
          }
        ],
        "comment": " Read gamepad 2 value",
        "name": "gamepad2",
        "parameters": [],
        "return_type": {
          "type": "u8"
        }
      },
      {
        "annotations": [
          {
            "argument": "(*((const uint8_t*)0x18))",
            "name": "@nativemacro"
          }
        ],
        "comment": " Read gamepad 3 value",
        "name": "gamepad3",
        "parameters": [],
        "return_type": {
          "type": "u8"
        }
      },
      {
        "annotations": [
          {
            "argument": "(*((const uint8_t*)0x19))",
            "name": "@nativemacro"
          }
        ],
        "comment": " Read gamepad 4 value",
        "name": "gamepad4",
        "parameters": [],
        "return_type": {
          "type": "u8"
        }
      },
      {
        "annotations": [
          {
            "argument": "hline",
            "name": "@native"
          }
        ],
        "comment": " Draws a horizontal line",
        "name": "hline",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "x"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "y"
          },
          {
            "datatype": {
              "type": "u32"
            },
            "name": "length"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "line",
            "name": "@native"
          }
        ],
        "comment": " Draws a line between two points",
        "name": "line",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "x1"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "y1"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "x2"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "y2"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "(*((const uint8_t*)0x1e))",
            "name": "@nativemacro"
          }
        ],
        "comment": " Read mouse buttons",
        "name": "mouse_buttons",
        "parameters": [],
        "return_type": {
          "type": "u8"
        }
      },
      {
        "annotations": [
          {
            "argument": "(*((const int16_t*)0x1a))",
            "name": "@nativemacro"
          }
        ],
        "comment": " Read mouse x",
        "name": "mouse_x",
        "parameters": [],
        "return_type": {
          "type": "i16"
        }
      },
      {
        "annotations": [
          {
            "argument": "(*((const int16_t*)0x1c))",
            "name": "@nativemacro"
          }
        ],
        "comment": " Read mouse y",
        "name": "mouse_y",
        "parameters": [],
        "return_type": {
          "type": "i16"
        }
      },
      {
        "annotations": [
          {
            "argument": "((int32_t)*((const uint8_t*)0x20))",
            "name": "@nativemacro"
          }
        ],
        "comment": "",
        "name": "netplay",
        "parameters": [],
        "return_type": {
          "type": "int"
        }
      },
      {
        "annotations": [
          {
            "argument": "oval",
            "name": "@native"
          }
        ],
        "comment": " Draws an oval (or circle)",
        "name": "oval",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "x"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "y"
          },
          {
            "datatype": {
              "type": "u32"
            },
            "name": "width"
          },
          {
            "datatype": {
              "type": "u32"
            },
            "name": "height"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "((uint32_t*)0x04)",
            "name": "@nativemacro"
          }
        ],
        "comment": " Get a pointer to pallet",
        "name": "palette",
        "parameters": [],
        "return_type": {
          "arguments": [
            {
              "type": "u32"
            }
          ],
          "type": "Ptr"
        }
      },
      {
        "annotations": [
          {
            "argument": "rect",
            "name": "@native"
          }
        ],
        "comment": " Draws a rectangle",
        "name": "rect",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "x"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "y"
          },
          {
            "datatype": {
              "type": "u32"
            },
            "name": "width"
          },
          {
            "datatype": {
              "type": "u32"
            },
            "name": "height"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "*((uint16_t*)0x14) = nn__value",
            "name": "@nativemacro"
          }
        ],
        "comment": " Set draw colors",
        "name": "set_draw_colors",
        "parameters": [
          {
            "datatype": {
              "type": "u16"
            },
            "name": "value"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Set a state value to be passed to game_step() function",
        "name": "set_game_state",
        "parameters": [
          {
            "datatype": {
              "type": "AnyPtr"
            },
            "name": "data"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Set palette",
        "name": "set_palette",
        "parameters": [
          {
            "datatype": {
              "type": "u32"
            },
            "name": "c1"
          },
          {
            "datatype": {
              "type": "u32"
            },
            "name": "c2"
          },
          {
            "datatype": {
              "type": "u32"
            },
            "name": "c3"
          },
          {
            "datatype": {
              "type": "u32"
            },
            "name": "c4"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Set system flags",
        "name": "set_system_flags",
        "parameters": [
          {
            "datatype": {
              "type": "u8"
            },
            "name": "value"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "(*((uint8_t*)0x1f))",
            "name": "@nativemacro"
          }
        ],
        "comment": " Read system flags",
        "name": "system_flags",
        "parameters": [],
        "return_type": {
          "type": "u8"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Draws text using the built-in system font",
        "name": "text",
        "parameters": [
          {
            "datatype": {
              "type": "str"
            },
            "name": "text_data"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "x"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "y"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Draws text from given binarydata(\"text\") (or manually created u8 Ptr) (no string allocation)",
        "name": "text_u8",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "arguments": [
                    {
                      "type": "u8"
                    }
                  ],
                  "type": "Const"
                }
              ],
              "type": "Ptr"
            },
            "name": "text_data"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "x"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "y"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "tone",
            "name": "@native"
          }
        ],
        "comment": " Plays a sound tone",
        "name": "tone",
        "parameters": [
          {
            "datatype": {
              "type": "u32"
            },
            "name": "frequency"
          },
          {
            "datatype": {
              "type": "u32"
            },
            "name": "duration"
          },
          {
            "datatype": {
              "type": "u32"
            },
            "name": "volume"
          },
          {
            "datatype": {
              "type": "u32"
            },
            "name": "flags"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Prints a message to the debug console",
        "name": "trace",
        "parameters": [
          {
            "datatype": {
              "type": "str"
            },
            "name": "text_data"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "",
            "name": "@native"
          }
        ],
        "comment": " Prints a message to the debug console from given binarydata(\"text\") (or manually created u8 Ptr) (no string allocation)",
        "name": "trace_u8",
        "parameters": [
          {
            "datatype": {
              "arguments": [
                {
                  "arguments": [
                    {
                      "type": "u8"
                    }
                  ],
                  "type": "Const"
                }
              ],
              "type": "Ptr"
            },
            "name": "text_data"
          }
        ],
        "return_type": {
          "type": "None"
        }
      },
      {
        "annotations": [
          {
            "argument": "vline",
            "name": "@native"
          }
        ],
        "comment": " Draws a vertical line",
        "name": "vline",
        "parameters": [
          {
            "datatype": {
              "type": "int"
            },
            "name": "x"
          },
          {
            "datatype": {
              "type": "int"
            },
            "name": "y"
          },
          {
            "datatype": {
              "type": "u32"
            },
            "name": "length"
          }
        ],
        "return_type": {
          "type": "None"
        }
      }
    ],
    "global_consts": [
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "u32"
            }
          ],
          "type": "Const"
        },
        "name": "BLIT_1BPP"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "u32"
            }
          ],
          "type": "Const"
        },
        "name": "BLIT_2BPP"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "u32"
            }
          ],
          "type": "Const"
        },
        "name": "BLIT_FLIP_X"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "u32"
            }
          ],
          "type": "Const"
        },
        "name": "BLIT_FLIP_Y"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "u32"
            }
          ],
          "type": "Const"
        },
        "name": "BLIT_ROTATE"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "u8"
            }
          ],
          "type": "Const"
        },
        "name": "BUTTON_1"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "u8"
            }
          ],
          "type": "Const"
        },
        "name": "BUTTON_2"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "u8"
            }
          ],
          "type": "Const"
        },
        "name": "BUTTON_DOWN"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "u8"
            }
          ],
          "type": "Const"
        },
        "name": "BUTTON_LEFT"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "u8"
            }
          ],
          "type": "Const"
        },
        "name": "BUTTON_RIGHT"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "u8"
            }
          ],
          "type": "Const"
        },
        "name": "BUTTON_UP"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "u8"
            }
          ],
          "type": "Const"
        },
        "name": "MOUSE_LEFT"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "u8"
            }
          ],
          "type": "Const"
        },
        "name": "MOUSE_MIDDLE"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "u8"
            }
          ],
          "type": "Const"
        },
        "name": "MOUSE_RIGHT"
      },
      {
        "comment": " Screen size of wasm4 console",
        "datatype": {
          "arguments": [
            {
              "type": "int"
            }
          ],
          "type": "Const"
        },
        "name": "SCREEN_SIZE"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "u8"
            }
          ],
          "type": "Const"
        },
        "name": "SYSTEM_HIDE_GAMEPAD_OVERLAY"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "u8"
            }
          ],
          "type": "Const"
        },
        "name": "SYSTEM_PRESERVE_FRAMEBUFFER"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "u32"
            }
          ],
          "type": "Const"
        },
        "name": "TONE_MODE1"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "u32"
            }
          ],
          "type": "Const"
        },
        "name": "TONE_MODE2"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "u32"
            }
          ],
          "type": "Const"
        },
        "name": "TONE_MODE3"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "u32"
            }
          ],
          "type": "Const"
        },
        "name": "TONE_MODE4"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "u32"
            }
          ],
          "type": "Const"
        },
        "name": "TONE_NOISE"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "u32"
            }
          ],
          "type": "Const"
        },
        "name": "TONE_PAN_LEFT"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "u32"
            }
          ],
          "type": "Const"
        },
        "name": "TONE_PAN_RIGHT"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "u32"
            }
          ],
          "type": "Const"
        },
        "name": "TONE_PULSE1"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "u32"
            }
          ],
          "type": "Const"
        },
        "name": "TONE_PULSE2"
      },
      {
        "comment": "",
        "datatype": {
          "arguments": [
            {
              "type": "u32"
            }
          ],
          "type": "Const"
        },
        "name": "TONE_TRIANGLE"
      }
    ],
    "imports": [],
    "macros": []
  }
}