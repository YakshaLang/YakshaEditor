import webui as w
import libs.c
import libs.strings.refs as r
import libs.console
import libs.io
import libs.os
import dtraverse as dt

# TODO move this to numbers
macros! {
    (defun remove_first_last (s)
        (= x (explode_string s))
        (= x (tail x))
        (pop x)
        (= res (reduce + x))
        res)
    (defun char (elem)
        (list (yk_create_token YK_TOKEN_NAME "inlinec")
            (ykt_paren_open)
            (ykt_string "int") (ykt_comma)
            (ykt_string (+ "'" (remove_first_last (repr elem::value)) "'")) (ykt_paren_close)))
    (yk_register {dsl char char})
    # char!{"a"} --> inlinec("int", "'a'")
}

# TODO consider adding this to standard library
@native
def append_char(s: sr, character: int) -> str:
    ccode """size_t length = yk__bstr_len(nn__s);
    size_t new_length = length + 1;
    yk__sds result = yk__sdsnewlen(yk__bstr_get_reference(nn__s), length);
    result = yk__sdsgrowzero(result, new_length);
    result[length] = nn__character;
    return result"""

# TODO move this to strings
# TODO use string buffer
def escape_js_string(s: sr) -> str:
    length = len(s)
    result: str = ""
    cur: int = 0
    for (i = 0; i < length; i += 1):
        cur = charat(s, i)
        if cur == char!{"\""}:
            result += "\\\""
        elif cur == char!{"\\"}:
            result += "\\\\"
        elif cur == char!{"\b"}:
            result += "\\b"
        elif cur == char!{"\f"}:
            result += "\\f"
        elif cur == char!{"\n"}:
            result += "\\n"
        elif cur == char!{"\r"}:
            result += "\\r"
        elif cur == char!{"\t"}:
            result += "\\t"
        else:
            result = append_char(result, cur)
    return result


def file_entries_to_json(entries: Array[dt.Entry]) -> str:
    json: str = "["
    counter = 0
    for i in entries:
        json += "{"
        json += "\"name\": \"" + escape_js_string(i.name) + "\","
        json += "\"type\": \"" + iif(i.is_dir, "d", "f") + "\""
        json += "}"
        if counter < len(entries) - 1:
            json += ","
        counter += 1
    json += "]"
    return json

def get_compilation_errors(event: w.Event) -> None:
    yaka = os.which("yaksha")
    if yaka == "":
        w.return_string(event, cast("c.CStr", "yaksha not found"))
        return
    arguments: Array[str] = array("str", "yaksha", "compile", "main.yaka")
    result = os.run(arguments)
    w.return_string(event, cast("c.CStr", "[]"))

def list_files(event: w.Event) -> None:
    f = dt.listdir(".")
    json: str = file_entries_to_json(f)
    w.return_string(event, cast("c.CStr", json))

def click_file(event: w.Event) -> None:
    path_cstr: c.CStr = w.get_string(event)
    path: sr = r.wrap_cstr_z(path_cstr)
    content = io.readfile(path)
    w.return_string(event, cast("c.CStr", content))

def save_file(event: w.Event) -> None:
    path_cstr: c.CStr = w.get_string(event)
    path: sr = r.wrap_cstr_z(path_cstr)
    content_cstr: c.CStr = w.get_string(event)
    content: sr = r.wrap_cstr_z(content_cstr)
    io.writefile(path, content)
    w.return_string(event, c.cstr!{"OK"})

def show_open_folder_dialog(event: w.Event) -> None:
    pass

def show_save_file_dialog(event: w.Event) -> None:
    pass

def change_folder(event: w.Event) -> None:
    path_cstr: c.CStr = w.get_string(event)
    path: sr = r.wrap_cstr_z(path_cstr)
    success: bool = os.chdir(path)
    if not success:
        w.return_string(event, c.cstr!{"Failed to change directory"})
    else:
        w.return_string(event, c.cstr!{"OK"})


def main() -> int:
    mw = w.new_window()
    println("created window")
    yaksha = os.which("yaksha")
    if yaksha == "":
        println("yaksha not found")
        return 1
    println("yaksha binary found at: " + yaksha)
    w.set_root_folder(mw, c.cstr!{"frontend"})
    # w.bind(mw, "__close-btn", on_close)
    w.show(mw, c.cstr!{"index.html"})

    # bind events
    w.bind(mw, c.cstr!{"listfiles"}, list_files)
    w.bind(mw, c.cstr!{"clickfile"}, click_file)
    w.bind(mw, c.cstr!{"cd"}, change_folder)

    # exit
    println("waiting ... ")
    w.wait()
    println("done")
    w.clean()
    println("cleaned")
    println("press any key to exit")
    console.getch()
    return 0
